
test_5.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000152  00800100  00002e02  00002e96  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002e02  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000004dd  00800252  00800252  00002fe8  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00002fe8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00003044  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00002eb0  00000000  00000000  00003084  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0005f750  00000000  00000000  00005f34  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002632  00000000  00000000  00065684  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00010d2b  00000000  00000000  00067cb6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000127b4  00000000  00000000  000789e4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00015d15  00000000  00000000  0008b198  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00073cd6  00000000  00000000  000a0ead  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00002d90  00000000  00000000  00114b83  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 78 05 	jmp	0xaf0	; 0xaf0 <__ctors_end>
       4:	0c 94 95 05 	jmp	0xb2a	; 0xb2a <__bad_interrupt>
       8:	0c 94 95 05 	jmp	0xb2a	; 0xb2a <__bad_interrupt>
       c:	0c 94 95 05 	jmp	0xb2a	; 0xb2a <__bad_interrupt>
      10:	0c 94 95 05 	jmp	0xb2a	; 0xb2a <__bad_interrupt>
      14:	0c 94 95 05 	jmp	0xb2a	; 0xb2a <__bad_interrupt>
      18:	0c 94 95 05 	jmp	0xb2a	; 0xb2a <__bad_interrupt>
      1c:	0c 94 95 05 	jmp	0xb2a	; 0xb2a <__bad_interrupt>
      20:	0c 94 95 05 	jmp	0xb2a	; 0xb2a <__bad_interrupt>
      24:	0c 94 95 05 	jmp	0xb2a	; 0xb2a <__bad_interrupt>
      28:	0c 94 95 05 	jmp	0xb2a	; 0xb2a <__bad_interrupt>
      2c:	0c 94 95 05 	jmp	0xb2a	; 0xb2a <__bad_interrupt>
      30:	0c 94 95 05 	jmp	0xb2a	; 0xb2a <__bad_interrupt>
      34:	0c 94 95 05 	jmp	0xb2a	; 0xb2a <__bad_interrupt>
      38:	0c 94 95 05 	jmp	0xb2a	; 0xb2a <__bad_interrupt>
      3c:	0c 94 95 05 	jmp	0xb2a	; 0xb2a <__bad_interrupt>
      40:	0c 94 95 05 	jmp	0xb2a	; 0xb2a <__bad_interrupt>
      44:	0c 94 95 05 	jmp	0xb2a	; 0xb2a <__bad_interrupt>
      48:	0c 94 95 05 	jmp	0xb2a	; 0xb2a <__bad_interrupt>
      4c:	0c 94 95 05 	jmp	0xb2a	; 0xb2a <__bad_interrupt>
      50:	0c 94 95 05 	jmp	0xb2a	; 0xb2a <__bad_interrupt>
      54:	0c 94 95 05 	jmp	0xb2a	; 0xb2a <__bad_interrupt>
      58:	0c 94 95 05 	jmp	0xb2a	; 0xb2a <__bad_interrupt>
      5c:	0c 94 95 05 	jmp	0xb2a	; 0xb2a <__bad_interrupt>
      60:	0c 94 95 05 	jmp	0xb2a	; 0xb2a <__bad_interrupt>
      64:	0c 94 95 05 	jmp	0xb2a	; 0xb2a <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	5f 00       	.word	0x005f	; ????
      6a:	04 03       	mulsu	r16, r20
      6c:	04 04       	cpc	r0, r4
      6e:	01 04       	cpc	r0, r1
      70:	05 0a       	sbc	r0, r21
      72:	0d 00       	.word	0x000d	; ????
      74:	fe 09       	sbc	r31, r14
      76:	fe 09       	sbc	r31, r14
      78:	00 01       	movw	r0, r0
      7a:	85 03       	fmuls	r16, r21
      7c:	48 04       	cpc	r4, r8
      7e:	bd 20       	and	r11, r13
      80:	05 00       	.word	0x0005	; ????
      82:	91 02       	muls	r25, r17
      84:	21 07       	cpc	r18, r17
      86:	91 51       	subi	r25, 0x11	; 17
      88:	c2 45       	sbci	r28, 0x52	; 82
      8a:	00 22       	and	r0, r16
      8c:	08 23       	and	r16, r24
      8e:	9f 42       	sbci	r25, 0x2F	; 47
      90:	84 44       	sbci	r24, 0x44	; 68
      92:	00 23       	and	r16, r16
      94:	18 99       	sbic	0x03, 0	; 3
      96:	51 4b       	sbci	r21, 0xB1	; 177
      98:	4c 50       	subi	r20, 0x0C	; 12
      9a:	4c c8       	rjmp	.-3944   	; 0xfffff134 <__eeprom_end+0xff7ef134>
      9c:	81 48       	sbci	r24, 0x81	; 129
      9e:	4c 50       	subi	r20, 0x0C	; 12
      a0:	4c 50       	subi	r20, 0x0C	; 12
      a2:	4c c8       	rjmp	.-3944   	; 0xfffff13c <__eeprom_end+0xff7ef13c>
      a4:	81 48       	sbci	r24, 0x81	; 129
      a6:	4c 50       	subi	r20, 0x0C	; 12
      a8:	4c 08       	sbc	r4, r12
      aa:	00 24       	eor	r0, r0
      ac:	12 99       	sbic	0x02, 2	; 2
      ae:	51 53       	subi	r21, 0x31	; 49
      b0:	d4 45       	sbci	r29, 0x54	; 84
      b2:	4c 8c       	ldd	r4, Y+28	; 0x1c
      b4:	4c d4       	rcall	.+2200   	; 0x94e <__stack+0x4f>
      b6:	55 8c       	ldd	r5, Z+29	; 0x1d
      b8:	4c 8a       	std	Y+20, r4	; 0x14
      ba:	ab 20       	and	r10, r11
      bc:	00 25       	eor	r16, r0
      be:	15 99       	sbic	0x02, 5	; 2
      c0:	51 8b       	std	Z+17, r21	; 0x11
      c2:	50 44       	sbci	r21, 0x40	; 64
      c4:	48 2e       	mov	r4, r24
      c6:	82 24       	eor	r8, r2
      c8:	e2 52       	subi	r30, 0x22	; 34
      ca:	08 45       	sbci	r16, 0x58	; 88
      cc:	84 e4       	ldi	r24, 0x44	; 68
      ce:	22 48       	sbci	r18, 0x82	; 130
      d0:	04 00       	.word	0x0004	; ????
      d2:	26 14       	cp	r2, r6
      d4:	99 51       	subi	r25, 0x19	; 25
      d6:	8b 58       	subi	r24, 0x8B	; 139
      d8:	48 54       	subi	r20, 0x48	; 72
      da:	48 98       	cbi	0x09, 0	; 9
      dc:	58 48       	sbci	r21, 0x88	; 136
      de:	50 9a       	sbi	0x0a, 0	; 10
      e0:	a8 88       	ldd	r10, Y+16	; 0x10
      e2:	54 31       	cpi	r21, 0x14	; 20
      e4:	15 01       	movw	r2, r10
      e6:	27 06       	cpc	r2, r23
      e8:	21 5f       	subi	r18, 0xF1	; 241
      ea:	82 00       	.word	0x0082	; ????
      ec:	28 09       	sbc	r18, r8
      ee:	93 91       	.word	0x9193	; ????
      f0:	4a 44       	sbci	r20, 0x4A	; 74
      f2:	92 dc       	rcall	.-1756   	; 0xfffffa18 <__eeprom_end+0xff7efa18>
      f4:	24 29       	or	r18, r4
      f6:	0a 93       	st	-Y, r16
      f8:	91 42       	sbci	r25, 0x21	; 33
      fa:	4c 92       	st	X, r4
      fc:	5c 24       	eor	r5, r12
      fe:	01 2a       	or	r0, r17
     100:	0a 55       	subi	r16, 0x5A	; 90
     102:	dd 4a       	sbci	r29, 0xAD	; 173
     104:	50 48       	sbci	r21, 0x80	; 128
     106:	45 36       	cpi	r20, 0x65	; 101
     108:	01 2b       	or	r16, r17
     10a:	0b 55       	subi	r16, 0x5B	; 91
     10c:	d5 4a       	sbci	r29, 0xA5	; 165
     10e:	50 48       	sbci	r21, 0x80	; 128
     110:	49 50       	subi	r20, 0x09	; 9
     112:	08 00       	.word	0x0008	; ????
     114:	2c 06       	cpc	r2, r28
     116:	22 71       	andi	r18, 0x12	; 18
     118:	c6 00       	.word	0x00c6	; ????
     11a:	2d 06       	cpc	r2, r29
     11c:	15 d9       	rcall	.-3542   	; 0xfffff348 <__eeprom_end+0xff7ef348>
     11e:	42 01       	movw	r8, r4
     120:	2e 06       	cpc	r2, r30
     122:	22 71       	andi	r18, 0x12	; 18
     124:	02 01       	movw	r0, r4
     126:	2f 09       	sbc	r18, r15
     128:	99 51       	subi	r25, 0x19	; 25
     12a:	63 5c       	subi	r22, 0xC3	; 195
     12c:	fe 10       	cpse	r15, r14
     12e:	00 30       	cpi	r16, 0x00	; 0
     130:	0f 99       	sbic	0x01, 7	; 1
     132:	51 4b       	sbci	r21, 0xB1	; 177
     134:	4d 54       	subi	r20, 0x4D	; 77
     136:	44 9c       	mul	r4, r4
     138:	ee 22       	and	r14, r30
     13a:	a2 62       	ori	r26, 0x22	; 34
     13c:	4a 00       	.word	0x004a	; ????
     13e:	31 09       	sbc	r19, r1
     140:	95 d1       	rcall	.+810    	; 0x46c <__EEPROM_REGION_LENGTH__+0x6c>
     142:	4a c8       	rjmp	.-3948   	; 0xfffff1d8 <__eeprom_end+0xff7ef1d8>
     144:	50 3e       	cpi	r21, 0xE0	; 224
     146:	29 32       	cpi	r18, 0x29	; 41
     148:	0e 99       	sbic	0x01, 6	; 1
     14a:	51 c7       	rjmp	.+3746   	; 0xfee <u8g2_font_decode_glyph+0x64>
     14c:	45 5c       	subi	r20, 0xC5	; 197
     14e:	60 8a       	std	Z+16, r6	; 0x10
     150:	8b c0       	rjmp	.+278    	; 0x268 <__trampolines_end+0x200>
     152:	84 07       	cpc	r24, r20
     154:	02 33       	cpi	r16, 0x32	; 50
     156:	0f 99       	sbic	0x01, 7	; 1
     158:	51 c7       	rjmp	.+3746   	; 0xffc <u8g2_font_decode_glyph+0x72>
     15a:	45 5c       	subi	r20, 0xC5	; 197
     15c:	60 9a       	sbi	0x0c, 0	; 12
     15e:	ca 40       	sbci	r28, 0x0A	; 10
     160:	b9 88       	ldd	r11, Y+17	; 0x11
     162:	0b 00       	.word	0x000b	; ????
     164:	34 0b       	sbc	r19, r20
     166:	99 51       	subi	r25, 0x19	; 25
     168:	43 60       	ori	r20, 0x03	; 3
     16a:	9c ba       	out	0x1c, r9	; 28
     16c:	83 c1       	rjmp	.+774    	; 0x474 <__EEPROM_REGION_LENGTH__+0x74>
     16e:	1c 35       	cpi	r17, 0x5C	; 92
     170:	0f 99       	sbic	0x01, 7	; 1
     172:	51 c3       	rjmp	.+1698   	; 0x816 <__DATA_REGION_LENGTH__+0x16>
     174:	c1 60       	ori	r28, 0x01	; 1
     176:	c2 83       	std	Z+2, r28	; 0x02
     178:	c8 40       	sbci	r28, 0x08	; 8
     17a:	b9 88       	ldd	r11, Y+17	; 0x11
     17c:	0b 00       	.word	0x000b	; ????
     17e:	36 10       	cpse	r3, r6
     180:	99 51       	subi	r25, 0x19	; 25
     182:	c7 45       	sbci	r28, 0x57	; 87
     184:	9c 60       	ori	r25, 0x0C	; 12
     186:	e0 41       	sbci	r30, 0x10	; 16
     188:	44 9c       	mul	r4, r4
     18a:	ba 88       	ldd	r11, Y+18	; 0x12
     18c:	0b 00       	.word	0x000b	; ????
     18e:	37 0b       	sbc	r19, r23
     190:	99 51       	subi	r25, 0x19	; 25
     192:	c3 81       	ldd	r28, Z+3	; 0x03
     194:	60 5c       	subi	r22, 0xC0	; 192
     196:	0e 33       	cpi	r16, 0x3E	; 62
     198:	02 38       	cpi	r16, 0x82	; 130
     19a:	0f 99       	sbic	0x01, 7	; 1
     19c:	51 c7       	rjmp	.+3746   	; 0x1040 <u8g2_font_decode_glyph+0xb6>
     19e:	45 9c       	mul	r4, r5
     1a0:	ba 88       	ldd	r11, Y+18	; 0x12
     1a2:	8b 38       	cpi	r24, 0x8B	; 139
     1a4:	75 11       	cpse	r23, r5
     1a6:	17 00       	.word	0x0017	; ????
     1a8:	39 10       	cpse	r3, r9
     1aa:	99 51       	subi	r25, 0x19	; 25
     1ac:	c7 45       	sbci	r28, 0x57	; 87
     1ae:	9c ba       	out	0x1c, r9	; 28
     1b0:	88 83       	st	Y, r24
     1b2:	c0 40       	sbci	r28, 0x00	; 0
     1b4:	b9 88       	ldd	r11, Y+17	; 0x11
     1b6:	0b 00       	.word	0x000b	; ????
     1b8:	3a 07       	cpc	r19, r26
     1ba:	62 71       	andi	r22, 0x12	; 18
     1bc:	02 11       	cpse	r16, r2
     1be:	01 3b       	cpi	r16, 0xB1	; 177
     1c0:	08 62       	ori	r16, 0x28	; 40
     1c2:	71 02       	muls	r23, r17
     1c4:	91 44       	sbci	r25, 0x41	; 65
     1c6:	00 3c       	cpi	r16, 0xC0	; 192
     1c8:	08 74       	andi	r16, 0x48	; 72
     1ca:	b1 4e       	sbci	r27, 0xE1	; 225
     1cc:	48 46       	sbci	r20, 0x68	; 104
     1ce:	19 3d       	cpi	r17, 0xD9	; 217
     1d0:	07 44       	sbci	r16, 0x47	; 71
     1d2:	b5 02       	muls	r27, r21
     1d4:	21 01       	movw	r4, r2
     1d6:	3e 09       	sbc	r19, r14
     1d8:	74 b1       	in	r23, 0x04	; 4
     1da:	42 50       	subi	r20, 0x02	; 2
     1dc:	26 d9       	rcall	.-3508   	; 0xfffff42a <__eeprom_end+0xff7ef42a>
     1de:	00 3f       	cpi	r16, 0xF0	; 240
     1e0:	0f 99       	sbic	0x01, 7	; 1
     1e2:	51 c7       	rjmp	.+3746   	; 0x1086 <u8g2_font_decode_glyph+0xfc>
     1e4:	45 9c       	mul	r4, r5
     1e6:	5c 60       	ori	r21, 0x0C	; 12
     1e8:	10 55       	subi	r17, 0x50	; 80
     1ea:	3c 6c       	ori	r19, 0xCC	; 204
     1ec:	10 00       	.word	0x0010	; ????
     1ee:	40 16       	cp	r4, r16
     1f0:	99 51       	subi	r25, 0x19	; 25
     1f2:	4b 4d       	sbci	r20, 0xDB	; 219
     1f4:	54 44       	sbci	r21, 0x44	; 68
     1f6:	c8 88       	ldd	r12, Y+16	; 0x10
     1f8:	54 84       	ldd	r5, Z+12	; 0x0c
     1fa:	08 85       	ldd	r16, Y+8	; 0x08
     1fc:	44 4c       	sbci	r20, 0xC4	; 196
     1fe:	84 88       	ldd	r8, Z+20	; 0x14
     200:	45 a4       	ldd	r4, Z+45	; 0x2d
     202:	05 00       	.word	0x0005	; ????
     204:	41 14       	cp	r4, r1
     206:	99 51       	subi	r25, 0x19	; 25
     208:	53 5c       	subi	r21, 0xC3	; 195
     20a:	44 58       	subi	r20, 0x84	; 132
     20c:	44 54       	subi	r20, 0x44	; 68
     20e:	4c 50       	subi	r20, 0x0C	; 12
     210:	4d 54       	subi	r20, 0x4D	; 77
     212:	48 54       	subi	r20, 0x48	; 72
     214:	44 9c       	mul	r4, r4
     216:	5c 00       	.word	0x005c	; ????
     218:	42 13       	cpse	r20, r18
     21a:	99 51       	subi	r25, 0x19	; 25
     21c:	c3 49       	sbci	r28, 0x93	; 147
     21e:	58 44       	sbci	r21, 0x48	; 72
     220:	9c 58       	subi	r25, 0x8C	; 140
     222:	c4 49       	sbci	r28, 0x94	; 148
     224:	58 44       	sbci	r21, 0x48	; 72
     226:	9c 58       	subi	r25, 0x8C	; 140
     228:	c4 09       	sbc	r28, r4
     22a:	00 43       	sbci	r16, 0x30	; 48
     22c:	10 99       	sbic	0x02, 0	; 2
     22e:	51 4b       	sbci	r21, 0xB1	; 177
     230:	4d 54       	subi	r20, 0x4D	; 77
     232:	44 9c       	mul	r4, r4
     234:	60 76       	andi	r22, 0x60	; 96
     236:	11 51       	subi	r17, 0x11	; 17
     238:	31 25       	eor	r19, r1
     23a:	00 44       	sbci	r16, 0x40	; 64
     23c:	0d 99       	sbic	0x01, 5	; 1
     23e:	51 c3       	rjmp	.+1698   	; 0x8e2 <__DATA_REGION_LENGTH__+0xe2>
     240:	49 58       	subi	r20, 0x89	; 137
     242:	44 9c       	mul	r4, r4
     244:	9e 45       	sbci	r25, 0x5E	; 94
     246:	9c 00       	.word	0x009c	; ????
     248:	45 0e       	add	r4, r21
     24a:	99 51       	subi	r25, 0x19	; 25
     24c:	c3 c1       	rjmp	.+902    	; 0x5d4 <u8g2_font_calibration_gothic_nbp_tr+0x92>
     24e:	60 c2       	rjmp	.+1216   	; 0x710 <u8g2_font_calibration_gothic_nbp_tr+0x1ce>
     250:	83 88       	ldd	r8, Z+19	; 0x13
     252:	c0 84       	ldd	r12, Z+8	; 0x08
     254:	07 02       	muls	r16, r23
     256:	46 0d       	add	r20, r6
     258:	99 51       	subi	r25, 0x19	; 25
     25a:	c3 c1       	rjmp	.+902    	; 0x5e2 <u8g2_font_calibration_gothic_nbp_tr+0xa0>
     25c:	60 c2       	rjmp	.+1216   	; 0x71e <u8g2_font_calibration_gothic_nbp_tr+0x1dc>
     25e:	83 88       	ldd	r8, Z+19	; 0x13
     260:	c0 0c       	add	r12, r0
     262:	01 47       	sbci	r16, 0x71	; 113
     264:	0f 99       	sbic	0x01, 7	; 1
     266:	51 8b       	std	Z+17, r21	; 0x11
     268:	49 98       	cbi	0x09, 1	; 9
     26a:	60 1a       	sub	r6, r16
     26c:	3b b9       	out	0x0b, r19	; 11
     26e:	88 b0       	in	r8, 0x08	; 8
     270:	90 03       	fmuls	r17, r16
     272:	48 0b       	sbc	r20, r24
     274:	99 51       	subi	r25, 0x19	; 25
     276:	43 9c       	mul	r4, r3
     278:	76 07       	cpc	r23, r22
     27a:	74 da       	rcall	.-2840   	; 0xfffff764 <__eeprom_end+0xff7ef764>
     27c:	05 49       	sbci	r16, 0x95	; 149
     27e:	07 91       	elpm	r16, Z+
     280:	51 c2       	rjmp	.+1186   	; 0x724 <u8g2_font_calibration_gothic_nbp_tr+0x1e2>
     282:	81 00       	.word	0x0081	; ????
     284:	4a 0e       	add	r4, r26
     286:	99 51       	subi	r25, 0x19	; 25
     288:	db 60       	ori	r29, 0x0B	; 11
     28a:	86 72       	andi	r24, 0x26	; 38
     28c:	72 11       	cpse	r23, r2
     28e:	51 31       	cpi	r21, 0x11	; 17
     290:	25 00       	.word	0x0025	; ????
     292:	4b 14       	cp	r4, r11
     294:	99 51       	subi	r25, 0x19	; 25
     296:	43 9c       	mul	r4, r3
     298:	58 44       	sbci	r21, 0x48	; 72
     29a:	54 48       	sbci	r21, 0x84	; 132
     29c:	50 4c       	sbci	r21, 0xC0	; 192
     29e:	51 9a       	sbi	0x0a, 1	; 10
     2a0:	a8 90       	.word	0x90a8	; ????
     2a2:	b0 88       	ldd	r11, Z+16	; 0x10
     2a4:	b8 00       	.word	0x00b8	; ????
     2a6:	4c 09       	sbc	r20, r12
     2a8:	99 51       	subi	r25, 0x19	; 25
     2aa:	43 60       	ori	r20, 0x03	; 3
     2ac:	7e 78       	andi	r23, 0x8E	; 142
     2ae:	20 4d       	sbci	r18, 0xD0	; 208
     2b0:	12 99       	sbic	0x02, 2	; 2
     2b2:	51 43       	sbci	r21, 0x31	; 49
     2b4:	dc d4       	rcall	.+2488   	; 0xc6e <u8g2_font_get_word+0x12>
     2b6:	44 4c       	sbci	r20, 0xC4	; 196
     2b8:	84 48       	sbci	r24, 0x84	; 132
     2ba:	44 88       	ldd	r4, Z+20	; 0x14
     2bc:	4c 8c       	ldd	r4, Y+28	; 0x1c
     2be:	9c 76       	andi	r25, 0x6C	; 108
     2c0:	01 4e       	sbci	r16, 0xE1	; 225
     2c2:	14 99       	sbic	0x02, 4	; 2
     2c4:	51 43       	sbci	r21, 0x31	; 49
     2c6:	dc 98       	cbi	0x1b, 4	; 27
     2c8:	44 94       	.word	0x9444	; ????
     2ca:	48 90       	.word	0x9048	; ????
     2cc:	4c 8c       	ldd	r4, Y+28	; 0x1c
     2ce:	50 88       	ldd	r5, Z+16	; 0x10
     2d0:	54 84       	ldd	r5, Z+12	; 0x0c
     2d2:	d8 5c       	subi	r29, 0xC8	; 200
     2d4:	00 4f       	sbci	r16, 0xF0	; 240
     2d6:	0f 99       	sbic	0x01, 7	; 1
     2d8:	51 4b       	sbci	r21, 0xB1	; 177
     2da:	4d 54       	subi	r20, 0x4D	; 77
     2dc:	44 9c       	mul	r4, r4
     2de:	ee 22       	and	r14, r30
     2e0:	a2 62       	ori	r26, 0x22	; 34
     2e2:	4a 00       	.word	0x004a	; ????
     2e4:	50 0e       	add	r5, r16
     2e6:	99 51       	subi	r25, 0x19	; 25
     2e8:	c3 41       	sbci	r28, 0x13	; 19
     2ea:	44 9c       	mul	r4, r4
     2ec:	ba 03       	fmulsu	r19, r18
     2ee:	89 c0       	rjmp	.+274    	; 0x402 <__EEPROM_REGION_LENGTH__+0x2>
     2f0:	0c 01       	movw	r0, r24
     2f2:	51 19       	sub	r21, r1
     2f4:	aa 6f       	ori	r26, 0xFA	; 250
     2f6:	4b 51       	subi	r20, 0x1B	; 27
     2f8:	54 48       	sbci	r21, 0x84	; 132
     2fa:	5c 44       	sbci	r21, 0x4C	; 76
     2fc:	5c 44       	sbci	r21, 0x4C	; 76
     2fe:	4c 8a       	std	Y+20, r4	; 0x14
     300:	a0 90 88 a8 	lds	r10, 0xA888	; 0x80a888 <__bss_end+0xa159>
     304:	88 90       	.word	0x9088	; ????
     306:	a8 a0       	ldd	r10, Y+32	; 0x20
     308:	8a d0       	rcall	.+276    	; 0x41e <__EEPROM_REGION_LENGTH__+0x1e>
     30a:	00 52       	subi	r16, 0x20	; 32
     30c:	10 99       	sbic	0x02, 0	; 2
     30e:	51 c3       	rjmp	.+1698   	; 0x9b2 <__stack+0xb3>
     310:	41 44       	sbci	r20, 0x41	; 65
     312:	9c ba       	out	0x1c, r9	; 28
     314:	03 89       	ldd	r16, Z+19	; 0x13
     316:	b0 88       	ldd	r11, Z+16	; 0x10
     318:	38 75       	andi	r19, 0x58	; 88
     31a:	01 53       	subi	r16, 0x31	; 49
     31c:	0f 99       	sbic	0x01, 7	; 1
     31e:	51 c7       	rjmp	.+3746   	; 0x11c2 <u8g2_font_get_glyph_data+0x78>
     320:	45 9c       	mul	r4, r5
     322:	60 e4       	ldi	r22, 0x40	; 64
     324:	65 a0       	ldd	r6, Z+37	; 0x25
     326:	5c c4       	rjmp	.+2232   	; 0xbe0 <u8g2_SendBuffer+0x6>
     328:	05 00       	.word	0x0005	; ????
     32a:	54 0a       	sbc	r5, r20
     32c:	99 51       	subi	r25, 0x19	; 25
     32e:	c3 81       	ldd	r28, Z+3	; 0x03
     330:	50 60       	ori	r21, 0x00	; 0
     332:	7e 04       	cpc	r7, r14
     334:	55 0c       	add	r5, r5
     336:	99 51       	subi	r25, 0x19	; 25
     338:	43 9c       	mul	r4, r3
     33a:	be 8b       	std	Y+22, r27	; 0x16
     33c:	88 8a       	std	Y+16, r8	; 0x10
     33e:	29 01       	movw	r4, r18
     340:	56 15       	cp	r21, r6
     342:	99 51       	subi	r25, 0x19	; 25
     344:	43 9c       	mul	r4, r3
     346:	5c 44       	sbci	r21, 0x4C	; 76
     348:	54 48       	sbci	r21, 0x84	; 132
     34a:	54 4c       	sbci	r21, 0xC4	; 196
     34c:	a2 98       	cbi	0x14, 2	; 20
     34e:	a8 88       	ldd	r10, Y+16	; 0x10
     350:	b0 88       	ldd	r11, Z+16	; 0x10
     352:	b8 20       	and	r11, r8
     354:	00 57       	subi	r16, 0x70	; 112
     356:	17 99       	sbic	0x02, 7	; 2
     358:	51 43       	sbci	r21, 0x31	; 49
     35a:	4c 8c       	ldd	r4, Y+28	; 0x1c
     35c:	4c 8c       	ldd	r4, Y+28	; 0x1c
     35e:	4c 8c       	ldd	r4, Y+28	; 0x1c
     360:	4c 8c       	ldd	r4, Y+28	; 0x1c
     362:	4c 8a       	std	Y+20, r4	; 0x14
     364:	9c 44       	sbci	r25, 0x4C	; 76
     366:	64 12       	cpse	r6, r20
     368:	91 4d       	sbci	r25, 0xD1	; 209
     36a:	12 00       	.word	0x0012	; ????
     36c:	58 13       	cpse	r21, r24
     36e:	99 51       	subi	r25, 0x19	; 25
     370:	43 5c       	subi	r20, 0xC3	; 195
     372:	44 54       	subi	r20, 0x44	; 68
     374:	4c aa       	std	Y+52, r4	; 0x34
     376:	88 b8       	out	0x08, r8	; 8
     378:	14 51       	subi	r17, 0x14	; 20
     37a:	31 a9       	ldd	r19, Z+49	; 0x31
     37c:	22 e2       	ldi	r18, 0x22	; 34
     37e:	02 59       	subi	r16, 0x92	; 146
     380:	0f 99       	sbic	0x01, 7	; 1
     382:	51 43       	sbci	r21, 0x31	; 49
     384:	5c 44       	sbci	r21, 0x4C	; 76
     386:	54 4c       	sbci	r21, 0xC4	; 196
     388:	aa 88       	ldd	r10, Y+18	; 0x12
     38a:	b8 c0       	rjmp	.+368    	; 0x4fc <__EEPROM_REGION_LENGTH__+0xfc>
     38c:	1c 01       	movw	r2, r24
     38e:	5a 0a       	sbc	r5, r26
     390:	99 51       	subi	r25, 0x19	; 25
     392:	c3 81       	ldd	r28, Z+3	; 0x03
     394:	5c 7e       	andi	r21, 0xEC	; 236
     396:	77 20       	and	r7, r7
     398:	5b 08       	sbc	r5, r11
     39a:	92 71       	andi	r25, 0x12	; 18
     39c:	c2 44       	sbci	r28, 0x42	; 66
     39e:	be 10       	cpse	r11, r14
     3a0:	5c 08       	sbc	r5, r12
     3a2:	99 51       	subi	r25, 0x19	; 25
     3a4:	43 64       	ori	r20, 0x43	; 67
     3a6:	fe 00       	.word	0x00fe	; ????
     3a8:	5d 08       	sbc	r5, r13
     3aa:	92 71       	andi	r25, 0x12	; 18
     3ac:	82 44       	sbci	r24, 0x42	; 66
     3ae:	be 18       	sub	r11, r14
     3b0:	5e 09       	sbc	r21, r14
     3b2:	35 dd       	rcall	.-1430   	; 0xfffffe1e <__eeprom_end+0xff7efe1e>
     3b4:	4a 4c       	sbci	r20, 0xCA	; 202
     3b6:	44 9a       	sbi	0x08, 4	; 8
     3b8:	00 5f       	subi	r16, 0xF0	; 240
     3ba:	07 19       	sub	r16, r7
     3bc:	51 c3       	rjmp	.+1698   	; 0xa60 <__stack+0x161>
     3be:	81 00       	.word	0x0081	; ????
     3c0:	60 07       	cpc	r22, r16
     3c2:	34 bd       	out	0x24, r19	; 36
     3c4:	82 50       	subi	r24, 0x02	; 2
     3c6:	02 61       	ori	r16, 0x12	; 18
     3c8:	0d 79       	andi	r16, 0x9D	; 157
     3ca:	51 c7       	rjmp	.+3746   	; 0x126e <u8g2_DrawGlyph+0x6>
     3cc:	65 c4       	rjmp	.+2250   	; 0xc98 <u8g2_read_font_info+0xc>
     3ce:	81 9c       	mul	r8, r1
     3d0:	ba 88       	ldd	r11, Y+18	; 0x12
     3d2:	0b 00       	.word	0x000b	; ????
     3d4:	62 0e       	add	r6, r18
     3d6:	99 51       	subi	r25, 0x19	; 25
     3d8:	43 60       	ori	r20, 0x03	; 3
     3da:	e0 41       	sbci	r30, 0x10	; 16
     3dc:	44 9c       	mul	r4, r4
     3de:	ee 0e       	add	r14, r30
     3e0:	24 00       	.word	0x0024	; ????
     3e2:	63 0c       	add	r6, r3
     3e4:	79 51       	subi	r23, 0x19	; 25
     3e6:	c7 45       	sbci	r28, 0x57	; 87
     3e8:	9c 60       	ori	r25, 0x0C	; 12
     3ea:	76 11       	cpse	r23, r6
     3ec:	17 00       	.word	0x0017	; ????
     3ee:	64 0c       	add	r6, r4
     3f0:	99 51       	subi	r25, 0x19	; 25
     3f2:	63 8a       	std	Z+19, r6	; 0x13
     3f4:	03 39       	cpi	r16, 0x93	; 147
     3f6:	dd 45       	sbci	r29, 0x5D	; 93
     3f8:	1c 04       	cpc	r1, r12
     3fa:	65 0e       	add	r6, r21
     3fc:	79 51       	subi	r23, 0x19	; 25
     3fe:	c7 45       	sbci	r28, 0x57	; 87
     400:	9c dc       	rcall	.-1736   	; 0xfffffd3a <__eeprom_end+0xff7efd3a>
     402:	81 44       	sbci	r24, 0x41	; 65
     404:	60 e4       	ldi	r22, 0x40	; 64
     406:	05 00       	.word	0x0005	; ????
     408:	66 0c       	add	r6, r6
     40a:	99 51       	subi	r25, 0x19	; 25
     40c:	cb 45       	sbci	r28, 0x5B	; 91
     40e:	dc 41       	sbci	r29, 0x1C	; 28
     410:	48 60       	ori	r20, 0x08	; 8
     412:	de 01       	movw	r26, r28
     414:	67 0e       	add	r6, r23
     416:	99 4d       	sbci	r25, 0xD9	; 217
     418:	c7 81       	ldd	r28, Z+7	; 0x07
     41a:	9c ee       	ldi	r25, 0xEC	; 236
     41c:	22 0e       	add	r2, r18
     41e:	02 0f       	add	r16, r18
     420:	24 00       	.word	0x0024	; ????
     422:	68 0c       	add	r6, r8
     424:	99 51       	subi	r25, 0x19	; 25
     426:	43 60       	ori	r20, 0x03	; 3
     428:	e0 41       	sbci	r30, 0x10	; 16
     42a:	44 9c       	mul	r4, r4
     42c:	de 05       	cpc	r29, r14
     42e:	69 07       	cpc	r22, r25
     430:	91 51       	subi	r25, 0x11	; 17
     432:	42 c4       	rjmp	.+2180   	; 0xcb8 <u8g2_read_font_info+0x2c>
     434:	01 6a       	ori	r16, 0xA1	; 161
     436:	0c b9       	out	0x0c, r16	; 12
     438:	4d 63       	ori	r20, 0x3D	; 61
     43a:	3c 48       	sbci	r19, 0x8C	; 140
     43c:	60 be       	out	0x30, r6	; 48
     43e:	8b 38       	cpi	r24, 0x8B	; 139
     440:	01 6b       	ori	r16, 0xB1	; 177
     442:	0f 99       	sbic	0x01, 7	; 1
     444:	51 43       	sbci	r21, 0x31	; 49
     446:	60 3a       	cpi	r22, 0xA0	; 160
     448:	b1 88       	ldd	r11, Z+17	; 0x11
     44a:	93 b0       	in	r9, 0x03	; 3
     44c:	88 38       	cpi	r24, 0x88	; 136
     44e:	75 01       	movw	r14, r10
     450:	6c 08       	sbc	r6, r12
     452:	92 71       	andi	r25, 0x12	; 18
     454:	42 44       	sbci	r20, 0x42	; 66
     456:	7e 12       	cpse	r7, r30
     458:	6d 13       	cpse	r22, r29
     45a:	79 51       	subi	r23, 0x19	; 25
     45c:	03 c5       	rjmp	.+2566   	; 0xe64 <u8g2_add_vector_y+0x24>
     45e:	44 4c       	sbci	r20, 0xC4	; 196
     460:	8c 4c       	sbci	r24, 0xCC	; 204
     462:	8c 4c       	sbci	r24, 0xCC	; 204
     464:	8c 4c       	sbci	r24, 0xCC	; 204
     466:	8c 4c       	sbci	r24, 0xCC	; 204
     468:	8c 4c       	sbci	r24, 0xCC	; 204
     46a:	02 6e       	ori	r16, 0xE2	; 226
     46c:	0a 79       	andi	r16, 0x9A	; 154
     46e:	51 c3       	rjmp	.+1698   	; 0xb12 <__do_clear_bss>
     470:	41 44       	sbci	r20, 0x41	; 65
     472:	9c de       	rcall	.-712    	; 0x1ac <__trampolines_end+0x144>
     474:	05 6f       	ori	r16, 0xF5	; 245
     476:	0b 79       	andi	r16, 0x9B	; 155
     478:	51 c7       	rjmp	.+3746   	; 0x131c <u8g2_draw_string+0x10>
     47a:	45 9c       	mul	r4, r5
     47c:	ee 22       	and	r14, r30
     47e:	2e 00       	.word	0x002e	; ????
     480:	70 0e       	add	r7, r16
     482:	99 4d       	sbci	r25, 0xD9	; 217
     484:	c3 41       	sbci	r28, 0x13	; 19
     486:	44 9c       	mul	r4, r4
     488:	ee 0e       	add	r14, r30
     48a:	24 02       	muls	r18, r20
     48c:	03 01       	movw	r0, r6
     48e:	71 0c       	add	r7, r1
     490:	99 4d       	sbci	r25, 0xD9	; 217
     492:	c7 81       	ldd	r28, Z+7	; 0x07
     494:	9c ee       	ldi	r25, 0xEC	; 236
     496:	22 0e       	add	r2, r18
     498:	02 13       	cpse	r16, r18
     49a:	72 0b       	sbc	r23, r18
     49c:	79 51       	subi	r23, 0x19	; 25
     49e:	c3 41       	sbci	r28, 0x13	; 19
     4a0:	44 9c       	mul	r4, r4
     4a2:	c2 0c       	add	r12, r2
     4a4:	01 73       	andi	r16, 0x31	; 49
     4a6:	0d 79       	andi	r16, 0x9D	; 157
     4a8:	51 c7       	rjmp	.+3746   	; 0x134c <u8g2_draw_string+0x40>
     4aa:	45 9c       	mul	r4, r5
     4ac:	e4 a5       	ldd	r30, Z+44	; 0x2c
     4ae:	5c c4       	rjmp	.+2232   	; 0xd68 <u8g2_read_font_info+0xdc>
     4b0:	05 00       	.word	0x0005	; ????
     4b2:	74 0b       	sbc	r23, r20
     4b4:	99 51       	subi	r25, 0x19	; 25
     4b6:	4b 60       	ori	r20, 0x0B	; 11
     4b8:	98 55       	subi	r25, 0x58	; 88
     4ba:	60 2e       	mov	r6, r16
     4bc:	0d 75       	andi	r16, 0x5D	; 93
     4be:	0a 79       	andi	r16, 0x9A	; 154
     4c0:	51 43       	sbci	r21, 0x31	; 49
     4c2:	9c de       	rcall	.-712    	; 0x1fc <__trampolines_end+0x194>
     4c4:	45 1c       	adc	r4, r5
     4c6:	04 76       	andi	r16, 0x64	; 100
     4c8:	0f 79       	andi	r16, 0x9F	; 159
     4ca:	51 43       	sbci	r21, 0x31	; 49
     4cc:	9c ba       	out	0x1c, r9	; 28
     4ce:	88 a8       	ldd	r8, Y+48	; 0x30
     4d0:	98 54       	subi	r25, 0x48	; 72
     4d2:	11 71       	andi	r17, 0x11	; 17
     4d4:	41 00       	.word	0x0041	; ????
     4d6:	77 13       	cpse	r23, r23
     4d8:	79 51       	subi	r23, 0x19	; 25
     4da:	43 4c       	sbci	r20, 0xC3	; 195
     4dc:	8c 4c       	sbci	r24, 0xCC	; 204
     4de:	8c 4c       	sbci	r24, 0xCC	; 204
     4e0:	8a 9c       	mul	r8, r10
     4e2:	44 64       	ori	r20, 0x44	; 68
     4e4:	93 28       	or	r9, r3
     4e6:	26 04       	cpc	r2, r6
     4e8:	00 78       	andi	r16, 0x80	; 128
     4ea:	10 79       	andi	r17, 0x90	; 144
     4ec:	51 43       	sbci	r21, 0x31	; 49
     4ee:	5c 44       	sbci	r21, 0x4C	; 76
     4f0:	54 4c       	sbci	r21, 0xC4	; 196
     4f2:	aa a9       	ldd	r26, Y+50	; 0x32
     4f4:	98 54       	subi	r25, 0x48	; 72
     4f6:	11 71       	andi	r17, 0x11	; 17
     4f8:	01 79       	andi	r16, 0x91	; 145
     4fa:	0d 99       	sbic	0x01, 5	; 1
     4fc:	4d 43       	sbci	r20, 0x3D	; 61
     4fe:	9c de       	rcall	.-712    	; 0x238 <__trampolines_end+0x1d0>
     500:	45 1c       	adc	r4, r5
     502:	04 1e       	adc	r0, r20
     504:	48 00       	.word	0x0048	; ????
     506:	7a 0b       	sbc	r23, r26
     508:	79 51       	subi	r23, 0x19	; 25
     50a:	c3 81       	ldd	r28, Z+3	; 0x03
     50c:	58 5c       	subi	r21, 0xC8	; 200
     50e:	ce 0e       	add	r12, r30
     510:	04 7b       	andi	r16, 0xB4	; 180
     512:	0c 93       	st	X, r16
     514:	91 4a       	sbci	r25, 0xA1	; 161
     516:	44 48       	sbci	r20, 0x84	; 132
     518:	8a 98       	cbi	0x11, 2	; 17
     51a:	90 34       	cpi	r25, 0x40	; 64
     51c:	01 7c       	andi	r16, 0xC1	; 193
     51e:	06 71       	andi	r16, 0x16	; 22
     520:	53 c2       	rjmp	.+1190   	; 0x9c8 <__stack+0xc9>
     522:	01 7d       	andi	r16, 0xD1	; 209
     524:	0d 93       	st	X+, r16
     526:	91 42       	sbci	r25, 0x21	; 33
     528:	4c 48       	sbci	r20, 0x8C	; 140
     52a:	9a 88       	ldd	r9, Y+18	; 0x12
     52c:	90 14       	cp	r9, r0
     52e:	21 00       	.word	0x0021	; ????
     530:	7e 0a       	sbc	r7, r30
     532:	37 17       	cp	r19, r23
     534:	87 50       	subi	r24, 0x07	; 7
     536:	48 22       	and	r4, r24
     538:	09 00       	.word	0x0009	; ????
     53a:	00 00       	nop
     53c:	00 04       	cpc	r0, r0
     53e:	ff ff       	.word	0xffff	; ????
	...

00000542 <u8g2_font_calibration_gothic_nbp_tr>:
     542:	5f 00 03 02 04 05 01 05 05 0e 15 ff fb 0e fb 0f     _...............
     552:	ff 01 ba 03 b6 05 91 20 05 00 42 0a 21 07 e1 42     ....... ..B.!..B
     562:	89 87 2c 22 07 33 6e 8a c4 12 23 14 9c ca ce 72     ..,".3n...#....r
     572:	98 0d 07 2d 8c c3 38 cc 86 83 16 c6 61 08 24 14     ...-..8.....a.$.
     582:	d7 46 bc 74 4b 9a 22 29 4c d2 35 09 23 a9 d2 b6     .F.tK.")L.5.#...
     592:	66 00 25 18 ca c2 1d ad 54 8b 8a 52 0e e5 50 8e     f.%.....T..R..P.
     5a2:	e4 50 0e 45 62 54 8b 6a 99 02 26 1b e9 42 ad 21     .P.EbT.j..&..B.!
     5b2:	2c c5 49 8e e4 50 0e 4d 4a 9a c4 49 9c c4 49 1c     ,.I..P.MJ..I..I.
     5c2:	85 da 90 24 00 27 07 32 ee 09 45 01 28 0b 04 bf     ...$.'.2..E.(...
     5d2:	2a 25 ca fa 1f 43 01 29 0b 04 bf 0a b1 d6 ff 94     *%...C.)........
     5e2:	48 00 2a 0b 55 6a ab 30 52 a4 2c 49 00 2b 0b 57     H.*.Uj.0R.,I.+.W
     5f2:	56 bc 38 1b 86 2c ce 00 2c 07 32 be 09 45 01 2d     V.8..,..,.2..E.-
     602:	06 16 de 8b 03 2e 06 22 c2 89 21 2f 0d f5 42 cb     ......."..!/..B.
     612:	b6 b0 16 d6 c2 5a 58 04 30 0f e8 c2 ac 21 0b 93     .....ZX.0....!..
     622:	d8 7f 4e c2 6c 88 00 31 0b e7 42 bc 70 ee 7f 1b     ..N.l..1..B.p...
     632:	86 00 32 0f e8 c2 ac 21 0b 93 38 2f f7 7b 3e 0c     ..2....!..8/.{>.
     642:	02 33 15 e8 c2 ac 21 0b 93 38 2f 87 3b 92 23 79     .3....!..8/.;.#y
     652:	2e 27 61 36 44 00 34 11 e8 c2 dc 58 4d c2 28 2b     .'a6D.4....XM.(+
     662:	85 d1 30 a8 79 9f 00 35 0e e7 42 8c 83 dc 79 d0     ..0.y..5..B...y.
     672:	cb ad c9 20 01 36 14 e8 c2 ac 21 0b 93 58 6f 19     ... .6....!..Xo.
     682:	22 31 89 9d 93 30 1b 22 00 37 0f e7 42 8c 43 9c     "1...0.".7..B.C.
     692:	c6 d5 b8 1a 57 e3 22 00 38 15 e8 c2 ac 21 0b 93     ....W.".8....!..
     6a2:	d8 9c 84 d9 90 85 49 ec 9c 84 d9 10 01 39 14 e8     ......I......9..
     6b2:	c2 ac 21 0b 93 d8 39 09 a5 21 c9 eb 72 12 66 43     ..!...9..!..r.fC
     6c2:	04 3a 09 82 ca 89 21 47 86 00 3b 09 92 c6 89 21     .:....!G..;....!
     6d2:	47 2c 00 3c 08 95 4a cb ac 6b 07 3d 07 36 d6 8b     G,.<..J..k.=.6..
     6e2:	f3 30 3e 09 95 4a 8b b4 5b 47 00 3f 0e e7 42 ac     .0>..J..[G.?..B.
     6f2:	ad 92 aa 71 da 5c 67 ce 00 40 18 a9 42 ad 41 4b     ...q.\g..@..B.AK
     702:	93 68 52 13 69 48 94 2c 51 b2 44 1a a4 1c 1a 86     .hR.iH.,Q.D.....
     712:	00 41 17 e9 42 cd 1c c9 93 38 89 93 34 0b b3 70     .A..B....8..4..p
     722:	d0 d2 28 8d d2 24 b7 07 42 12 e8 c2 8c 53 9a c4     ..(..$..B....S..
     732:	ae c9 30 a5 49 ec 35 19 26 00 43 10 e8 c2 ac 21     ..0.I.5.&.C....!
     742:	0b 93 58 ef cf 49 98 0d 11 00 44 0d e8 c2 8c 53     ..X..I....D....S
     752:	9a c4 fe d7 64 98 00 45 0d e8 c2 8c f7 ee c3 94     ....d..E........
     762:	f7 3e 0c 02 46 0b e8 c2 8c f7 ee c3 94 f7 1d 47     .>..F..........G
     772:	12 e8 c2 ac 21 0b 93 58 6f 1b 64 cf 49 98 0d 11     ....!..Xo.d.I...
     782:	00 48 0b e8 c2 8c d8 e7 e1 10 fb 39 49 0b e5 42     .H.........9I..B
     792:	8b 41 0a fb 9f 06 01 4a 0c e7 42 ec fe 59 55 93     .A.....J..B..YU.
     7a2:	2c 9b 00 4b 17 e8 c2 8c 34 09 a3 ac 14 26 a9 12     ,..K....4....&..
     7b2:	66 1d a3 30 4a 93 34 89 e5 00 4c 0a e8 c2 8c bc     f..0J.4...L.....
     7c2:	ff fb 30 08 4d 21 eb 42 ae 34 4c c3 34 4c b3 24     ..0.M!.B.4L.4L.$
     7d2:	4b a2 24 4b a2 24 4b a2 4a d4 12 25 59 92 89 a1     K.$K.$K.J..%Y...
     7e2:	18 8a a1 0e 05 4e 14 e7 42 8c 54 1d 47 25 53 32     .....N..B.T.G%S2
     7f2:	29 92 22 2d d1 12 f1 aa 06 4f 0f e8 c2 ac 21 0b     )."-.....O....!.
     802:	93 d8 7f 4e c2 6c 88 00 50 0e e8 c2 8c 53 9a c4     ...N.l..P....S..
     812:	ae c9 30 e5 7d 07 51 12 28 b3 ac 21 0b 93 d8 7f     ..0.}.Q.(..!....
     822:	4e c2 6c 88 eb 39 b2 00 52 14 e8 c2 8c 53 9a c4     N.l..9..R....S..
     832:	ae c9 30 65 c5 28 8c d2 24 4d 62 39 53 17 e8 c2     ..0e.(..$Mb9S...
     842:	ac 21 0b 93 58 cf 91 1c 19 72 24 47 f2 5c 4e c2     .!..X....r$G.\N.
     852:	6c 88 00 54 0a e7 42 8c 43 16 f7 7f 03 55 0c e8     l..T..B.C....U..
     862:	c2 8c d8 ff 39 09 b3 21 02 56 17 e9 42 8d dc 9e     ....9..!.V..B...
     872:	a4 51 1a a5 59 31 0b b3 34 89 93 38 c9 73 24 04     .Q..Y1..4..8.s$.
     882:	57 20 ed 42 8f ac a6 d5 b4 96 2c c9 a2 2c c9 a2     W .B......,..,..
     892:	2c c9 3a 66 c5 ac 9a 34 27 cd 49 7b 96 23 59 08     ,.:f...4'.I{.#Y.
     8a2:	58 16 e7 42 8c 54 4d b2 28 ab 84 49 1a a7 49 98     X..B.TM.(..I..I.
     8b2:	64 a5 2c 49 d5 00 59 10 e7 42 8c 54 4d b2 28 ab     d.,I..Y..B.TM.(.
     8c2:	84 49 1a f7 1b 00 5a 12 e7 42 8c 43 9c c6 69 9c     .I....Z..B.C..i.
     8d2:	c6 69 9c c6 69 3c 0c 01 5b 09 03 3f 8a 21 ea ff     .i..i<..[..?.!..
     8e2:	69 5c 0d f5 42 8b b0 1a 56 c3 6a 58 0d 0b 5d 09     i\..B...V.jX..].
     8f2:	03 3f 8a a9 ff a7 21 5e 08 35 6e ab 2c a9 05 5f     .?....!^.5n.,.._
     902:	07 1a c2 8d 87 00 60 07 33 6e 8a ac 00 61 16 b9     ......`.3n...a..
     912:	42 ad 21 2c c5 39 92 0d 49 14 2a 71 12 27 71 14     B.!,.9..I.*q.'q.
     922:	6a 43 14 62 11 08 c3 8c bc a7 29 c9 12 55 f6 79     jC.b......)..U.y
     932:	4c 92 21 02 63 0f b8 c2 ac 21 0b 93 58 ef 39 09     L.!.c....!..X.9.
     942:	b3 21 02 64 10 08 c3 fc 9e a6 24 4b d4 d9 e7 24     .!.d......$K...$
     952:	94 86 24 65 11 b8 c2 ac 21 0b 93 58 1e 0e 79 73     ..$e....!..X..ys
     962:	12 66 43 04 66 0e 08 c3 cc 21 8b f3 ea 30 64 79     .fC.f....!...0dy
     972:	ff 0a 67 14 08 af ac 21 29 ce 7e 4e 42 69 48 f2     ..g....!).~NBiH.
     982:	5c 4e c2 6c 88 00 68 0d 08 c3 8c bc 97 21 12 93     \N.l..h......!..
     992:	d8 3f 07 69 08 01 43 89 70 38 08 6a 0f 58 2d fc     .?.i..C.p8.j.X-.
     9a2:	9c c7 bc ff 5d 4e c2 6c 88 00 6b 15 07 43 8c b8     ....]N.l..k..C..
     9b2:	c7 24 8b 6a 49 a8 64 a5 2c 0a 93 30 49 d5 00 6c     .$.jI.d.,..0I..l
     9c2:	09 03 43 8a a8 ff 6f 02 6d 18 bb 42 8e 44 93 a4     ..C...o.m..B.D..
     9d2:	24 4a c2 50 0c c5 50 0c c5 50 0c c5 50 0c c5 02     $J.P..P..P..P...
     9e2:	6e 0c b8 c2 8c 64 88 c4 24 f6 cf 01 6f 0f b8 c2     n....d..$...o...
     9f2:	ac 21 0b 93 d8 cf 49 98 0d 11 00 70 11 08 af 8c     .!....I....p....
     a02:	64 88 c4 24 f6 f3 98 24 43 94 77 07 71 0f 08 af     d..$...$C.w.q...
     a12:	ac 21 29 ce 7e 4e 42 69 48 f2 1e 72 0c b8 c2 8c     .!).~NBiH..r....
     a22:	64 88 c4 24 d6 fb 1d 73 15 b8 c2 ac 21 0b 93 58     d..$...s....!..X
     a32:	47 72 64 c8 91 1c 91 93 30 1b 22 00 74 0d 07 43     Grd.....0.".t..C
     a42:	ac b8 e3 30 44 71 7f 1f 02 75 16 b9 42 8d 38 89     ...0Dq...u..B.8.
     a52:	93 38 89 93 38 89 93 38 89 93 38 0a b5 21 0a 76     .8..8..8..8..!.v
     a62:	13 b9 42 8d dc 9e a4 51 9a 15 b3 34 89 93 3c 47     ..B....Q...4..<G
     a72:	42 00 77 1a bd 42 8f ac a6 d5 b4 96 2c c9 a2 2c     B.w..B......,..,
     a82:	c9 3a 66 d5 a4 39 69 cf 72 24 0b 01 78 13 b7 42     .:f..9i.r$..x..B
     a92:	8c 34 c9 a2 ac 12 26 69 25 4c b2 52 96 a4 01 79     .4....&i%L.R...y
     aa2:	12 08 af 8c d8 3f 27 a1 34 24 79 2e 27 61 36 44     .....?'.4$y.'a6D
     ab2:	00 7a 0c b7 42 8c 43 5c ed 73 3c 0c 01 7b 0d 06     .z..B.C\.s<..{..
     ac2:	bf 4b 2d 4c 1b cb d5 ce b1 00 7c 06 f1 42 89 1f     .K-L......|..B..
     ad2:	7d 0d 06 bf 0b b9 da 5c ac 76 cc 44 00 7e 09 35     }......\.v.D.~.5
     ae2:	5a 9b 48 49 a4 04 00 00 00 04 ff ff 00 00           Z.HI..........

00000af0 <__ctors_end>:
     af0:	11 24       	eor	r1, r1
     af2:	1f be       	out	0x3f, r1	; 63
     af4:	cf ef       	ldi	r28, 0xFF	; 255
     af6:	d8 e0       	ldi	r29, 0x08	; 8
     af8:	de bf       	out	0x3e, r29	; 62
     afa:	cd bf       	out	0x3d, r28	; 61

00000afc <__do_copy_data>:
     afc:	12 e0       	ldi	r17, 0x02	; 2
     afe:	a0 e0       	ldi	r26, 0x00	; 0
     b00:	b1 e0       	ldi	r27, 0x01	; 1
     b02:	e2 e0       	ldi	r30, 0x02	; 2
     b04:	fe e2       	ldi	r31, 0x2E	; 46
     b06:	02 c0       	rjmp	.+4      	; 0xb0c <__do_copy_data+0x10>
     b08:	05 90       	lpm	r0, Z+
     b0a:	0d 92       	st	X+, r0
     b0c:	a2 35       	cpi	r26, 0x52	; 82
     b0e:	b1 07       	cpc	r27, r17
     b10:	d9 f7       	brne	.-10     	; 0xb08 <__do_copy_data+0xc>

00000b12 <__do_clear_bss>:
     b12:	27 e0       	ldi	r18, 0x07	; 7
     b14:	a2 e5       	ldi	r26, 0x52	; 82
     b16:	b2 e0       	ldi	r27, 0x02	; 2
     b18:	01 c0       	rjmp	.+2      	; 0xb1c <.do_clear_bss_start>

00000b1a <.do_clear_bss_loop>:
     b1a:	1d 92       	st	X+, r1

00000b1c <.do_clear_bss_start>:
     b1c:	af 32       	cpi	r26, 0x2F	; 47
     b1e:	b2 07       	cpc	r27, r18
     b20:	e1 f7       	brne	.-8      	; 0xb1a <.do_clear_bss_loop>
     b22:	0e 94 78 12 	call	0x24f0	; 0x24f0 <main>
     b26:	0c 94 ff 16 	jmp	0x2dfe	; 0x2dfe <_exit>

00000b2a <__bad_interrupt>:
     b2a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000b2e <u8g2_send_tile_row>:
}

/*============================================*/

static void u8g2_send_tile_row(u8g2_t *u8g2, uint8_t src_tile_row, uint8_t dest_tile_row)
{
     b2e:	0f 93       	push	r16
     b30:	1f 93       	push	r17
  uint8_t *ptr;
  uint16_t offset;
  uint8_t w;
  
  w = u8g2_GetU8x8(u8g2)->display_info->tile_width;
     b32:	dc 01       	movw	r26, r24
     b34:	ed 91       	ld	r30, X+
     b36:	fc 91       	ld	r31, X
     b38:	11 97       	sbiw	r26, 0x01	; 1
     b3a:	20 89       	ldd	r18, Z+16	; 0x10
  offset = src_tile_row;
  ptr = u8g2->tile_buf_ptr;
     b3c:	92 96       	adiw	r26, 0x22	; 34
     b3e:	0d 91       	ld	r16, X+
     b40:	1c 91       	ld	r17, X
     b42:	93 97       	sbiw	r26, 0x23	; 35
  offset *= w;
     b44:	62 9f       	mul	r22, r18
     b46:	b0 01       	movw	r22, r0
     b48:	11 24       	eor	r1, r1
  offset *= 8;
     b4a:	66 0f       	add	r22, r22
     b4c:	77 1f       	adc	r23, r23
     b4e:	66 0f       	add	r22, r22
     b50:	77 1f       	adc	r23, r23
     b52:	66 0f       	add	r22, r22
     b54:	77 1f       	adc	r23, r23
  ptr += offset;
     b56:	06 0f       	add	r16, r22
     b58:	17 1f       	adc	r17, r23
  u8x8_DrawTile(u8g2_GetU8x8(u8g2), 0, dest_tile_row, w, ptr);
     b5a:	60 e0       	ldi	r22, 0x00	; 0
     b5c:	0e 94 6b 0e 	call	0x1cd6	; 0x1cd6 <u8x8_DrawTile>
}
     b60:	1f 91       	pop	r17
     b62:	0f 91       	pop	r16
     b64:	08 95       	ret

00000b66 <u8g2_send_buffer>:
  For most displays, this will make the content visible to the user.
  Some displays (like the SSD1606) require a u8x8_RefreshDisplay()
*/
static void u8g2_send_buffer(u8g2_t *u8g2) U8X8_NOINLINE;
static void u8g2_send_buffer(u8g2_t *u8g2)
{
     b66:	ef 92       	push	r14
     b68:	ff 92       	push	r15
     b6a:	0f 93       	push	r16
     b6c:	1f 93       	push	r17
     b6e:	cf 93       	push	r28
     b70:	df 93       	push	r29
     b72:	8c 01       	movw	r16, r24
  uint8_t src_max;
  uint8_t dest_row;
  uint8_t dest_max;

  src_row = 0;
  src_max = u8g2->tile_buf_height;
     b74:	dc 01       	movw	r26, r24
     b76:	94 96       	adiw	r26, 0x24	; 36
     b78:	fc 90       	ld	r15, X
     b7a:	94 97       	sbiw	r26, 0x24	; 36
  dest_row = u8g2->tile_curr_row;
     b7c:	95 96       	adiw	r26, 0x25	; 37
     b7e:	dc 91       	ld	r29, X
     b80:	95 97       	sbiw	r26, 0x25	; 37
  dest_max = u8g2_GetU8x8(u8g2)->display_info->tile_height;
     b82:	ed 91       	ld	r30, X+
     b84:	fc 91       	ld	r31, X
     b86:	e1 88       	ldd	r14, Z+17	; 0x11
  uint8_t src_row;
  uint8_t src_max;
  uint8_t dest_row;
  uint8_t dest_max;

  src_row = 0;
     b88:	c0 e0       	ldi	r28, 0x00	; 0
  dest_row = u8g2->tile_curr_row;
  dest_max = u8g2_GetU8x8(u8g2)->display_info->tile_height;
  
  do
  {
    u8g2_send_tile_row(u8g2, src_row, dest_row);
     b8a:	4d 2f       	mov	r20, r29
     b8c:	6c 2f       	mov	r22, r28
     b8e:	c8 01       	movw	r24, r16
     b90:	0e 94 97 05 	call	0xb2e	; 0xb2e <u8g2_send_tile_row>
    src_row++;
     b94:	cf 5f       	subi	r28, 0xFF	; 255
    dest_row++;
     b96:	df 5f       	subi	r29, 0xFF	; 255
  } while( src_row < src_max && dest_row < dest_max );
     b98:	cf 15       	cp	r28, r15
     b9a:	10 f4       	brcc	.+4      	; 0xba0 <u8g2_send_buffer+0x3a>
     b9c:	de 15       	cp	r29, r14
     b9e:	a8 f3       	brcs	.-22     	; 0xb8a <u8g2_send_buffer+0x24>
}
     ba0:	df 91       	pop	r29
     ba2:	cf 91       	pop	r28
     ba4:	1f 91       	pop	r17
     ba6:	0f 91       	pop	r16
     ba8:	ff 90       	pop	r15
     baa:	ef 90       	pop	r14
     bac:	08 95       	ret

00000bae <u8g2_ClearBuffer>:
#include "u8g2.h"
#include <string.h>

/*============================================*/
void u8g2_ClearBuffer(u8g2_t *u8g2)
{
     bae:	fc 01       	movw	r30, r24
  size_t cnt;
  cnt = u8g2_GetU8x8(u8g2)->display_info->tile_width;
     bb0:	a0 81       	ld	r26, Z
     bb2:	b1 81       	ldd	r27, Z+1	; 0x01
     bb4:	50 96       	adiw	r26, 0x10	; 16
     bb6:	9c 91       	ld	r25, X
  cnt *= u8g2->tile_buf_height;
     bb8:	44 a1       	ldd	r20, Z+36	; 0x24
     bba:	94 9f       	mul	r25, r20
     bbc:	a0 01       	movw	r20, r0
     bbe:	11 24       	eor	r1, r1
  cnt *= 8;
     bc0:	44 0f       	add	r20, r20
     bc2:	55 1f       	adc	r21, r21
     bc4:	44 0f       	add	r20, r20
     bc6:	55 1f       	adc	r21, r21
     bc8:	44 0f       	add	r20, r20
     bca:	55 1f       	adc	r21, r21
  memset(u8g2->tile_buf_ptr, 0, cnt);
     bcc:	60 e0       	ldi	r22, 0x00	; 0
     bce:	70 e0       	ldi	r23, 0x00	; 0
     bd0:	82 a1       	ldd	r24, Z+34	; 0x22
     bd2:	93 a1       	ldd	r25, Z+35	; 0x23
     bd4:	0e 94 0e 14 	call	0x281c	; 0x281c <memset>
     bd8:	08 95       	ret

00000bda <u8g2_SendBuffer>:
  } while( src_row < src_max && dest_row < dest_max );
}

/* same as u8g2_send_buffer but also send the DISPLAY_REFRESH message (used by SSD1606) */
void u8g2_SendBuffer(u8g2_t *u8g2)
{
     bda:	cf 93       	push	r28
     bdc:	df 93       	push	r29
     bde:	ec 01       	movw	r28, r24
  u8g2_send_buffer(u8g2);
     be0:	0e 94 b3 05 	call	0xb66	; 0xb66 <u8g2_send_buffer>
  u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );  
     be4:	ce 01       	movw	r24, r28
     be6:	0e 94 af 0e 	call	0x1d5e	; 0x1d5e <u8x8_RefreshDisplay>
}
     bea:	df 91       	pop	r29
     bec:	cf 91       	pop	r28
     bee:	08 95       	ret

00000bf0 <u8g2_m_16_8_f>:
  #ifdef U8G2_USE_DYNAMIC_ALLOC
  *page_cnt = 8;
  return 0;
  #else
  static uint8_t buf[1024];
  *page_cnt = 8;
     bf0:	28 e0       	ldi	r18, 0x08	; 8
     bf2:	fc 01       	movw	r30, r24
     bf4:	20 83       	st	Z, r18
  return buf;
  #endif
}
     bf6:	82 e5       	ldi	r24, 0x52	; 82
     bf8:	92 e0       	ldi	r25, 0x02	; 2
     bfa:	08 95       	ret

00000bfc <u8g2_Setup_ssd1306_i2c_128x64_noname_f>:
  buf = u8g2_m_16_8_2(&tile_buf_height);
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
}
/* ssd1306 f */
void u8g2_Setup_ssd1306_i2c_128x64_noname_f(u8g2_t *u8g2, const u8g2_cb_t *rotation, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
     bfc:	cf 92       	push	r12
     bfe:	df 92       	push	r13
     c00:	ef 92       	push	r14
     c02:	ff 92       	push	r15
     c04:	0f 93       	push	r16
     c06:	1f 93       	push	r17
     c08:	cf 93       	push	r28
     c0a:	df 93       	push	r29
     c0c:	1f 92       	push	r1
     c0e:	cd b7       	in	r28, 0x3d	; 61
     c10:	de b7       	in	r29, 0x3e	; 62
     c12:	7c 01       	movw	r14, r24
     c14:	6b 01       	movw	r12, r22
  uint8_t tile_buf_height;
  uint8_t *buf;
  u8g2_SetupDisplay(u8g2, u8x8_d_ssd1306_128x64_noname, u8x8_cad_ssd13xx_fast_i2c, byte_cb, gpio_and_delay_cb);
     c16:	89 01       	movw	r16, r18
     c18:	9a 01       	movw	r18, r20
     c1a:	42 eb       	ldi	r20, 0xB2	; 178
     c1c:	5d e0       	ldi	r21, 0x0D	; 13
     c1e:	63 e4       	ldi	r22, 0x43	; 67
     c20:	7f e0       	ldi	r23, 0x0F	; 15
     c22:	0e 94 88 0f 	call	0x1f10	; 0x1f10 <u8x8_Setup>
  buf = u8g2_m_16_8_f(&tile_buf_height);
     c26:	ce 01       	movw	r24, r28
     c28:	01 96       	adiw	r24, 0x01	; 1
     c2a:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <u8g2_m_16_8_f>
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
     c2e:	86 01       	movw	r16, r12
     c30:	2b e6       	ldi	r18, 0x6B	; 107
     c32:	3b e0       	ldi	r19, 0x0B	; 11
     c34:	49 81       	ldd	r20, Y+1	; 0x01
     c36:	bc 01       	movw	r22, r24
     c38:	c7 01       	movw	r24, r14
     c3a:	0e 94 9f 0c 	call	0x193e	; 0x193e <u8g2_SetupBuffer>
}
     c3e:	0f 90       	pop	r0
     c40:	df 91       	pop	r29
     c42:	cf 91       	pop	r28
     c44:	1f 91       	pop	r17
     c46:	0f 91       	pop	r16
     c48:	ff 90       	pop	r15
     c4a:	ef 90       	pop	r14
     c4c:	df 90       	pop	r13
     c4e:	cf 90       	pop	r12
     c50:	08 95       	ret

00000c52 <u8g2_font_get_byte>:
  return tmp;
}

void u8g2_SetFontPosCenter(u8g2_t *u8g2)
{
  u8g2->font_calc_vref = u8g2_font_calc_vref_center;
     c52:	86 0f       	add	r24, r22
     c54:	91 1d       	adc	r25, r1
     c56:	fc 01       	movw	r30, r24
     c58:	84 91       	lpm	r24, Z
     c5a:	08 95       	ret

00000c5c <u8g2_font_get_word>:
     c5c:	fc 01       	movw	r30, r24
     c5e:	e6 0f       	add	r30, r22
     c60:	f1 1d       	adc	r31, r1
     c62:	84 91       	lpm	r24, Z
     c64:	90 e0       	ldi	r25, 0x00	; 0
     c66:	31 96       	adiw	r30, 0x01	; 1
     c68:	98 2f       	mov	r25, r24
     c6a:	88 27       	eor	r24, r24
     c6c:	e4 91       	lpm	r30, Z
     c6e:	8e 0f       	add	r24, r30
     c70:	91 1d       	adc	r25, r1
     c72:	08 95       	ret

00000c74 <u8g2_font_calc_vref_font>:
     c74:	80 e0       	ldi	r24, 0x00	; 0
     c76:	90 e0       	ldi	r25, 0x00	; 0
     c78:	08 95       	ret

00000c7a <u8g2_font_calc_vref_top>:
     c7a:	80 59       	subi	r24, 0x90	; 144
     c7c:	9f 4f       	sbci	r25, 0xFF	; 255
     c7e:	fc 01       	movw	r30, r24
     c80:	80 81       	ld	r24, Z
     c82:	08 2e       	mov	r0, r24
     c84:	00 0c       	add	r0, r0
     c86:	99 0b       	sbc	r25, r25
     c88:	01 96       	adiw	r24, 0x01	; 1
     c8a:	08 95       	ret

00000c8c <u8g2_read_font_info>:
     c8c:	0f 93       	push	r16
     c8e:	1f 93       	push	r17
     c90:	cf 93       	push	r28
     c92:	df 93       	push	r29
     c94:	ec 01       	movw	r28, r24
     c96:	8b 01       	movw	r16, r22
     c98:	60 e0       	ldi	r22, 0x00	; 0
     c9a:	c8 01       	movw	r24, r16
     c9c:	0e 94 29 06 	call	0xc52	; 0xc52 <u8g2_font_get_byte>
     ca0:	88 83       	st	Y, r24
     ca2:	61 e0       	ldi	r22, 0x01	; 1
     ca4:	c8 01       	movw	r24, r16
     ca6:	0e 94 29 06 	call	0xc52	; 0xc52 <u8g2_font_get_byte>
     caa:	89 83       	std	Y+1, r24	; 0x01
     cac:	62 e0       	ldi	r22, 0x02	; 2
     cae:	c8 01       	movw	r24, r16
     cb0:	0e 94 29 06 	call	0xc52	; 0xc52 <u8g2_font_get_byte>
     cb4:	8a 83       	std	Y+2, r24	; 0x02
     cb6:	63 e0       	ldi	r22, 0x03	; 3
     cb8:	c8 01       	movw	r24, r16
     cba:	0e 94 29 06 	call	0xc52	; 0xc52 <u8g2_font_get_byte>
     cbe:	8b 83       	std	Y+3, r24	; 0x03
     cc0:	64 e0       	ldi	r22, 0x04	; 4
     cc2:	c8 01       	movw	r24, r16
     cc4:	0e 94 29 06 	call	0xc52	; 0xc52 <u8g2_font_get_byte>
     cc8:	8c 83       	std	Y+4, r24	; 0x04
     cca:	65 e0       	ldi	r22, 0x05	; 5
     ccc:	c8 01       	movw	r24, r16
     cce:	0e 94 29 06 	call	0xc52	; 0xc52 <u8g2_font_get_byte>
     cd2:	8d 83       	std	Y+5, r24	; 0x05
     cd4:	66 e0       	ldi	r22, 0x06	; 6
     cd6:	c8 01       	movw	r24, r16
     cd8:	0e 94 29 06 	call	0xc52	; 0xc52 <u8g2_font_get_byte>
     cdc:	8e 83       	std	Y+6, r24	; 0x06
     cde:	67 e0       	ldi	r22, 0x07	; 7
     ce0:	c8 01       	movw	r24, r16
     ce2:	0e 94 29 06 	call	0xc52	; 0xc52 <u8g2_font_get_byte>
     ce6:	8f 83       	std	Y+7, r24	; 0x07
     ce8:	68 e0       	ldi	r22, 0x08	; 8
     cea:	c8 01       	movw	r24, r16
     cec:	0e 94 29 06 	call	0xc52	; 0xc52 <u8g2_font_get_byte>
     cf0:	88 87       	std	Y+8, r24	; 0x08
     cf2:	69 e0       	ldi	r22, 0x09	; 9
     cf4:	c8 01       	movw	r24, r16
     cf6:	0e 94 29 06 	call	0xc52	; 0xc52 <u8g2_font_get_byte>
     cfa:	89 87       	std	Y+9, r24	; 0x09
     cfc:	6a e0       	ldi	r22, 0x0A	; 10
     cfe:	c8 01       	movw	r24, r16
     d00:	0e 94 29 06 	call	0xc52	; 0xc52 <u8g2_font_get_byte>
     d04:	8a 87       	std	Y+10, r24	; 0x0a
     d06:	6b e0       	ldi	r22, 0x0B	; 11
     d08:	c8 01       	movw	r24, r16
     d0a:	0e 94 29 06 	call	0xc52	; 0xc52 <u8g2_font_get_byte>
     d0e:	8b 87       	std	Y+11, r24	; 0x0b
     d10:	6c e0       	ldi	r22, 0x0C	; 12
     d12:	c8 01       	movw	r24, r16
     d14:	0e 94 29 06 	call	0xc52	; 0xc52 <u8g2_font_get_byte>
     d18:	8c 87       	std	Y+12, r24	; 0x0c
     d1a:	6d e0       	ldi	r22, 0x0D	; 13
     d1c:	c8 01       	movw	r24, r16
     d1e:	0e 94 29 06 	call	0xc52	; 0xc52 <u8g2_font_get_byte>
     d22:	8d 87       	std	Y+13, r24	; 0x0d
     d24:	6e e0       	ldi	r22, 0x0E	; 14
     d26:	c8 01       	movw	r24, r16
     d28:	0e 94 29 06 	call	0xc52	; 0xc52 <u8g2_font_get_byte>
     d2c:	8e 87       	std	Y+14, r24	; 0x0e
     d2e:	6f e0       	ldi	r22, 0x0F	; 15
     d30:	c8 01       	movw	r24, r16
     d32:	0e 94 29 06 	call	0xc52	; 0xc52 <u8g2_font_get_byte>
     d36:	8f 87       	std	Y+15, r24	; 0x0f
     d38:	60 e1       	ldi	r22, 0x10	; 16
     d3a:	c8 01       	movw	r24, r16
     d3c:	0e 94 29 06 	call	0xc52	; 0xc52 <u8g2_font_get_byte>
     d40:	88 8b       	std	Y+16, r24	; 0x10
     d42:	61 e1       	ldi	r22, 0x11	; 17
     d44:	c8 01       	movw	r24, r16
     d46:	0e 94 2e 06 	call	0xc5c	; 0xc5c <u8g2_font_get_word>
     d4a:	9a 8b       	std	Y+18, r25	; 0x12
     d4c:	89 8b       	std	Y+17, r24	; 0x11
     d4e:	63 e1       	ldi	r22, 0x13	; 19
     d50:	c8 01       	movw	r24, r16
     d52:	0e 94 2e 06 	call	0xc5c	; 0xc5c <u8g2_font_get_word>
     d56:	9c 8b       	std	Y+20, r25	; 0x14
     d58:	8b 8b       	std	Y+19, r24	; 0x13
     d5a:	65 e1       	ldi	r22, 0x15	; 21
     d5c:	c8 01       	movw	r24, r16
     d5e:	0e 94 2e 06 	call	0xc5c	; 0xc5c <u8g2_font_get_word>
     d62:	9e 8b       	std	Y+22, r25	; 0x16
     d64:	8d 8b       	std	Y+21, r24	; 0x15
     d66:	df 91       	pop	r29
     d68:	cf 91       	pop	r28
     d6a:	1f 91       	pop	r17
     d6c:	0f 91       	pop	r16
     d6e:	08 95       	ret

00000d70 <u8g2_font_decode_get_unsigned_bits>:
     d70:	dc 01       	movw	r26, r24
     d72:	1a 96       	adiw	r26, 0x0a	; 10
     d74:	4c 91       	ld	r20, X
     d76:	1a 97       	sbiw	r26, 0x0a	; 10
     d78:	ed 91       	ld	r30, X+
     d7a:	fc 91       	ld	r31, X
     d7c:	11 97       	sbiw	r26, 0x01	; 1
     d7e:	24 91       	lpm	r18, Z
     d80:	30 e0       	ldi	r19, 0x00	; 0
     d82:	04 2e       	mov	r0, r20
     d84:	02 c0       	rjmp	.+4      	; 0xd8a <u8g2_font_decode_get_unsigned_bits+0x1a>
     d86:	35 95       	asr	r19
     d88:	27 95       	ror	r18
     d8a:	0a 94       	dec	r0
     d8c:	e2 f7       	brpl	.-8      	; 0xd86 <u8g2_font_decode_get_unsigned_bits+0x16>
     d8e:	82 2f       	mov	r24, r18
     d90:	94 2f       	mov	r25, r20
     d92:	96 0f       	add	r25, r22
     d94:	98 30       	cpi	r25, 0x08	; 8
     d96:	80 f0       	brcs	.+32     	; 0xdb8 <u8g2_font_decode_get_unsigned_bits+0x48>
     d98:	88 e0       	ldi	r24, 0x08	; 8
     d9a:	84 1b       	sub	r24, r20
     d9c:	31 96       	adiw	r30, 0x01	; 1
     d9e:	11 96       	adiw	r26, 0x01	; 1
     da0:	fc 93       	st	X, r31
     da2:	ee 93       	st	-X, r30
     da4:	e4 91       	lpm	r30, Z
     da6:	f0 e0       	ldi	r31, 0x00	; 0
     da8:	02 c0       	rjmp	.+4      	; 0xdae <u8g2_font_decode_get_unsigned_bits+0x3e>
     daa:	ee 0f       	add	r30, r30
     dac:	ff 1f       	adc	r31, r31
     dae:	8a 95       	dec	r24
     db0:	e2 f7       	brpl	.-8      	; 0xdaa <u8g2_font_decode_get_unsigned_bits+0x3a>
     db2:	8e 2f       	mov	r24, r30
     db4:	82 2b       	or	r24, r18
     db6:	98 50       	subi	r25, 0x08	; 8
     db8:	21 e0       	ldi	r18, 0x01	; 1
     dba:	30 e0       	ldi	r19, 0x00	; 0
     dbc:	02 c0       	rjmp	.+4      	; 0xdc2 <u8g2_font_decode_get_unsigned_bits+0x52>
     dbe:	22 0f       	add	r18, r18
     dc0:	33 1f       	adc	r19, r19
     dc2:	6a 95       	dec	r22
     dc4:	e2 f7       	brpl	.-8      	; 0xdbe <u8g2_font_decode_get_unsigned_bits+0x4e>
     dc6:	21 50       	subi	r18, 0x01	; 1
     dc8:	1a 96       	adiw	r26, 0x0a	; 10
     dca:	9c 93       	st	X, r25
     dcc:	82 23       	and	r24, r18
     dce:	08 95       	ret

00000dd0 <u8g2_font_setup_decode>:
     dd0:	0f 93       	push	r16
     dd2:	1f 93       	push	r17
     dd4:	cf 93       	push	r28
     dd6:	df 93       	push	r29
     dd8:	ec 01       	movw	r28, r24
     dda:	8c 01       	movw	r16, r24
     ddc:	08 5b       	subi	r16, 0xB8	; 184
     dde:	1f 4f       	sbci	r17, 0xFF	; 255
     de0:	f8 01       	movw	r30, r16
     de2:	71 83       	std	Z+1, r23	; 0x01
     de4:	60 83       	st	Z, r22
     de6:	12 86       	std	Z+10, r1	; 0x0a
     de8:	73 96       	adiw	r30, 0x13	; 19
     dea:	60 81       	ld	r22, Z
     dec:	c8 01       	movw	r24, r16
     dee:	0e 94 b8 06 	call	0xd70	; 0xd70 <u8g2_font_decode_get_unsigned_bits>
     df2:	f8 01       	movw	r30, r16
     df4:	80 87       	std	Z+8, r24	; 0x08
     df6:	74 96       	adiw	r30, 0x14	; 20
     df8:	60 81       	ld	r22, Z
     dfa:	c8 01       	movw	r24, r16
     dfc:	0e 94 b8 06 	call	0xd70	; 0xd70 <u8g2_font_decode_get_unsigned_bits>
     e00:	f8 01       	movw	r30, r16
     e02:	81 87       	std	Z+9, r24	; 0x09
     e04:	bc 96       	adiw	r30, 0x2c	; 44
     e06:	80 81       	ld	r24, Z
     e08:	f8 01       	movw	r30, r16
     e0a:	84 87       	std	Z+12, r24	; 0x0c
     e0c:	91 e0       	ldi	r25, 0x01	; 1
     e0e:	81 11       	cpse	r24, r1
     e10:	90 e0       	ldi	r25, 0x00	; 0
     e12:	c8 5b       	subi	r28, 0xB8	; 184
     e14:	df 4f       	sbci	r29, 0xFF	; 255
     e16:	9d 87       	std	Y+13, r25	; 0x0d
     e18:	df 91       	pop	r29
     e1a:	cf 91       	pop	r28
     e1c:	1f 91       	pop	r17
     e1e:	0f 91       	pop	r16
     e20:	08 95       	ret

00000e22 <u8g2_font_decode_get_signed_bits>:
     e22:	cf 93       	push	r28
     e24:	c6 2f       	mov	r28, r22
     e26:	0e 94 b8 06 	call	0xd70	; 0xd70 <u8g2_font_decode_get_unsigned_bits>
     e2a:	c1 50       	subi	r28, 0x01	; 1
     e2c:	21 e0       	ldi	r18, 0x01	; 1
     e2e:	30 e0       	ldi	r19, 0x00	; 0
     e30:	02 c0       	rjmp	.+4      	; 0xe36 <u8g2_font_decode_get_signed_bits+0x14>
     e32:	22 0f       	add	r18, r18
     e34:	33 1f       	adc	r19, r19
     e36:	ca 95       	dec	r28
     e38:	e2 f7       	brpl	.-8      	; 0xe32 <u8g2_font_decode_get_signed_bits+0x10>
     e3a:	82 1b       	sub	r24, r18
     e3c:	cf 91       	pop	r28
     e3e:	08 95       	ret

00000e40 <u8g2_add_vector_y>:
     e40:	21 30       	cpi	r18, 0x01	; 1
     e42:	49 f0       	breq	.+18     	; 0xe56 <u8g2_add_vector_y+0x16>
     e44:	18 f0       	brcs	.+6      	; 0xe4c <u8g2_add_vector_y+0xc>
     e46:	22 30       	cpi	r18, 0x02	; 2
     e48:	59 f0       	breq	.+22     	; 0xe60 <u8g2_add_vector_y+0x20>
     e4a:	0f c0       	rjmp	.+30     	; 0xe6a <u8g2_add_vector_y+0x2a>
     e4c:	84 0f       	add	r24, r20
     e4e:	91 1d       	adc	r25, r1
     e50:	47 fd       	sbrc	r20, 7
     e52:	9a 95       	dec	r25
     e54:	08 95       	ret
     e56:	86 0f       	add	r24, r22
     e58:	91 1d       	adc	r25, r1
     e5a:	67 fd       	sbrc	r22, 7
     e5c:	9a 95       	dec	r25
     e5e:	08 95       	ret
     e60:	84 1b       	sub	r24, r20
     e62:	91 09       	sbc	r25, r1
     e64:	47 fd       	sbrc	r20, 7
     e66:	93 95       	inc	r25
     e68:	08 95       	ret
     e6a:	86 1b       	sub	r24, r22
     e6c:	91 09       	sbc	r25, r1
     e6e:	67 fd       	sbrc	r22, 7
     e70:	93 95       	inc	r25
     e72:	08 95       	ret

00000e74 <u8g2_add_vector_x>:
     e74:	21 30       	cpi	r18, 0x01	; 1
     e76:	49 f0       	breq	.+18     	; 0xe8a <u8g2_add_vector_x+0x16>
     e78:	18 f0       	brcs	.+6      	; 0xe80 <u8g2_add_vector_x+0xc>
     e7a:	22 30       	cpi	r18, 0x02	; 2
     e7c:	59 f0       	breq	.+22     	; 0xe94 <u8g2_add_vector_x+0x20>
     e7e:	0f c0       	rjmp	.+30     	; 0xe9e <u8g2_add_vector_x+0x2a>
     e80:	86 0f       	add	r24, r22
     e82:	91 1d       	adc	r25, r1
     e84:	67 fd       	sbrc	r22, 7
     e86:	9a 95       	dec	r25
     e88:	08 95       	ret
     e8a:	84 1b       	sub	r24, r20
     e8c:	91 09       	sbc	r25, r1
     e8e:	47 fd       	sbrc	r20, 7
     e90:	93 95       	inc	r25
     e92:	08 95       	ret
     e94:	86 1b       	sub	r24, r22
     e96:	91 09       	sbc	r25, r1
     e98:	67 fd       	sbrc	r22, 7
     e9a:	93 95       	inc	r25
     e9c:	08 95       	ret
     e9e:	84 0f       	add	r24, r20
     ea0:	91 1d       	adc	r25, r1
     ea2:	47 fd       	sbrc	r20, 7
     ea4:	9a 95       	dec	r25
     ea6:	08 95       	ret

00000ea8 <u8g2_font_decode_len>:
     ea8:	6f 92       	push	r6
     eaa:	7f 92       	push	r7
     eac:	8f 92       	push	r8
     eae:	9f 92       	push	r9
     eb0:	af 92       	push	r10
     eb2:	bf 92       	push	r11
     eb4:	cf 92       	push	r12
     eb6:	df 92       	push	r13
     eb8:	ef 92       	push	r14
     eba:	ff 92       	push	r15
     ebc:	0f 93       	push	r16
     ebe:	1f 93       	push	r17
     ec0:	cf 93       	push	r28
     ec2:	df 93       	push	r29
     ec4:	7c 01       	movw	r14, r24
     ec6:	16 2f       	mov	r17, r22
     ec8:	74 2e       	mov	r7, r20
     eca:	fc 01       	movw	r30, r24
     ecc:	e8 5b       	subi	r30, 0xB8	; 184
     ece:	ff 4f       	sbci	r31, 0xFF	; 255
     ed0:	96 80       	ldd	r9, Z+6	; 0x06
     ed2:	d7 81       	ldd	r29, Z+7	; 0x07
     ed4:	f7 01       	movw	r30, r14
     ed6:	e8 5b       	subi	r30, 0xB8	; 184
     ed8:	ff 4f       	sbci	r31, 0xFF	; 255
     eda:	c0 85       	ldd	r28, Z+8	; 0x08
     edc:	c9 19       	sub	r28, r9
     ede:	1c 17       	cp	r17, r28
     ee0:	10 f0       	brcs	.+4      	; 0xee6 <u8g2_font_decode_len+0x3e>
     ee2:	6c 2e       	mov	r6, r28
     ee4:	01 c0       	rjmp	.+2      	; 0xee8 <u8g2_font_decode_len+0x40>
     ee6:	61 2e       	mov	r6, r17
     ee8:	f7 01       	movw	r30, r14
     eea:	e8 5b       	subi	r30, 0xB8	; 184
     eec:	ff 4f       	sbci	r31, 0xFF	; 255
     eee:	c4 80       	ldd	r12, Z+4	; 0x04
     ef0:	d5 80       	ldd	r13, Z+5	; 0x05
     ef2:	06 85       	ldd	r16, Z+14	; 0x0e
     ef4:	8d 2e       	mov	r8, r29
     ef6:	20 2f       	mov	r18, r16
     ef8:	4d 2f       	mov	r20, r29
     efa:	69 2d       	mov	r22, r9
     efc:	82 81       	ldd	r24, Z+2	; 0x02
     efe:	93 81       	ldd	r25, Z+3	; 0x03
     f00:	0e 94 3a 07 	call	0xe74	; 0xe74 <u8g2_add_vector_x>
     f04:	5c 01       	movw	r10, r24
     f06:	20 2f       	mov	r18, r16
     f08:	4d 2f       	mov	r20, r29
     f0a:	69 2d       	mov	r22, r9
     f0c:	c6 01       	movw	r24, r12
     f0e:	0e 94 20 07 	call	0xe40	; 0xe40 <u8g2_add_vector_y>
     f12:	77 20       	and	r7, r7
     f14:	71 f0       	breq	.+28     	; 0xf32 <u8g2_font_decode_len+0x8a>
     f16:	f7 01       	movw	r30, r14
     f18:	e8 5b       	subi	r30, 0xB8	; 184
     f1a:	ff 4f       	sbci	r31, 0xFF	; 255
     f1c:	24 85       	ldd	r18, Z+12	; 0x0c
     f1e:	bc 96       	adiw	r30, 0x2c	; 44
     f20:	20 83       	st	Z, r18
     f22:	26 2d       	mov	r18, r6
     f24:	30 e0       	ldi	r19, 0x00	; 0
     f26:	ac 01       	movw	r20, r24
     f28:	b5 01       	movw	r22, r10
     f2a:	c7 01       	movw	r24, r14
     f2c:	0e 94 92 0a 	call	0x1524	; 0x1524 <u8g2_DrawHVLine>
     f30:	10 c0       	rjmp	.+32     	; 0xf52 <u8g2_font_decode_len+0xaa>
     f32:	f7 01       	movw	r30, r14
     f34:	e8 5b       	subi	r30, 0xB8	; 184
     f36:	ff 4f       	sbci	r31, 0xFF	; 255
     f38:	23 85       	ldd	r18, Z+11	; 0x0b
     f3a:	21 11       	cpse	r18, r1
     f3c:	0a c0       	rjmp	.+20     	; 0xf52 <u8g2_font_decode_len+0xaa>
     f3e:	25 85       	ldd	r18, Z+13	; 0x0d
     f40:	bc 96       	adiw	r30, 0x2c	; 44
     f42:	20 83       	st	Z, r18
     f44:	26 2d       	mov	r18, r6
     f46:	30 e0       	ldi	r19, 0x00	; 0
     f48:	ac 01       	movw	r20, r24
     f4a:	b5 01       	movw	r22, r10
     f4c:	c7 01       	movw	r24, r14
     f4e:	0e 94 92 0a 	call	0x1524	; 0x1524 <u8g2_DrawHVLine>
     f52:	1c 17       	cp	r17, r28
     f54:	20 f0       	brcs	.+8      	; 0xf5e <u8g2_font_decode_len+0xb6>
     f56:	1c 1b       	sub	r17, r28
     f58:	df 5f       	subi	r29, 0xFF	; 255
     f5a:	91 2c       	mov	r9, r1
     f5c:	bb cf       	rjmp	.-138    	; 0xed4 <u8g2_font_decode_len+0x2c>
     f5e:	61 2f       	mov	r22, r17
     f60:	69 0d       	add	r22, r9
     f62:	f7 01       	movw	r30, r14
     f64:	e8 5b       	subi	r30, 0xB8	; 184
     f66:	ff 4f       	sbci	r31, 0xFF	; 255
     f68:	66 83       	std	Z+6, r22	; 0x06
     f6a:	87 82       	std	Z+7, r8	; 0x07
     f6c:	df 91       	pop	r29
     f6e:	cf 91       	pop	r28
     f70:	1f 91       	pop	r17
     f72:	0f 91       	pop	r16
     f74:	ff 90       	pop	r15
     f76:	ef 90       	pop	r14
     f78:	df 90       	pop	r13
     f7a:	cf 90       	pop	r12
     f7c:	bf 90       	pop	r11
     f7e:	af 90       	pop	r10
     f80:	9f 90       	pop	r9
     f82:	8f 90       	pop	r8
     f84:	7f 90       	pop	r7
     f86:	6f 90       	pop	r6
     f88:	08 95       	ret

00000f8a <u8g2_font_decode_glyph>:
     f8a:	6f 92       	push	r6
     f8c:	7f 92       	push	r7
     f8e:	8f 92       	push	r8
     f90:	9f 92       	push	r9
     f92:	af 92       	push	r10
     f94:	bf 92       	push	r11
     f96:	cf 92       	push	r12
     f98:	df 92       	push	r13
     f9a:	ef 92       	push	r14
     f9c:	ff 92       	push	r15
     f9e:	0f 93       	push	r16
     fa0:	1f 93       	push	r17
     fa2:	cf 93       	push	r28
     fa4:	df 93       	push	r29
     fa6:	ec 01       	movw	r28, r24
     fa8:	7c 01       	movw	r14, r24
     faa:	88 e4       	ldi	r24, 0x48	; 72
     fac:	e8 0e       	add	r14, r24
     fae:	f1 1c       	adc	r15, r1
     fb0:	ce 01       	movw	r24, r28
     fb2:	0e 94 e8 06 	call	0xdd0	; 0xdd0 <u8g2_font_setup_decode>
     fb6:	fe 01       	movw	r30, r28
     fb8:	ef 5a       	subi	r30, 0xAF	; 175
     fba:	ff 4f       	sbci	r31, 0xFF	; 255
     fbc:	c0 80       	ld	r12, Z
     fbe:	3c 96       	adiw	r30, 0x0c	; 12
     fc0:	60 81       	ld	r22, Z
     fc2:	c7 01       	movw	r24, r14
     fc4:	0e 94 11 07 	call	0xe22	; 0xe22 <u8g2_font_decode_get_signed_bits>
     fc8:	78 2e       	mov	r7, r24
     fca:	fe 01       	movw	r30, r28
     fcc:	e2 5a       	subi	r30, 0xA2	; 162
     fce:	ff 4f       	sbci	r31, 0xFF	; 255
     fd0:	60 81       	ld	r22, Z
     fd2:	c7 01       	movw	r24, r14
     fd4:	0e 94 11 07 	call	0xe22	; 0xe22 <u8g2_font_decode_get_signed_bits>
     fd8:	18 2f       	mov	r17, r24
     fda:	fe 01       	movw	r30, r28
     fdc:	e1 5a       	subi	r30, 0xA1	; 161
     fde:	ff 4f       	sbci	r31, 0xFF	; 255
     fe0:	60 81       	ld	r22, Z
     fe2:	c7 01       	movw	r24, r14
     fe4:	0e 94 11 07 	call	0xe22	; 0xe22 <u8g2_font_decode_get_signed_bits>
     fe8:	d8 2e       	mov	r13, r24
     fea:	f7 01       	movw	r30, r14
     fec:	60 84       	ldd	r6, Z+8	; 0x08
     fee:	16 14       	cp	r1, r6
     ff0:	0c f0       	brlt	.+2      	; 0xff4 <u8g2_font_decode_glyph+0x6a>
     ff2:	9b c0       	rjmp	.+310    	; 0x112a <u8g2_font_decode_glyph+0x1a0>
     ff4:	06 85       	ldd	r16, Z+14	; 0x0e
     ff6:	1c 0d       	add	r17, r12
     ff8:	11 95       	neg	r17
     ffa:	20 2f       	mov	r18, r16
     ffc:	41 2f       	mov	r20, r17
     ffe:	67 2d       	mov	r22, r7
    1000:	82 81       	ldd	r24, Z+2	; 0x02
    1002:	93 81       	ldd	r25, Z+3	; 0x03
    1004:	0e 94 3a 07 	call	0xe74	; 0xe74 <u8g2_add_vector_x>
    1008:	5c 01       	movw	r10, r24
    100a:	f7 01       	movw	r30, r14
    100c:	93 83       	std	Z+3, r25	; 0x03
    100e:	82 83       	std	Z+2, r24	; 0x02
    1010:	20 2f       	mov	r18, r16
    1012:	41 2f       	mov	r20, r17
    1014:	67 2d       	mov	r22, r7
    1016:	84 81       	ldd	r24, Z+4	; 0x04
    1018:	95 81       	ldd	r25, Z+5	; 0x05
    101a:	0e 94 20 07 	call	0xe40	; 0xe40 <u8g2_add_vector_y>
    101e:	f7 01       	movw	r30, r14
    1020:	95 83       	std	Z+5, r25	; 0x05
    1022:	84 83       	std	Z+4, r24	; 0x04
    1024:	01 30       	cpi	r16, 0x01	; 1
    1026:	89 f0       	breq	.+34     	; 0x104a <u8g2_font_decode_glyph+0xc0>
    1028:	28 f0       	brcs	.+10     	; 0x1034 <u8g2_font_decode_glyph+0xaa>
    102a:	02 30       	cpi	r16, 0x02	; 2
    102c:	01 f1       	breq	.+64     	; 0x106e <u8g2_font_decode_glyph+0xe4>
    102e:	03 30       	cpi	r16, 0x03	; 3
    1030:	a1 f1       	breq	.+104    	; 0x109a <u8g2_font_decode_glyph+0x110>
    1032:	43 c0       	rjmp	.+134    	; 0x10ba <u8g2_font_decode_glyph+0x130>
    1034:	95 01       	movw	r18, r10
    1036:	26 0d       	add	r18, r6
    1038:	31 1d       	adc	r19, r1
    103a:	67 fc       	sbrc	r6, 7
    103c:	3a 95       	dec	r19
    103e:	8c 01       	movw	r16, r24
    1040:	0c 0d       	add	r16, r12
    1042:	11 1d       	adc	r17, r1
    1044:	c7 fc       	sbrc	r12, 7
    1046:	1a 95       	dec	r17
    1048:	3a c0       	rjmp	.+116    	; 0x10be <u8g2_font_decode_glyph+0x134>
    104a:	a5 01       	movw	r20, r10
    104c:	4c 19       	sub	r20, r12
    104e:	51 09       	sbc	r21, r1
    1050:	c7 fc       	sbrc	r12, 7
    1052:	53 95       	inc	r21
    1054:	95 01       	movw	r18, r10
    1056:	2f 5f       	subi	r18, 0xFF	; 255
    1058:	3f 4f       	sbci	r19, 0xFF	; 255
    105a:	8c 01       	movw	r16, r24
    105c:	06 0d       	add	r16, r6
    105e:	11 1d       	adc	r17, r1
    1060:	67 fc       	sbrc	r6, 7
    1062:	1a 95       	dec	r17
    1064:	ba 01       	movw	r22, r20
    1066:	6f 5f       	subi	r22, 0xFF	; 255
    1068:	7f 4f       	sbci	r23, 0xFF	; 255
    106a:	5b 01       	movw	r10, r22
    106c:	28 c0       	rjmp	.+80     	; 0x10be <u8g2_font_decode_glyph+0x134>
    106e:	a5 01       	movw	r20, r10
    1070:	46 19       	sub	r20, r6
    1072:	51 09       	sbc	r21, r1
    1074:	67 fc       	sbrc	r6, 7
    1076:	53 95       	inc	r21
    1078:	95 01       	movw	r18, r10
    107a:	2f 5f       	subi	r18, 0xFF	; 255
    107c:	3f 4f       	sbci	r19, 0xFF	; 255
    107e:	bc 01       	movw	r22, r24
    1080:	6c 19       	sub	r22, r12
    1082:	71 09       	sbc	r23, r1
    1084:	c7 fc       	sbrc	r12, 7
    1086:	73 95       	inc	r23
    1088:	8c 01       	movw	r16, r24
    108a:	0f 5f       	subi	r16, 0xFF	; 255
    108c:	1f 4f       	sbci	r17, 0xFF	; 255
    108e:	cb 01       	movw	r24, r22
    1090:	01 96       	adiw	r24, 0x01	; 1
    1092:	fa 01       	movw	r30, r20
    1094:	31 96       	adiw	r30, 0x01	; 1
    1096:	5f 01       	movw	r10, r30
    1098:	12 c0       	rjmp	.+36     	; 0x10be <u8g2_font_decode_glyph+0x134>
    109a:	95 01       	movw	r18, r10
    109c:	2c 0d       	add	r18, r12
    109e:	31 1d       	adc	r19, r1
    10a0:	c7 fc       	sbrc	r12, 7
    10a2:	3a 95       	dec	r19
    10a4:	ac 01       	movw	r20, r24
    10a6:	46 19       	sub	r20, r6
    10a8:	51 09       	sbc	r21, r1
    10aa:	67 fc       	sbrc	r6, 7
    10ac:	53 95       	inc	r21
    10ae:	8c 01       	movw	r16, r24
    10b0:	0f 5f       	subi	r16, 0xFF	; 255
    10b2:	1f 4f       	sbci	r17, 0xFF	; 255
    10b4:	ca 01       	movw	r24, r20
    10b6:	01 96       	adiw	r24, 0x01	; 1
    10b8:	02 c0       	rjmp	.+4      	; 0x10be <u8g2_font_decode_glyph+0x134>
    10ba:	8c 01       	movw	r16, r24
    10bc:	95 01       	movw	r18, r10
    10be:	ac 01       	movw	r20, r24
    10c0:	b5 01       	movw	r22, r10
    10c2:	ce 01       	movw	r24, r28
    10c4:	0e 94 46 0b 	call	0x168c	; 0x168c <u8g2_IsIntersection>
    10c8:	88 23       	and	r24, r24
    10ca:	79 f1       	breq	.+94     	; 0x112a <u8g2_font_decode_glyph+0x1a0>
    10cc:	fe 01       	movw	r30, r28
    10ce:	e8 5b       	subi	r30, 0xB8	; 184
    10d0:	ff 4f       	sbci	r31, 0xFF	; 255
    10d2:	16 82       	std	Z+6, r1	; 0x06
    10d4:	17 82       	std	Z+7, r1	; 0x07
    10d6:	fe 01       	movw	r30, r28
    10d8:	e7 5a       	subi	r30, 0xA7	; 167
    10da:	ff 4f       	sbci	r31, 0xFF	; 255
    10dc:	60 81       	ld	r22, Z
    10de:	c7 01       	movw	r24, r14
    10e0:	0e 94 b8 06 	call	0xd70	; 0xd70 <u8g2_font_decode_get_unsigned_bits>
    10e4:	08 2f       	mov	r16, r24
    10e6:	fe 01       	movw	r30, r28
    10e8:	e6 5a       	subi	r30, 0xA6	; 166
    10ea:	ff 4f       	sbci	r31, 0xFF	; 255
    10ec:	60 81       	ld	r22, Z
    10ee:	c7 01       	movw	r24, r14
    10f0:	0e 94 b8 06 	call	0xd70	; 0xd70 <u8g2_font_decode_get_unsigned_bits>
    10f4:	18 2f       	mov	r17, r24
    10f6:	40 e0       	ldi	r20, 0x00	; 0
    10f8:	60 2f       	mov	r22, r16
    10fa:	ce 01       	movw	r24, r28
    10fc:	0e 94 54 07 	call	0xea8	; 0xea8 <u8g2_font_decode_len>
    1100:	41 e0       	ldi	r20, 0x01	; 1
    1102:	61 2f       	mov	r22, r17
    1104:	ce 01       	movw	r24, r28
    1106:	0e 94 54 07 	call	0xea8	; 0xea8 <u8g2_font_decode_len>
    110a:	61 e0       	ldi	r22, 0x01	; 1
    110c:	c7 01       	movw	r24, r14
    110e:	0e 94 b8 06 	call	0xd70	; 0xd70 <u8g2_font_decode_get_unsigned_bits>
    1112:	81 11       	cpse	r24, r1
    1114:	f0 cf       	rjmp	.-32     	; 0x10f6 <u8g2_font_decode_glyph+0x16c>
    1116:	fe 01       	movw	r30, r28
    1118:	e8 5b       	subi	r30, 0xB8	; 184
    111a:	ff 4f       	sbci	r31, 0xFF	; 255
    111c:	87 81       	ldd	r24, Z+7	; 0x07
    111e:	8c 15       	cp	r24, r12
    1120:	d4 f2       	brlt	.-76     	; 0x10d6 <u8g2_font_decode_glyph+0x14c>
    1122:	84 85       	ldd	r24, Z+12	; 0x0c
    1124:	cc 58       	subi	r28, 0x8C	; 140
    1126:	df 4f       	sbci	r29, 0xFF	; 255
    1128:	88 83       	st	Y, r24
    112a:	8d 2d       	mov	r24, r13
    112c:	df 91       	pop	r29
    112e:	cf 91       	pop	r28
    1130:	1f 91       	pop	r17
    1132:	0f 91       	pop	r16
    1134:	ff 90       	pop	r15
    1136:	ef 90       	pop	r14
    1138:	df 90       	pop	r13
    113a:	cf 90       	pop	r12
    113c:	bf 90       	pop	r11
    113e:	af 90       	pop	r10
    1140:	9f 90       	pop	r9
    1142:	8f 90       	pop	r8
    1144:	7f 90       	pop	r7
    1146:	6f 90       	pop	r6
    1148:	08 95       	ret

0000114a <u8g2_font_get_glyph_data>:
    114a:	ef 92       	push	r14
    114c:	ff 92       	push	r15
    114e:	0f 93       	push	r16
    1150:	1f 93       	push	r17
    1152:	cf 93       	push	r28
    1154:	df 93       	push	r29
    1156:	fc 01       	movw	r30, r24
    1158:	ec 5b       	subi	r30, 0xBC	; 188
    115a:	ff 4f       	sbci	r31, 0xFF	; 255
    115c:	c0 81       	ld	r28, Z
    115e:	d1 81       	ldd	r29, Z+1	; 0x01
    1160:	67 96       	adiw	r28, 0x17	; 23
    1162:	6f 3f       	cpi	r22, 0xFF	; 255
    1164:	71 05       	cpc	r23, r1
    1166:	09 f0       	breq	.+2      	; 0x116a <u8g2_font_get_glyph_data+0x20>
    1168:	38 f5       	brcc	.+78     	; 0x11b8 <u8g2_font_get_glyph_data+0x6e>
    116a:	61 36       	cpi	r22, 0x61	; 97
    116c:	71 05       	cpc	r23, r1
    116e:	30 f0       	brcs	.+12     	; 0x117c <u8g2_font_get_glyph_data+0x32>
    1170:	b6 96       	adiw	r30, 0x26	; 38
    1172:	80 81       	ld	r24, Z
    1174:	91 81       	ldd	r25, Z+1	; 0x01
    1176:	c8 0f       	add	r28, r24
    1178:	d9 1f       	adc	r29, r25
    117a:	0a c0       	rjmp	.+20     	; 0x1190 <u8g2_font_get_glyph_data+0x46>
    117c:	61 34       	cpi	r22, 0x41	; 65
    117e:	71 05       	cpc	r23, r1
    1180:	38 f0       	brcs	.+14     	; 0x1190 <u8g2_font_get_glyph_data+0x46>
    1182:	fc 01       	movw	r30, r24
    1184:	e8 59       	subi	r30, 0x98	; 152
    1186:	ff 4f       	sbci	r31, 0xFF	; 255
    1188:	80 81       	ld	r24, Z
    118a:	91 81       	ldd	r25, Z+1	; 0x01
    118c:	c8 0f       	add	r28, r24
    118e:	d9 1f       	adc	r29, r25
    1190:	ce 01       	movw	r24, r28
    1192:	01 96       	adiw	r24, 0x01	; 1
    1194:	fc 01       	movw	r30, r24
    1196:	24 91       	lpm	r18, Z
    1198:	22 23       	and	r18, r18
    119a:	09 f4       	brne	.+2      	; 0x119e <u8g2_font_get_glyph_data+0x54>
    119c:	3c c0       	rjmp	.+120    	; 0x1216 <u8g2_font_get_glyph_data+0xcc>
    119e:	fe 01       	movw	r30, r28
    11a0:	24 91       	lpm	r18, Z
    11a2:	30 e0       	ldi	r19, 0x00	; 0
    11a4:	62 17       	cp	r22, r18
    11a6:	73 07       	cpc	r23, r19
    11a8:	11 f4       	brne	.+4      	; 0x11ae <u8g2_font_get_glyph_data+0x64>
    11aa:	01 96       	adiw	r24, 0x01	; 1
    11ac:	39 c0       	rjmp	.+114    	; 0x1220 <u8g2_font_get_glyph_data+0xd6>
    11ae:	fc 01       	movw	r30, r24
    11b0:	84 91       	lpm	r24, Z
    11b2:	c8 0f       	add	r28, r24
    11b4:	d1 1d       	adc	r29, r1
    11b6:	ec cf       	rjmp	.-40     	; 0x1190 <u8g2_font_get_glyph_data+0x46>
    11b8:	8b 01       	movw	r16, r22
    11ba:	fc 01       	movw	r30, r24
    11bc:	e4 59       	subi	r30, 0x94	; 148
    11be:	ff 4f       	sbci	r31, 0xFF	; 255
    11c0:	80 81       	ld	r24, Z
    11c2:	91 81       	ldd	r25, Z+1	; 0x01
    11c4:	c8 0f       	add	r28, r24
    11c6:	d9 1f       	adc	r29, r25
    11c8:	7e 01       	movw	r14, r28
    11ca:	60 e0       	ldi	r22, 0x00	; 0
    11cc:	c7 01       	movw	r24, r14
    11ce:	0e 94 2e 06 	call	0xc5c	; 0xc5c <u8g2_font_get_word>
    11d2:	c8 0f       	add	r28, r24
    11d4:	d9 1f       	adc	r29, r25
    11d6:	62 e0       	ldi	r22, 0x02	; 2
    11d8:	c7 01       	movw	r24, r14
    11da:	0e 94 2e 06 	call	0xc5c	; 0xc5c <u8g2_font_get_word>
    11de:	f4 e0       	ldi	r31, 0x04	; 4
    11e0:	ef 0e       	add	r14, r31
    11e2:	f1 1c       	adc	r15, r1
    11e4:	80 17       	cp	r24, r16
    11e6:	91 07       	cpc	r25, r17
    11e8:	80 f3       	brcs	.-32     	; 0x11ca <u8g2_font_get_glyph_data+0x80>
    11ea:	fe 01       	movw	r30, r28
    11ec:	84 91       	lpm	r24, Z
    11ee:	90 e0       	ldi	r25, 0x00	; 0
    11f0:	98 2f       	mov	r25, r24
    11f2:	88 27       	eor	r24, r24
    11f4:	31 96       	adiw	r30, 0x01	; 1
    11f6:	e4 91       	lpm	r30, Z
    11f8:	8e 2b       	or	r24, r30
    11fa:	00 97       	sbiw	r24, 0x00	; 0
    11fc:	79 f0       	breq	.+30     	; 0x121c <u8g2_font_get_glyph_data+0xd2>
    11fe:	08 17       	cp	r16, r24
    1200:	19 07       	cpc	r17, r25
    1202:	19 f4       	brne	.+6      	; 0x120a <u8g2_font_get_glyph_data+0xc0>
    1204:	ce 01       	movw	r24, r28
    1206:	03 96       	adiw	r24, 0x03	; 3
    1208:	0b c0       	rjmp	.+22     	; 0x1220 <u8g2_font_get_glyph_data+0xd6>
    120a:	fe 01       	movw	r30, r28
    120c:	32 96       	adiw	r30, 0x02	; 2
    120e:	e4 91       	lpm	r30, Z
    1210:	ce 0f       	add	r28, r30
    1212:	d1 1d       	adc	r29, r1
    1214:	ea cf       	rjmp	.-44     	; 0x11ea <u8g2_font_get_glyph_data+0xa0>
    1216:	80 e0       	ldi	r24, 0x00	; 0
    1218:	90 e0       	ldi	r25, 0x00	; 0
    121a:	02 c0       	rjmp	.+4      	; 0x1220 <u8g2_font_get_glyph_data+0xd6>
    121c:	80 e0       	ldi	r24, 0x00	; 0
    121e:	90 e0       	ldi	r25, 0x00	; 0
    1220:	df 91       	pop	r29
    1222:	cf 91       	pop	r28
    1224:	1f 91       	pop	r17
    1226:	0f 91       	pop	r16
    1228:	ff 90       	pop	r15
    122a:	ef 90       	pop	r14
    122c:	08 95       	ret

0000122e <u8g2_font_draw_glyph>:
    122e:	cf 93       	push	r28
    1230:	df 93       	push	r29
    1232:	ec 01       	movw	r28, r24
    1234:	fc 01       	movw	r30, r24
    1236:	e6 5b       	subi	r30, 0xB6	; 182
    1238:	ff 4f       	sbci	r31, 0xFF	; 255
    123a:	71 83       	std	Z+1, r23	; 0x01
    123c:	60 83       	st	Z, r22
    123e:	32 96       	adiw	r30, 0x02	; 2
    1240:	51 83       	std	Z+1, r21	; 0x01
    1242:	40 83       	st	Z, r20
    1244:	b9 01       	movw	r22, r18
    1246:	0e 94 a5 08 	call	0x114a	; 0x114a <u8g2_font_get_glyph_data>
    124a:	00 97       	sbiw	r24, 0x00	; 0
    124c:	41 f0       	breq	.+16     	; 0x125e <u8g2_font_draw_glyph+0x30>
    124e:	bc 01       	movw	r22, r24
    1250:	ce 01       	movw	r24, r28
    1252:	0e 94 c5 07 	call	0xf8a	; 0xf8a <u8g2_font_decode_glyph>
    1256:	08 2e       	mov	r0, r24
    1258:	00 0c       	add	r0, r0
    125a:	99 0b       	sbc	r25, r25
    125c:	02 c0       	rjmp	.+4      	; 0x1262 <u8g2_font_draw_glyph+0x34>
    125e:	80 e0       	ldi	r24, 0x00	; 0
    1260:	90 e0       	ldi	r25, 0x00	; 0
    1262:	df 91       	pop	r29
    1264:	cf 91       	pop	r28
    1266:	08 95       	ret

00001268 <u8g2_DrawGlyph>:
    1268:	cf 92       	push	r12
    126a:	df 92       	push	r13
    126c:	ef 92       	push	r14
    126e:	ff 92       	push	r15
    1270:	0f 93       	push	r16
    1272:	1f 93       	push	r17
    1274:	cf 93       	push	r28
    1276:	df 93       	push	r29
    1278:	ec 01       	movw	r28, r24
    127a:	8b 01       	movw	r16, r22
    127c:	7a 01       	movw	r14, r20
    127e:	69 01       	movw	r12, r18
    1280:	fc 01       	movw	r30, r24
    1282:	ea 5a       	subi	r30, 0xAA	; 170
    1284:	ff 4f       	sbci	r31, 0xFF	; 255
    1286:	80 81       	ld	r24, Z
    1288:	81 30       	cpi	r24, 0x01	; 1
    128a:	89 f0       	breq	.+34     	; 0x12ae <u8g2_DrawGlyph+0x46>
    128c:	28 f0       	brcs	.+10     	; 0x1298 <u8g2_DrawGlyph+0x30>
    128e:	82 30       	cpi	r24, 0x02	; 2
    1290:	c9 f0       	breq	.+50     	; 0x12c4 <u8g2_DrawGlyph+0x5c>
    1292:	83 30       	cpi	r24, 0x03	; 3
    1294:	11 f1       	breq	.+68     	; 0x12da <u8g2_DrawGlyph+0x72>
    1296:	2b c0       	rjmp	.+86     	; 0x12ee <u8g2_DrawGlyph+0x86>
    1298:	fe 01       	movw	r30, r28
    129a:	ea 5b       	subi	r30, 0xBA	; 186
    129c:	ff 4f       	sbci	r31, 0xFF	; 255
    129e:	01 90       	ld	r0, Z+
    12a0:	f0 81       	ld	r31, Z
    12a2:	e0 2d       	mov	r30, r0
    12a4:	ce 01       	movw	r24, r28
    12a6:	09 95       	icall
    12a8:	e8 0e       	add	r14, r24
    12aa:	f9 1e       	adc	r15, r25
    12ac:	20 c0       	rjmp	.+64     	; 0x12ee <u8g2_DrawGlyph+0x86>
    12ae:	fe 01       	movw	r30, r28
    12b0:	ea 5b       	subi	r30, 0xBA	; 186
    12b2:	ff 4f       	sbci	r31, 0xFF	; 255
    12b4:	01 90       	ld	r0, Z+
    12b6:	f0 81       	ld	r31, Z
    12b8:	e0 2d       	mov	r30, r0
    12ba:	ce 01       	movw	r24, r28
    12bc:	09 95       	icall
    12be:	08 1b       	sub	r16, r24
    12c0:	19 0b       	sbc	r17, r25
    12c2:	15 c0       	rjmp	.+42     	; 0x12ee <u8g2_DrawGlyph+0x86>
    12c4:	fe 01       	movw	r30, r28
    12c6:	ea 5b       	subi	r30, 0xBA	; 186
    12c8:	ff 4f       	sbci	r31, 0xFF	; 255
    12ca:	01 90       	ld	r0, Z+
    12cc:	f0 81       	ld	r31, Z
    12ce:	e0 2d       	mov	r30, r0
    12d0:	ce 01       	movw	r24, r28
    12d2:	09 95       	icall
    12d4:	e8 1a       	sub	r14, r24
    12d6:	f9 0a       	sbc	r15, r25
    12d8:	0a c0       	rjmp	.+20     	; 0x12ee <u8g2_DrawGlyph+0x86>
    12da:	fe 01       	movw	r30, r28
    12dc:	ea 5b       	subi	r30, 0xBA	; 186
    12de:	ff 4f       	sbci	r31, 0xFF	; 255
    12e0:	01 90       	ld	r0, Z+
    12e2:	f0 81       	ld	r31, Z
    12e4:	e0 2d       	mov	r30, r0
    12e6:	ce 01       	movw	r24, r28
    12e8:	09 95       	icall
    12ea:	08 0f       	add	r16, r24
    12ec:	19 1f       	adc	r17, r25
    12ee:	96 01       	movw	r18, r12
    12f0:	a7 01       	movw	r20, r14
    12f2:	b8 01       	movw	r22, r16
    12f4:	ce 01       	movw	r24, r28
    12f6:	0e 94 17 09 	call	0x122e	; 0x122e <u8g2_font_draw_glyph>
    12fa:	df 91       	pop	r29
    12fc:	cf 91       	pop	r28
    12fe:	1f 91       	pop	r17
    1300:	0f 91       	pop	r16
    1302:	ff 90       	pop	r15
    1304:	ef 90       	pop	r14
    1306:	df 90       	pop	r13
    1308:	cf 90       	pop	r12
    130a:	08 95       	ret

0000130c <u8g2_draw_string>:
    130c:	af 92       	push	r10
    130e:	bf 92       	push	r11
    1310:	cf 92       	push	r12
    1312:	df 92       	push	r13
    1314:	ef 92       	push	r14
    1316:	ff 92       	push	r15
    1318:	0f 93       	push	r16
    131a:	1f 93       	push	r17
    131c:	cf 93       	push	r28
    131e:	df 93       	push	r29
    1320:	ec 01       	movw	r28, r24
    1322:	5b 01       	movw	r10, r22
    1324:	6a 01       	movw	r12, r20
    1326:	89 01       	movw	r16, r18
    1328:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <u8x8_utf8_init>
    132c:	e1 2c       	mov	r14, r1
    132e:	f1 2c       	mov	r15, r1
    1330:	ea 81       	ldd	r30, Y+2	; 0x02
    1332:	fb 81       	ldd	r31, Y+3	; 0x03
    1334:	d8 01       	movw	r26, r16
    1336:	6c 91       	ld	r22, X
    1338:	ce 01       	movw	r24, r28
    133a:	09 95       	icall
    133c:	8f 3f       	cpi	r24, 0xFF	; 255
    133e:	bf ef       	ldi	r27, 0xFF	; 255
    1340:	9b 07       	cpc	r25, r27
    1342:	39 f1       	breq	.+78     	; 0x1392 <u8g2_draw_string+0x86>
    1344:	0f 5f       	subi	r16, 0xFF	; 255
    1346:	1f 4f       	sbci	r17, 0xFF	; 255
    1348:	8e 3f       	cpi	r24, 0xFE	; 254
    134a:	2f ef       	ldi	r18, 0xFF	; 255
    134c:	92 07       	cpc	r25, r18
    134e:	81 f3       	breq	.-32     	; 0x1330 <u8g2_draw_string+0x24>
    1350:	9c 01       	movw	r18, r24
    1352:	a6 01       	movw	r20, r12
    1354:	b5 01       	movw	r22, r10
    1356:	ce 01       	movw	r24, r28
    1358:	0e 94 34 09 	call	0x1268	; 0x1268 <u8g2_DrawGlyph>
    135c:	9c 01       	movw	r18, r24
    135e:	fe 01       	movw	r30, r28
    1360:	ea 5a       	subi	r30, 0xAA	; 170
    1362:	ff 4f       	sbci	r31, 0xFF	; 255
    1364:	90 81       	ld	r25, Z
    1366:	91 30       	cpi	r25, 0x01	; 1
    1368:	49 f0       	breq	.+18     	; 0x137c <u8g2_draw_string+0x70>
    136a:	28 f0       	brcs	.+10     	; 0x1376 <u8g2_draw_string+0x6a>
    136c:	92 30       	cpi	r25, 0x02	; 2
    136e:	49 f0       	breq	.+18     	; 0x1382 <u8g2_draw_string+0x76>
    1370:	93 30       	cpi	r25, 0x03	; 3
    1372:	51 f0       	breq	.+20     	; 0x1388 <u8g2_draw_string+0x7c>
    1374:	0b c0       	rjmp	.+22     	; 0x138c <u8g2_draw_string+0x80>
    1376:	a2 0e       	add	r10, r18
    1378:	b3 1e       	adc	r11, r19
    137a:	08 c0       	rjmp	.+16     	; 0x138c <u8g2_draw_string+0x80>
    137c:	c2 0e       	add	r12, r18
    137e:	d3 1e       	adc	r13, r19
    1380:	05 c0       	rjmp	.+10     	; 0x138c <u8g2_draw_string+0x80>
    1382:	a2 1a       	sub	r10, r18
    1384:	b3 0a       	sbc	r11, r19
    1386:	02 c0       	rjmp	.+4      	; 0x138c <u8g2_draw_string+0x80>
    1388:	c2 1a       	sub	r12, r18
    138a:	d3 0a       	sbc	r13, r19
    138c:	e2 0e       	add	r14, r18
    138e:	f3 1e       	adc	r15, r19
    1390:	cf cf       	rjmp	.-98     	; 0x1330 <u8g2_draw_string+0x24>
    1392:	c7 01       	movw	r24, r14
    1394:	df 91       	pop	r29
    1396:	cf 91       	pop	r28
    1398:	1f 91       	pop	r17
    139a:	0f 91       	pop	r16
    139c:	ff 90       	pop	r15
    139e:	ef 90       	pop	r14
    13a0:	df 90       	pop	r13
    13a2:	cf 90       	pop	r12
    13a4:	bf 90       	pop	r11
    13a6:	af 90       	pop	r10
    13a8:	08 95       	ret

000013aa <u8g2_DrawStr>:
    13aa:	ef ec       	ldi	r30, 0xCF	; 207
    13ac:	fc e0       	ldi	r31, 0x0C	; 12
    13ae:	dc 01       	movw	r26, r24
    13b0:	13 96       	adiw	r26, 0x03	; 3
    13b2:	fc 93       	st	X, r31
    13b4:	ee 93       	st	-X, r30
    13b6:	12 97       	sbiw	r26, 0x02	; 2
    13b8:	0e 94 86 09 	call	0x130c	; 0x130c <u8g2_draw_string>
    13bc:	08 95       	ret

000013be <u8g2_UpdateRefHeight>:
    13be:	fc 01       	movw	r30, r24
    13c0:	ec 5b       	subi	r30, 0xBC	; 188
    13c2:	ff 4f       	sbci	r31, 0xFF	; 255
    13c4:	20 81       	ld	r18, Z
    13c6:	31 81       	ldd	r19, Z+1	; 0x01
    13c8:	23 2b       	or	r18, r19
    13ca:	e1 f1       	breq	.+120    	; 0x1444 <u8g2_UpdateRefHeight+0x86>
    13cc:	b0 96       	adiw	r30, 0x20	; 32
    13ce:	20 81       	ld	r18, Z
    13d0:	3c 96       	adiw	r30, 0x0c	; 12
    13d2:	20 83       	st	Z, r18
    13d4:	3b 97       	sbiw	r30, 0x0b	; 11
    13d6:	40 81       	ld	r20, Z
    13d8:	3c 96       	adiw	r30, 0x0c	; 12
    13da:	40 83       	st	Z, r20
    13dc:	32 97       	sbiw	r30, 0x02	; 2
    13de:	30 81       	ld	r19, Z
    13e0:	33 23       	and	r19, r19
    13e2:	81 f1       	breq	.+96     	; 0x1444 <u8g2_UpdateRefHeight+0x86>
    13e4:	31 30       	cpi	r19, 0x01	; 1
    13e6:	79 f4       	brne	.+30     	; 0x1406 <u8g2_UpdateRefHeight+0x48>
    13e8:	39 97       	sbiw	r30, 0x09	; 9
    13ea:	30 81       	ld	r19, Z
    13ec:	23 17       	cp	r18, r19
    13ee:	14 f4       	brge	.+4      	; 0x13f4 <u8g2_UpdateRefHeight+0x36>
    13f0:	3a 96       	adiw	r30, 0x0a	; 10
    13f2:	30 83       	st	Z, r19
    13f4:	fc 01       	movw	r30, r24
    13f6:	e9 59       	subi	r30, 0x99	; 153
    13f8:	ff 4f       	sbci	r31, 0xFF	; 255
    13fa:	20 81       	ld	r18, Z
    13fc:	24 17       	cp	r18, r20
    13fe:	14 f5       	brge	.+68     	; 0x1444 <u8g2_UpdateRefHeight+0x86>
    1400:	3a 96       	adiw	r30, 0x0a	; 10
    1402:	20 83       	st	Z, r18
    1404:	08 95       	ret
    1406:	02 2e       	mov	r0, r18
    1408:	00 0c       	add	r0, r0
    140a:	33 0b       	sbc	r19, r19
    140c:	fc 01       	movw	r30, r24
    140e:	ef 59       	subi	r30, 0x9F	; 159
    1410:	ff 4f       	sbci	r31, 0xFF	; 255
    1412:	e0 81       	ld	r30, Z
    1414:	dc 01       	movw	r26, r24
    1416:	ad 59       	subi	r26, 0x9D	; 157
    1418:	bf 4f       	sbci	r27, 0xFF	; 255
    141a:	5c 91       	ld	r21, X
    141c:	65 2f       	mov	r22, r21
    141e:	05 2e       	mov	r0, r21
    1420:	00 0c       	add	r0, r0
    1422:	77 0b       	sbc	r23, r23
    1424:	6e 0f       	add	r22, r30
    1426:	71 1d       	adc	r23, r1
    1428:	e7 fd       	sbrc	r30, 7
    142a:	7a 95       	dec	r23
    142c:	26 17       	cp	r18, r22
    142e:	37 07       	cpc	r19, r23
    1430:	1c f4       	brge	.+6      	; 0x1438 <u8g2_UpdateRefHeight+0x7a>
    1432:	1d 96       	adiw	r26, 0x0d	; 13
    1434:	e5 0f       	add	r30, r21
    1436:	ec 93       	st	X, r30
    1438:	54 17       	cp	r21, r20
    143a:	24 f4       	brge	.+8      	; 0x1444 <u8g2_UpdateRefHeight+0x86>
    143c:	fc 01       	movw	r30, r24
    143e:	ef 58       	subi	r30, 0x8F	; 143
    1440:	ff 4f       	sbci	r31, 0xFF	; 255
    1442:	50 83       	st	Z, r21
    1444:	08 95       	ret

00001446 <u8g2_SetFontRefHeightText>:
    1446:	fc 01       	movw	r30, r24
    1448:	e1 59       	subi	r30, 0x91	; 145
    144a:	ff 4f       	sbci	r31, 0xFF	; 255
    144c:	10 82       	st	Z, r1
    144e:	0e 94 df 09 	call	0x13be	; 0x13be <u8g2_UpdateRefHeight>
    1452:	08 95       	ret

00001454 <u8g2_SetFontPosBaseline>:
    1454:	8a 5b       	subi	r24, 0xBA	; 186
    1456:	9f 4f       	sbci	r25, 0xFF	; 255
    1458:	2a e3       	ldi	r18, 0x3A	; 58
    145a:	36 e0       	ldi	r19, 0x06	; 6
    145c:	fc 01       	movw	r30, r24
    145e:	31 83       	std	Z+1, r19	; 0x01
    1460:	20 83       	st	Z, r18
    1462:	08 95       	ret

00001464 <u8g2_SetFontPosTop>:
    1464:	8a 5b       	subi	r24, 0xBA	; 186
    1466:	9f 4f       	sbci	r25, 0xFF	; 255
    1468:	2d e3       	ldi	r18, 0x3D	; 61
    146a:	36 e0       	ldi	r19, 0x06	; 6
    146c:	fc 01       	movw	r30, r24
    146e:	31 83       	std	Z+1, r19	; 0x01
    1470:	20 83       	st	Z, r18
    1472:	08 95       	ret

00001474 <u8g2_SetFont>:
}

/*===============================================*/

void u8g2_SetFont(u8g2_t *u8g2, const uint8_t  *font)
{
    1474:	cf 93       	push	r28
    1476:	df 93       	push	r29
  if ( u8g2->font != font )
    1478:	fc 01       	movw	r30, r24
    147a:	ec 5b       	subi	r30, 0xBC	; 188
    147c:	ff 4f       	sbci	r31, 0xFF	; 255
    147e:	20 81       	ld	r18, Z
    1480:	31 81       	ldd	r19, Z+1	; 0x01
    1482:	26 17       	cp	r18, r22
    1484:	37 07       	cpc	r19, r23
    1486:	51 f0       	breq	.+20     	; 0x149c <u8g2_SetFont+0x28>
    1488:	ec 01       	movw	r28, r24
  {
//#ifdef  __unix__
//	u8g2->last_font_data = NULL;
//	u8g2->last_unicode = 0x0ffff;
//#endif 
    u8g2->font = font;
    148a:	71 83       	std	Z+1, r23	; 0x01
    148c:	60 83       	st	Z, r22
    u8g2_read_font_info(&(u8g2->font_info), font);
    148e:	89 5a       	subi	r24, 0xA9	; 169
    1490:	9f 4f       	sbci	r25, 0xFF	; 255
    1492:	0e 94 46 06 	call	0xc8c	; 0xc8c <u8g2_read_font_info>
    u8g2_UpdateRefHeight(u8g2);
    1496:	ce 01       	movw	r24, r28
    1498:	0e 94 df 09 	call	0x13be	; 0x13be <u8g2_UpdateRefHeight>
    /* u8g2_SetFontPosBaseline(u8g2); */ /* removed with issue 195 */
  }
}
    149c:	df 91       	pop	r29
    149e:	cf 91       	pop	r28
    14a0:	08 95       	ret

000014a2 <u8g2_clip_intersection2>:
  will return 0 if there is no intersection and if a > b

*/

static uint8_t u8g2_clip_intersection2(u8g2_uint_t *ap, u8g2_uint_t *len, u8g2_uint_t c, u8g2_uint_t d)
{
    14a2:	cf 93       	push	r28
    14a4:	df 93       	push	r29
  u8g2_uint_t a = *ap;
    14a6:	ec 01       	movw	r28, r24
    14a8:	a8 81       	ld	r26, Y
    14aa:	b9 81       	ldd	r27, Y+1	; 0x01
  u8g2_uint_t b;
  b  = a;
  b += *len;
    14ac:	eb 01       	movw	r28, r22
    14ae:	e8 81       	ld	r30, Y
    14b0:	f9 81       	ldd	r31, Y+1	; 0x01
    14b2:	ea 0f       	add	r30, r26
    14b4:	fb 1f       	adc	r31, r27
  /* be removed completly (be aware about memory curruption for wrong */
  /* arguments) or return 0 for a>b (will lead to skipped lines for wrong */
  /* arguments) */  
  
  /* removing the following if clause completly may lead to memory corruption of a>b */
  if ( a > b )
    14b6:	ea 17       	cp	r30, r26
    14b8:	fb 07       	cpc	r31, r27
    14ba:	38 f4       	brcc	.+14     	; 0x14ca <u8g2_clip_intersection2+0x28>
  {    
    /* replacing this if with a simple "return 0;" will not handle the case with negative a */    
    if ( a < d )
    14bc:	a2 17       	cp	r26, r18
    14be:	b3 07       	cpc	r27, r19
    14c0:	18 f4       	brcc	.+6      	; 0x14c8 <u8g2_clip_intersection2+0x26>
    {
      b = d;
      b--;
    14c2:	f9 01       	movw	r30, r18
    14c4:	31 97       	sbiw	r30, 0x01	; 1
    14c6:	01 c0       	rjmp	.+2      	; 0x14ca <u8g2_clip_intersection2+0x28>
    }
    else
    {
      a = c;
    14c8:	da 01       	movw	r26, r20
    }
  }
  
  /* from now on, the asumption a <= b is ok */
  
  if ( a >= d )
    14ca:	a2 17       	cp	r26, r18
    14cc:	b3 07       	cpc	r27, r19
    14ce:	a8 f4       	brcc	.+42     	; 0x14fa <u8g2_clip_intersection2+0x58>
    return 0;
  if ( b <= c )
    14d0:	4e 17       	cp	r20, r30
    14d2:	5f 07       	cpc	r21, r31
    14d4:	a0 f4       	brcc	.+40     	; 0x14fe <u8g2_clip_intersection2+0x5c>
    return 0;
  if ( a < c )		
    14d6:	a4 17       	cp	r26, r20
    14d8:	b5 07       	cpc	r27, r21
    14da:	08 f0       	brcs	.+2      	; 0x14de <u8g2_clip_intersection2+0x3c>
    14dc:	ad 01       	movw	r20, r26
    a = c;
  if ( b > d )
    14de:	2e 17       	cp	r18, r30
    14e0:	3f 07       	cpc	r19, r31
    14e2:	08 f0       	brcs	.+2      	; 0x14e6 <u8g2_clip_intersection2+0x44>
    14e4:	9f 01       	movw	r18, r30
    b = d;
  
  *ap = a;
    14e6:	fc 01       	movw	r30, r24
    14e8:	51 83       	std	Z+1, r21	; 0x01
    14ea:	40 83       	st	Z, r20
  b -= a;
    14ec:	24 1b       	sub	r18, r20
    14ee:	35 0b       	sbc	r19, r21
  *len = b;
    14f0:	eb 01       	movw	r28, r22
    14f2:	39 83       	std	Y+1, r19	; 0x01
    14f4:	28 83       	st	Y, r18
  return 1;
    14f6:	81 e0       	ldi	r24, 0x01	; 1
    14f8:	03 c0       	rjmp	.+6      	; 0x1500 <u8g2_clip_intersection2+0x5e>
  }
  
  /* from now on, the asumption a <= b is ok */
  
  if ( a >= d )
    return 0;
    14fa:	80 e0       	ldi	r24, 0x00	; 0
    14fc:	01 c0       	rjmp	.+2      	; 0x1500 <u8g2_clip_intersection2+0x5e>
  if ( b <= c )
    return 0;
    14fe:	80 e0       	ldi	r24, 0x00	; 0
  
  *ap = a;
  b -= a;
  *len = b;
  return 1;
}
    1500:	df 91       	pop	r29
    1502:	cf 91       	pop	r28
    1504:	08 95       	ret

00001506 <u8g2_draw_hv_line_2dir>:
  This function first adjusts the y position to the local buffer. Then it
  will clip the line and call u8g2_draw_low_level_hv_line()

*/
void u8g2_draw_hv_line_2dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
    1506:	0f 93       	push	r16

  /* clipping happens before the display rotation */

  /* transform to pixel buffer coordinates */
  y -= u8g2->pixel_curr_row;
    1508:	dc 01       	movw	r26, r24
    150a:	9a 96       	adiw	r26, 0x2a	; 42
    150c:	ed 91       	ld	r30, X+
    150e:	fc 91       	ld	r31, X
    1510:	9b 97       	sbiw	r26, 0x2b	; 43
    1512:	4e 1b       	sub	r20, r30
    1514:	5f 0b       	sbc	r21, r31
  
  u8g2->ll_hvline(u8g2, x, y, len, dir);
    1516:	5e 96       	adiw	r26, 0x1e	; 30
    1518:	ed 91       	ld	r30, X+
    151a:	fc 91       	ld	r31, X
    151c:	5f 97       	sbiw	r26, 0x1f	; 31
    151e:	09 95       	icall
}
    1520:	0f 91       	pop	r16
    1522:	08 95       	ret

00001524 <u8g2_DrawHVLine>:
  This function should be called by the user.
  
  "dir" may have 4 directions: 0 (left to right), 1, 2, 3 (down up)
*/
void u8g2_DrawHVLine(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
    1524:	ef 92       	push	r14
    1526:	ff 92       	push	r15
    1528:	0f 93       	push	r16
    152a:	1f 93       	push	r17
    152c:	cf 93       	push	r28
    152e:	df 93       	push	r29
    1530:	00 d0       	rcall	.+0      	; 0x1532 <u8g2_DrawHVLine+0xe>
    1532:	00 d0       	rcall	.+0      	; 0x1534 <u8g2_DrawHVLine+0x10>
    1534:	00 d0       	rcall	.+0      	; 0x1536 <u8g2_DrawHVLine+0x12>
    1536:	cd b7       	in	r28, 0x3d	; 61
    1538:	de b7       	in	r29, 0x3e	; 62
    153a:	7a 83       	std	Y+2, r23	; 0x02
    153c:	69 83       	std	Y+1, r22	; 0x01
    153e:	5c 83       	std	Y+4, r21	; 0x04
    1540:	4b 83       	std	Y+3, r20	; 0x03
    1542:	3e 83       	std	Y+6, r19	; 0x06
    1544:	2d 83       	std	Y+5, r18	; 0x05
  /* Make a call to the callback function (e.g. u8g2_draw_l90_r0). */
  /* The callback may rotate the hv line */
  /* after rotation this will call u8g2_draw_hv_line_4dir() */
  
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  if ( u8g2->is_page_clip_window_intersection != 0 )
    1546:	fc 01       	movw	r30, r24
    1548:	e2 59       	subi	r30, 0x92	; 146
    154a:	ff 4f       	sbci	r31, 0xFF	; 255
    154c:	20 81       	ld	r18, Z
    154e:	22 23       	and	r18, r18
    1550:	09 f4       	brne	.+2      	; 0x1554 <u8g2_DrawHVLine+0x30>
    1552:	74 c0       	rjmp	.+232    	; 0x163c <u8g2_DrawHVLine+0x118>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
    if ( len != 0 )
    1554:	2d 81       	ldd	r18, Y+5	; 0x05
    1556:	3e 81       	ldd	r19, Y+6	; 0x06
    1558:	21 15       	cp	r18, r1
    155a:	31 05       	cpc	r19, r1
    155c:	09 f4       	brne	.+2      	; 0x1560 <u8g2_DrawHVLine+0x3c>
    155e:	6e c0       	rjmp	.+220    	; 0x163c <u8g2_DrawHVLine+0x118>
    {
    
      /* convert to two directions */    
      if ( len > 1 )
    1560:	22 30       	cpi	r18, 0x02	; 2
    1562:	31 05       	cpc	r19, r1
    1564:	b0 f0       	brcs	.+44     	; 0x1592 <u8g2_DrawHVLine+0x6e>
      {
	if ( dir == 2 )
    1566:	02 30       	cpi	r16, 0x02	; 2
    1568:	41 f4       	brne	.+16     	; 0x157a <u8g2_DrawHVLine+0x56>
	{
	  x -= len;
    156a:	62 1b       	sub	r22, r18
    156c:	73 0b       	sbc	r23, r19
    156e:	9b 01       	movw	r18, r22
	  x++;
    1570:	2f 5f       	subi	r18, 0xFF	; 255
    1572:	3f 4f       	sbci	r19, 0xFF	; 255
    1574:	3a 83       	std	Y+2, r19	; 0x02
    1576:	29 83       	std	Y+1, r18	; 0x01
    1578:	0c c0       	rjmp	.+24     	; 0x1592 <u8g2_DrawHVLine+0x6e>
	}
	else if ( dir == 3 )
    157a:	03 30       	cpi	r16, 0x03	; 3
    157c:	51 f4       	brne	.+20     	; 0x1592 <u8g2_DrawHVLine+0x6e>
	{
	  y -= len;
    157e:	4b 81       	ldd	r20, Y+3	; 0x03
    1580:	5c 81       	ldd	r21, Y+4	; 0x04
    1582:	da 01       	movw	r26, r20
    1584:	a2 1b       	sub	r26, r18
    1586:	b3 0b       	sbc	r27, r19
    1588:	9d 01       	movw	r18, r26
	  y++;
    158a:	2f 5f       	subi	r18, 0xFF	; 255
    158c:	3f 4f       	sbci	r19, 0xFF	; 255
    158e:	3c 83       	std	Y+4, r19	; 0x04
    1590:	2b 83       	std	Y+3, r18	; 0x03
    1592:	7c 01       	movw	r14, r24
	}
      }
      dir &= 1;  
      
      /* clip against the user window */
      if ( dir == 0 )
    1594:	10 2f       	mov	r17, r16
    1596:	11 70       	andi	r17, 0x01	; 1
    1598:	00 fd       	sbrc	r16, 0
    159a:	1d c0       	rjmp	.+58     	; 0x15d6 <u8g2_DrawHVLine+0xb2>
      {
	if ( y < u8g2->user_y0 )
    159c:	fc 01       	movw	r30, r24
    159e:	20 ad       	ldd	r18, Z+56	; 0x38
    15a0:	31 ad       	ldd	r19, Z+57	; 0x39
    15a2:	8b 81       	ldd	r24, Y+3	; 0x03
    15a4:	9c 81       	ldd	r25, Y+4	; 0x04
    15a6:	82 17       	cp	r24, r18
    15a8:	93 07       	cpc	r25, r19
    15aa:	08 f4       	brcc	.+2      	; 0x15ae <u8g2_DrawHVLine+0x8a>
    15ac:	47 c0       	rjmp	.+142    	; 0x163c <u8g2_DrawHVLine+0x118>
	  return;
	if ( y >= u8g2->user_y1 )
    15ae:	22 ad       	ldd	r18, Z+58	; 0x3a
    15b0:	33 ad       	ldd	r19, Z+59	; 0x3b
    15b2:	82 17       	cp	r24, r18
    15b4:	93 07       	cpc	r25, r19
    15b6:	08 f0       	brcs	.+2      	; 0x15ba <u8g2_DrawHVLine+0x96>
    15b8:	41 c0       	rjmp	.+130    	; 0x163c <u8g2_DrawHVLine+0x118>
	  return;
	if ( u8g2_clip_intersection2(&x, &len, u8g2->user_x0, u8g2->user_x1) == 0 )
    15ba:	26 a9       	ldd	r18, Z+54	; 0x36
    15bc:	37 a9       	ldd	r19, Z+55	; 0x37
    15be:	44 a9       	ldd	r20, Z+52	; 0x34
    15c0:	55 a9       	ldd	r21, Z+53	; 0x35
    15c2:	be 01       	movw	r22, r28
    15c4:	6b 5f       	subi	r22, 0xFB	; 251
    15c6:	7f 4f       	sbci	r23, 0xFF	; 255
    15c8:	ce 01       	movw	r24, r28
    15ca:	01 96       	adiw	r24, 0x01	; 1
    15cc:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <u8g2_clip_intersection2>
    15d0:	81 11       	cpse	r24, r1
    15d2:	23 c0       	rjmp	.+70     	; 0x161a <u8g2_DrawHVLine+0xf6>
    15d4:	33 c0       	rjmp	.+102    	; 0x163c <u8g2_DrawHVLine+0x118>
	  return;
      }
      else
      {
	if ( x < u8g2->user_x0 )
    15d6:	dc 01       	movw	r26, r24
    15d8:	d4 96       	adiw	r26, 0x34	; 52
    15da:	2d 91       	ld	r18, X+
    15dc:	3c 91       	ld	r19, X
    15de:	d5 97       	sbiw	r26, 0x35	; 53
    15e0:	89 81       	ldd	r24, Y+1	; 0x01
    15e2:	9a 81       	ldd	r25, Y+2	; 0x02
    15e4:	82 17       	cp	r24, r18
    15e6:	93 07       	cpc	r25, r19
    15e8:	48 f1       	brcs	.+82     	; 0x163c <u8g2_DrawHVLine+0x118>
	  return;
	if ( x >= u8g2->user_x1 )
    15ea:	d6 96       	adiw	r26, 0x36	; 54
    15ec:	2d 91       	ld	r18, X+
    15ee:	3c 91       	ld	r19, X
    15f0:	d7 97       	sbiw	r26, 0x37	; 55
    15f2:	82 17       	cp	r24, r18
    15f4:	93 07       	cpc	r25, r19
    15f6:	10 f5       	brcc	.+68     	; 0x163c <u8g2_DrawHVLine+0x118>
	  return;
	if ( u8g2_clip_intersection2(&y, &len, u8g2->user_y0, u8g2->user_y1) == 0 )
    15f8:	da 96       	adiw	r26, 0x3a	; 58
    15fa:	2d 91       	ld	r18, X+
    15fc:	3c 91       	ld	r19, X
    15fe:	db 97       	sbiw	r26, 0x3b	; 59
    1600:	d8 96       	adiw	r26, 0x38	; 56
    1602:	4d 91       	ld	r20, X+
    1604:	5c 91       	ld	r21, X
    1606:	d9 97       	sbiw	r26, 0x39	; 57
    1608:	be 01       	movw	r22, r28
    160a:	6b 5f       	subi	r22, 0xFB	; 251
    160c:	7f 4f       	sbci	r23, 0xFF	; 255
    160e:	ce 01       	movw	r24, r28
    1610:	03 96       	adiw	r24, 0x03	; 3
    1612:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <u8g2_clip_intersection2>
    1616:	88 23       	and	r24, r24
    1618:	89 f0       	breq	.+34     	; 0x163c <u8g2_DrawHVLine+0x118>
	  return;
      }
      
      
      u8g2->cb->draw_l90(u8g2, x, y, len, dir);
    161a:	d7 01       	movw	r26, r14
    161c:	90 96       	adiw	r26, 0x20	; 32
    161e:	ed 91       	ld	r30, X+
    1620:	fc 91       	ld	r31, X
    1622:	91 97       	sbiw	r26, 0x21	; 33
    1624:	04 80       	ldd	r0, Z+4	; 0x04
    1626:	f5 81       	ldd	r31, Z+5	; 0x05
    1628:	e0 2d       	mov	r30, r0
    162a:	2d 81       	ldd	r18, Y+5	; 0x05
    162c:	3e 81       	ldd	r19, Y+6	; 0x06
    162e:	4b 81       	ldd	r20, Y+3	; 0x03
    1630:	5c 81       	ldd	r21, Y+4	; 0x04
    1632:	69 81       	ldd	r22, Y+1	; 0x01
    1634:	7a 81       	ldd	r23, Y+2	; 0x02
    1636:	01 2f       	mov	r16, r17
    1638:	c7 01       	movw	r24, r14
    163a:	09 95       	icall
    }
}
    163c:	26 96       	adiw	r28, 0x06	; 6
    163e:	0f b6       	in	r0, 0x3f	; 63
    1640:	f8 94       	cli
    1642:	de bf       	out	0x3e, r29	; 62
    1644:	0f be       	out	0x3f, r0	; 63
    1646:	cd bf       	out	0x3d, r28	; 61
    1648:	df 91       	pop	r29
    164a:	cf 91       	pop	r28
    164c:	1f 91       	pop	r17
    164e:	0f 91       	pop	r16
    1650:	ff 90       	pop	r15
    1652:	ef 90       	pop	r14
    1654:	08 95       	ret

00001656 <u8g2_is_intersection_decision_tree>:
  a1 and v1 are excluded
  v0 == v1 is not support end return 1
*/
uint8_t u8g2_is_intersection_decision_tree(u8g2_uint_t a0, u8g2_uint_t a1, u8g2_uint_t v0, u8g2_uint_t v1)
{
  if ( v0 < a1 )		// v0 <= a1
    1656:	46 17       	cp	r20, r22
    1658:	57 07       	cpc	r21, r23
    165a:	40 f4       	brcc	.+16     	; 0x166c <u8g2_is_intersection_decision_tree+0x16>
  {
    if ( v1 > a0 )	// v1 >= a0
    165c:	82 17       	cp	r24, r18
    165e:	93 07       	cpc	r25, r19
    1660:	68 f0       	brcs	.+26     	; 0x167c <u8g2_is_intersection_decision_tree+0x26>
    {
      return 1;
    }
    else
    {
      if ( v0 > v1 )	// v0 > v1
    1662:	24 17       	cp	r18, r20
    1664:	35 07       	cpc	r19, r21
    1666:	60 f4       	brcc	.+24     	; 0x1680 <u8g2_is_intersection_decision_tree+0x2a>
      {
	return 1;
    1668:	81 e0       	ldi	r24, 0x01	; 1
    166a:	08 95       	ret
      }
    }
  }
  else
  {
    if ( v1 > a0 )	// v1 >= a0
    166c:	82 17       	cp	r24, r18
    166e:	93 07       	cpc	r25, r19
    1670:	48 f4       	brcc	.+18     	; 0x1684 <u8g2_is_intersection_decision_tree+0x2e>
    {
      if ( v0 > v1 )	// v0 > v1
    1672:	24 17       	cp	r18, r20
    1674:	35 07       	cpc	r19, r21
    1676:	40 f4       	brcc	.+16     	; 0x1688 <u8g2_is_intersection_decision_tree+0x32>
      {
	return 1;
    1678:	81 e0       	ldi	r24, 0x01	; 1
    167a:	08 95       	ret
{
  if ( v0 < a1 )		// v0 <= a1
  {
    if ( v1 > a0 )	// v1 >= a0
    {
      return 1;
    167c:	81 e0       	ldi	r24, 0x01	; 1
    167e:	08 95       	ret
      {
	return 1;
      }
      else
      {
	return 0;
    1680:	80 e0       	ldi	r24, 0x00	; 0
    1682:	08 95       	ret
	return 0;
      }
    }
    else
    {
      return 0;
    1684:	80 e0       	ldi	r24, 0x00	; 0
    1686:	08 95       	ret
      {
	return 1;
      }
      else
      {
	return 0;
    1688:	80 e0       	ldi	r24, 0x00	; 0
    else
    {
      return 0;
    }
  }
}
    168a:	08 95       	ret

0000168c <u8g2_IsIntersection>:



/* upper limits are not included (asymetric boundaries) */
uint8_t u8g2_IsIntersection(u8g2_t *u8g2, u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t x1, u8g2_uint_t y1)
{
    168c:	cf 92       	push	r12
    168e:	df 92       	push	r13
    1690:	ef 92       	push	r14
    1692:	ff 92       	push	r15
    1694:	0f 93       	push	r16
    1696:	1f 93       	push	r17
    1698:	cf 93       	push	r28
    169a:	df 93       	push	r29
    169c:	ec 01       	movw	r28, r24
    169e:	7b 01       	movw	r14, r22
    16a0:	69 01       	movw	r12, r18
    16a2:	98 01       	movw	r18, r16
  if ( u8g2_is_intersection_decision_tree(u8g2->user_y0, u8g2->user_y1, y0, y1) == 0 )
    16a4:	6a ad       	ldd	r22, Y+58	; 0x3a
    16a6:	7b ad       	ldd	r23, Y+59	; 0x3b
    16a8:	88 ad       	ldd	r24, Y+56	; 0x38
    16aa:	99 ad       	ldd	r25, Y+57	; 0x39
    16ac:	0e 94 2b 0b 	call	0x1656	; 0x1656 <u8g2_is_intersection_decision_tree>
    16b0:	88 23       	and	r24, r24
    16b2:	41 f0       	breq	.+16     	; 0x16c4 <u8g2_IsIntersection+0x38>
    return 0; 
  
  return u8g2_is_intersection_decision_tree(u8g2->user_x0, u8g2->user_x1, x0, x1);
    16b4:	6e a9       	ldd	r22, Y+54	; 0x36
    16b6:	7f a9       	ldd	r23, Y+55	; 0x37
    16b8:	96 01       	movw	r18, r12
    16ba:	a7 01       	movw	r20, r14
    16bc:	8c a9       	ldd	r24, Y+52	; 0x34
    16be:	9d a9       	ldd	r25, Y+53	; 0x35
    16c0:	0e 94 2b 0b 	call	0x1656	; 0x1656 <u8g2_is_intersection_decision_tree>
}
    16c4:	df 91       	pop	r29
    16c6:	cf 91       	pop	r28
    16c8:	1f 91       	pop	r17
    16ca:	0f 91       	pop	r16
    16cc:	ff 90       	pop	r15
    16ce:	ef 90       	pop	r14
    16d0:	df 90       	pop	r13
    16d2:	cf 90       	pop	r12
    16d4:	08 95       	ret

000016d6 <u8g2_ll_hvline_vertical_top_lsb>:
		1: vertical line (top to bottom)
  asumption: 
    all clipping done
*/
void u8g2_ll_hvline_vertical_top_lsb(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
    16d6:	0f 93       	push	r16
    16d8:	1f 93       	push	r17
    16da:	cf 93       	push	r28
    16dc:	df 93       	push	r29
    16de:	dc 01       	movw	r26, r24
    16e0:	ca 01       	movw	r24, r20
  //assert(y >= u8g2->buf_y0);
  //assert(y < u8g2_GetU8x8(u8g2)->display_info->tile_height*8);
  
  /* bytes are vertical, lsb on top (y=0), msb at bottom (y=7) */
  bit_pos = y;		/* overflow truncate is ok here... */
  bit_pos &= 7; 	/* ... because only the lowest 3 bits are needed */
    16e2:	54 2f       	mov	r21, r20
    16e4:	57 70       	andi	r21, 0x07	; 7
  mask = 1;
  mask <<= bit_pos;
    16e6:	c1 e0       	ldi	r28, 0x01	; 1
    16e8:	d0 e0       	ldi	r29, 0x00	; 0
    16ea:	05 2e       	mov	r0, r21
    16ec:	02 c0       	rjmp	.+4      	; 0x16f2 <u8g2_ll_hvline_vertical_top_lsb+0x1c>
    16ee:	cc 0f       	add	r28, r28
    16f0:	dd 1f       	adc	r29, r29
    16f2:	0a 94       	dec	r0
    16f4:	e2 f7       	brpl	.-8      	; 0x16ee <u8g2_ll_hvline_vertical_top_lsb+0x18>
    16f6:	1c 2f       	mov	r17, r28

  or_mask = 0;
  xor_mask = 0;
  if ( u8g2->draw_color <= 1 )
    16f8:	fd 01       	movw	r30, r26
    16fa:	ec 58       	subi	r30, 0x8C	; 140
    16fc:	ff 4f       	sbci	r31, 0xFF	; 255
    16fe:	e0 81       	ld	r30, Z
    1700:	e2 30       	cpi	r30, 0x02	; 2
    1702:	10 f0       	brcs	.+4      	; 0x1708 <u8g2_ll_hvline_vertical_top_lsb+0x32>
  bit_pos = y;		/* overflow truncate is ok here... */
  bit_pos &= 7; 	/* ... because only the lowest 3 bits are needed */
  mask = 1;
  mask <<= bit_pos;

  or_mask = 0;
    1704:	40 e0       	ldi	r20, 0x00	; 0
    1706:	01 c0       	rjmp	.+2      	; 0x170a <u8g2_ll_hvline_vertical_top_lsb+0x34>
  xor_mask = 0;
  if ( u8g2->draw_color <= 1 )
    or_mask  = mask;
    1708:	4c 2f       	mov	r20, r28
  if ( u8g2->draw_color != 1 )
    170a:	e1 30       	cpi	r30, 0x01	; 1
    170c:	09 f4       	brne	.+2      	; 0x1710 <u8g2_ll_hvline_vertical_top_lsb+0x3a>
  bit_pos &= 7; 	/* ... because only the lowest 3 bits are needed */
  mask = 1;
  mask <<= bit_pos;

  or_mask = 0;
  xor_mask = 0;
    170e:	10 e0       	ldi	r17, 0x00	; 0
  if ( u8g2->draw_color != 1 )
    xor_mask = mask;


  offset = y;		/* y might be 8 or 16 bit, but we need 16 bit, so use a 16 bit variable */
  offset &= ~7;
    1710:	88 7f       	andi	r24, 0xF8	; 248
  offset *= u8g2_GetU8x8(u8g2)->display_info->tile_width;
    1712:	ed 91       	ld	r30, X+
    1714:	fc 91       	ld	r31, X
    1716:	11 97       	sbiw	r26, 0x01	; 1
    1718:	c0 89       	ldd	r28, Z+16	; 0x10
    171a:	c8 9f       	mul	r28, r24
    171c:	f0 01       	movw	r30, r0
    171e:	c9 9f       	mul	r28, r25
    1720:	f0 0d       	add	r31, r0
    1722:	11 24       	eor	r1, r1
  ptr = u8g2->tile_buf_ptr;
    1724:	92 96       	adiw	r26, 0x22	; 34
    1726:	8d 91       	ld	r24, X+
    1728:	9c 91       	ld	r25, X
    172a:	93 97       	sbiw	r26, 0x23	; 35
  ptr += offset;
  ptr += x;
    172c:	6e 0f       	add	r22, r30
    172e:	7f 1f       	adc	r23, r31
    1730:	fc 01       	movw	r30, r24
    1732:	e6 0f       	add	r30, r22
    1734:	f7 1f       	adc	r31, r23
  
  if ( dir == 0 )
    1736:	01 11       	cpse	r16, r1
    1738:	08 c0       	rjmp	.+16     	; 0x174a <u8g2_ll_hvline_vertical_top_lsb+0x74>
      do
      {
#ifdef __unix
	assert(ptr < max_ptr);
#endif
	*ptr |= or_mask;
    173a:	80 81       	ld	r24, Z
    173c:	84 2b       	or	r24, r20
	*ptr ^= xor_mask;
    173e:	81 27       	eor	r24, r17
    1740:	81 93       	st	Z+, r24
	ptr++;
	len--;
    1742:	21 50       	subi	r18, 0x01	; 1
    1744:	31 09       	sbc	r19, r1
      } while( len != 0 );
    1746:	c9 f7       	brne	.-14     	; 0x173a <u8g2_ll_hvline_vertical_top_lsb+0x64>
    1748:	21 c0       	rjmp	.+66     	; 0x178c <u8g2_ll_hvline_vertical_top_lsb+0xb6>
    do
    {
#ifdef __unix
      assert(ptr < max_ptr);
#endif
      *ptr |= or_mask;
    174a:	90 81       	ld	r25, Z
    174c:	94 2b       	or	r25, r20
      *ptr ^= xor_mask;
    174e:	91 27       	eor	r25, r17
    1750:	90 83       	st	Z, r25
      
      bit_pos++;
    1752:	5f 5f       	subi	r21, 0xFF	; 255
      bit_pos &= 7;
    1754:	57 70       	andi	r21, 0x07	; 7

      len--;
    1756:	21 50       	subi	r18, 0x01	; 1
    1758:	31 09       	sbc	r19, r1

      if ( bit_pos == 0 )
    175a:	51 11       	cpse	r21, r1
    175c:	10 c0       	rjmp	.+32     	; 0x177e <u8g2_ll_hvline_vertical_top_lsb+0xa8>
      {
	ptr+=u8g2->pixel_buf_width;	/* 6 Jan 17: Changed u8g2->width to u8g2->pixel_buf_width, issue #148 */
    175e:	96 96       	adiw	r26, 0x26	; 38
    1760:	8d 91       	ld	r24, X+
    1762:	9c 91       	ld	r25, X
    1764:	97 97       	sbiw	r26, 0x27	; 39
    1766:	e8 0f       	add	r30, r24
    1768:	f9 1f       	adc	r31, r25
		
	if ( u8g2->draw_color <= 1 )
    176a:	ed 01       	movw	r28, r26
    176c:	cc 58       	subi	r28, 0x8C	; 140
    176e:	df 4f       	sbci	r29, 0xFF	; 255
    1770:	88 81       	ld	r24, Y
    1772:	82 30       	cpi	r24, 0x02	; 2
    1774:	08 f4       	brcc	.+2      	; 0x1778 <u8g2_ll_hvline_vertical_top_lsb+0xa2>
	  or_mask  = 1;
    1776:	41 e0       	ldi	r20, 0x01	; 1
	if ( u8g2->draw_color != 1 )
    1778:	81 30       	cpi	r24, 0x01	; 1
    177a:	21 f4       	brne	.+8      	; 0x1784 <u8g2_ll_hvline_vertical_top_lsb+0xae>
    177c:	04 c0       	rjmp	.+8      	; 0x1786 <u8g2_ll_hvline_vertical_top_lsb+0xb0>
	  xor_mask = 1;
      }
      else
      {
	or_mask <<= 1;
    177e:	44 0f       	add	r20, r20
	xor_mask <<= 1;
    1780:	11 0f       	add	r17, r17
    1782:	01 c0       	rjmp	.+2      	; 0x1786 <u8g2_ll_hvline_vertical_top_lsb+0xb0>
	ptr+=u8g2->pixel_buf_width;	/* 6 Jan 17: Changed u8g2->width to u8g2->pixel_buf_width, issue #148 */
		
	if ( u8g2->draw_color <= 1 )
	  or_mask  = 1;
	if ( u8g2->draw_color != 1 )
	  xor_mask = 1;
    1784:	11 e0       	ldi	r17, 0x01	; 1
      else
      {
	or_mask <<= 1;
	xor_mask <<= 1;
      }
    } while( len != 0 );
    1786:	21 15       	cp	r18, r1
    1788:	31 05       	cpc	r19, r1
    178a:	f9 f6       	brne	.-66     	; 0x174a <u8g2_ll_hvline_vertical_top_lsb+0x74>
  }
}
    178c:	df 91       	pop	r29
    178e:	cf 91       	pop	r28
    1790:	1f 91       	pop	r17
    1792:	0f 91       	pop	r16
    1794:	08 95       	ret

00001796 <u8g2_update_dimension_common>:
  u8g2->clip_x0 = clip_x0;
  u8g2->clip_y0 = clip_y0;
  u8g2->clip_x1 = clip_x1;
  u8g2->clip_y1 = clip_y1;
  u8g2->cb->update_page_win(u8g2);
}
    1796:	cf 93       	push	r28
    1798:	df 93       	push	r29
    179a:	fc 01       	movw	r30, r24
    179c:	a0 81       	ld	r26, Z
    179e:	b1 81       	ldd	r27, Z+1	; 0x01
    17a0:	84 a1       	ldd	r24, Z+36	; 0x24
    17a2:	90 e0       	ldi	r25, 0x00	; 0
    17a4:	9c 01       	movw	r18, r24
    17a6:	22 0f       	add	r18, r18
    17a8:	33 1f       	adc	r19, r19
    17aa:	22 0f       	add	r18, r18
    17ac:	33 1f       	adc	r19, r19
    17ae:	22 0f       	add	r18, r18
    17b0:	33 1f       	adc	r19, r19
    17b2:	31 a7       	std	Z+41, r19	; 0x29
    17b4:	20 a7       	std	Z+40, r18	; 0x28
    17b6:	50 96       	adiw	r26, 0x10	; 16
    17b8:	2c 91       	ld	r18, X
    17ba:	50 97       	sbiw	r26, 0x10	; 16
    17bc:	30 e0       	ldi	r19, 0x00	; 0
    17be:	22 0f       	add	r18, r18
    17c0:	33 1f       	adc	r19, r19
    17c2:	22 0f       	add	r18, r18
    17c4:	33 1f       	adc	r19, r19
    17c6:	22 0f       	add	r18, r18
    17c8:	33 1f       	adc	r19, r19
    17ca:	37 a3       	std	Z+39, r19	; 0x27
    17cc:	26 a3       	std	Z+38, r18	; 0x26
    17ce:	75 a1       	ldd	r23, Z+37	; 0x25
    17d0:	27 2f       	mov	r18, r23
    17d2:	30 e0       	ldi	r19, 0x00	; 0
    17d4:	a9 01       	movw	r20, r18
    17d6:	44 0f       	add	r20, r20
    17d8:	55 1f       	adc	r21, r21
    17da:	44 0f       	add	r20, r20
    17dc:	55 1f       	adc	r21, r21
    17de:	44 0f       	add	r20, r20
    17e0:	55 1f       	adc	r21, r21
    17e2:	53 a7       	std	Z+43, r21	; 0x2b
    17e4:	42 a7       	std	Z+42, r20	; 0x2a
    17e6:	28 0f       	add	r18, r24
    17e8:	39 1f       	adc	r19, r25
    17ea:	51 96       	adiw	r26, 0x11	; 17
    17ec:	6c 91       	ld	r22, X
    17ee:	51 97       	sbiw	r26, 0x11	; 17
    17f0:	c6 2f       	mov	r28, r22
    17f2:	d0 e0       	ldi	r29, 0x00	; 0
    17f4:	c2 17       	cp	r28, r18
    17f6:	d3 07       	cpc	r29, r19
    17f8:	18 f4       	brcc	.+6      	; 0x1800 <u8g2_update_dimension_common+0x6a>
    17fa:	ce 01       	movw	r24, r28
    17fc:	87 1b       	sub	r24, r23
    17fe:	91 09       	sbc	r25, r1
    1800:	88 0f       	add	r24, r24
    1802:	99 1f       	adc	r25, r25
    1804:	88 0f       	add	r24, r24
    1806:	99 1f       	adc	r25, r25
    1808:	88 0f       	add	r24, r24
    180a:	99 1f       	adc	r25, r25
    180c:	55 a7       	std	Z+45, r21	; 0x2d
    180e:	44 a7       	std	Z+44, r20	; 0x2c
    1810:	84 0f       	add	r24, r20
    1812:	95 1f       	adc	r25, r21
    1814:	97 a7       	std	Z+47, r25	; 0x2f
    1816:	86 a7       	std	Z+46, r24	; 0x2e
    1818:	54 96       	adiw	r26, 0x14	; 20
    181a:	8d 91       	ld	r24, X+
    181c:	9c 91       	ld	r25, X
    181e:	55 97       	sbiw	r26, 0x15	; 21
    1820:	91 ab       	std	Z+49, r25	; 0x31
    1822:	80 ab       	std	Z+48, r24	; 0x30
    1824:	56 96       	adiw	r26, 0x16	; 22
    1826:	8d 91       	ld	r24, X+
    1828:	9c 91       	ld	r25, X
    182a:	57 97       	sbiw	r26, 0x17	; 23
    182c:	93 ab       	std	Z+51, r25	; 0x33
    182e:	82 ab       	std	Z+50, r24	; 0x32
    1830:	df 91       	pop	r29
    1832:	cf 91       	pop	r28
    1834:	08 95       	ret

00001836 <u8g2_update_dimension_r0>:
    1836:	0e 94 cb 0b 	call	0x1796	; 0x1796 <u8g2_update_dimension_common>
    183a:	08 95       	ret

0000183c <u8g2_apply_clip_window>:
    183c:	0f 93       	push	r16
    183e:	1f 93       	push	r17
    1840:	cf 93       	push	r28
    1842:	df 93       	push	r29
    1844:	ec 01       	movw	r28, r24
    1846:	fc 01       	movw	r30, r24
    1848:	ee 5b       	subi	r30, 0xBE	; 190
    184a:	ff 4f       	sbci	r31, 0xFF	; 255
    184c:	00 81       	ld	r16, Z
    184e:	11 81       	ldd	r17, Z+1	; 0x01
    1850:	2e ad       	ldd	r18, Y+62	; 0x3e
    1852:	3f ad       	ldd	r19, Y+63	; 0x3f
    1854:	32 97       	sbiw	r30, 0x02	; 2
    1856:	40 81       	ld	r20, Z
    1858:	51 81       	ldd	r21, Z+1	; 0x01
    185a:	6c ad       	ldd	r22, Y+60	; 0x3c
    185c:	7d ad       	ldd	r23, Y+61	; 0x3d
    185e:	0e 94 46 0b 	call	0x168c	; 0x168c <u8g2_IsIntersection>
    1862:	81 11       	cpse	r24, r1
    1864:	04 c0       	rjmp	.+8      	; 0x186e <u8g2_apply_clip_window+0x32>
    1866:	c2 59       	subi	r28, 0x92	; 146
    1868:	df 4f       	sbci	r29, 0xFF	; 255
    186a:	18 82       	st	Y, r1
    186c:	2f c0       	rjmp	.+94     	; 0x18cc <u8g2_apply_clip_window+0x90>
    186e:	81 e0       	ldi	r24, 0x01	; 1
    1870:	fe 01       	movw	r30, r28
    1872:	e2 59       	subi	r30, 0x92	; 146
    1874:	ff 4f       	sbci	r31, 0xFF	; 255
    1876:	80 83       	st	Z, r24
    1878:	2c a9       	ldd	r18, Y+52	; 0x34
    187a:	3d a9       	ldd	r19, Y+53	; 0x35
    187c:	8c ad       	ldd	r24, Y+60	; 0x3c
    187e:	9d ad       	ldd	r25, Y+61	; 0x3d
    1880:	28 17       	cp	r18, r24
    1882:	39 07       	cpc	r19, r25
    1884:	10 f4       	brcc	.+4      	; 0x188a <u8g2_apply_clip_window+0x4e>
    1886:	9d ab       	std	Y+53, r25	; 0x35
    1888:	8c ab       	std	Y+52, r24	; 0x34
    188a:	2e a9       	ldd	r18, Y+54	; 0x36
    188c:	3f a9       	ldd	r19, Y+55	; 0x37
    188e:	8e ad       	ldd	r24, Y+62	; 0x3e
    1890:	9f ad       	ldd	r25, Y+63	; 0x3f
    1892:	82 17       	cp	r24, r18
    1894:	93 07       	cpc	r25, r19
    1896:	10 f4       	brcc	.+4      	; 0x189c <u8g2_apply_clip_window+0x60>
    1898:	9f ab       	std	Y+55, r25	; 0x37
    189a:	8e ab       	std	Y+54, r24	; 0x36
    189c:	28 ad       	ldd	r18, Y+56	; 0x38
    189e:	39 ad       	ldd	r19, Y+57	; 0x39
    18a0:	fe 01       	movw	r30, r28
    18a2:	e0 5c       	subi	r30, 0xC0	; 192
    18a4:	ff 4f       	sbci	r31, 0xFF	; 255
    18a6:	80 81       	ld	r24, Z
    18a8:	91 81       	ldd	r25, Z+1	; 0x01
    18aa:	28 17       	cp	r18, r24
    18ac:	39 07       	cpc	r19, r25
    18ae:	10 f4       	brcc	.+4      	; 0x18b4 <u8g2_apply_clip_window+0x78>
    18b0:	99 af       	std	Y+57, r25	; 0x39
    18b2:	88 af       	std	Y+56, r24	; 0x38
    18b4:	2a ad       	ldd	r18, Y+58	; 0x3a
    18b6:	3b ad       	ldd	r19, Y+59	; 0x3b
    18b8:	fe 01       	movw	r30, r28
    18ba:	ee 5b       	subi	r30, 0xBE	; 190
    18bc:	ff 4f       	sbci	r31, 0xFF	; 255
    18be:	80 81       	ld	r24, Z
    18c0:	91 81       	ldd	r25, Z+1	; 0x01
    18c2:	82 17       	cp	r24, r18
    18c4:	93 07       	cpc	r25, r19
    18c6:	10 f4       	brcc	.+4      	; 0x18cc <u8g2_apply_clip_window+0x90>
    18c8:	9b af       	std	Y+59, r25	; 0x3b
    18ca:	8a af       	std	Y+58, r24	; 0x3a
    18cc:	df 91       	pop	r29
    18ce:	cf 91       	pop	r28
    18d0:	1f 91       	pop	r17
    18d2:	0f 91       	pop	r16
    18d4:	08 95       	ret

000018d6 <u8g2_update_page_win_r0>:
    18d6:	fc 01       	movw	r30, r24
    18d8:	15 aa       	std	Z+53, r1	; 0x35
    18da:	14 aa       	std	Z+52, r1	; 0x34
    18dc:	80 a9       	ldd	r24, Z+48	; 0x30
    18de:	91 a9       	ldd	r25, Z+49	; 0x31
    18e0:	97 ab       	std	Z+55, r25	; 0x37
    18e2:	86 ab       	std	Z+54, r24	; 0x36
    18e4:	84 a5       	ldd	r24, Z+44	; 0x2c
    18e6:	95 a5       	ldd	r25, Z+45	; 0x2d
    18e8:	91 af       	std	Z+57, r25	; 0x39
    18ea:	80 af       	std	Z+56, r24	; 0x38
    18ec:	86 a5       	ldd	r24, Z+46	; 0x2e
    18ee:	97 a5       	ldd	r25, Z+47	; 0x2f
    18f0:	93 af       	std	Z+59, r25	; 0x3b
    18f2:	82 af       	std	Z+58, r24	; 0x3a
    18f4:	cf 01       	movw	r24, r30
    18f6:	0e 94 1e 0c 	call	0x183c	; 0x183c <u8g2_apply_clip_window>
    18fa:	08 95       	ret

000018fc <u8g2_draw_l90_r0>:
    18fc:	0f 93       	push	r16
    18fe:	0e 94 83 0a 	call	0x1506	; 0x1506 <u8g2_draw_hv_line_2dir>
    1902:	0f 91       	pop	r16
    1904:	08 95       	ret

00001906 <u8g2_SetMaxClipWindow>:
    1906:	dc 01       	movw	r26, r24
    1908:	dd 96       	adiw	r26, 0x3d	; 61
    190a:	1c 92       	st	X, r1
    190c:	1e 92       	st	-X, r1
    190e:	dc 97       	sbiw	r26, 0x3c	; 60
    1910:	fc 01       	movw	r30, r24
    1912:	e0 5c       	subi	r30, 0xC0	; 192
    1914:	ff 4f       	sbci	r31, 0xFF	; 255
    1916:	11 82       	std	Z+1, r1	; 0x01
    1918:	10 82       	st	Z, r1
    191a:	2f ef       	ldi	r18, 0xFF	; 255
    191c:	3f ef       	ldi	r19, 0xFF	; 255
    191e:	fc 01       	movw	r30, r24
    1920:	37 af       	std	Z+63, r19	; 0x3f
    1922:	26 af       	std	Z+62, r18	; 0x3e
    1924:	ee 5b       	subi	r30, 0xBE	; 190
    1926:	ff 4f       	sbci	r31, 0xFF	; 255
    1928:	31 83       	std	Z+1, r19	; 0x01
    192a:	20 83       	st	Z, r18
    192c:	90 96       	adiw	r26, 0x20	; 32
    192e:	ed 91       	ld	r30, X+
    1930:	fc 91       	ld	r31, X
    1932:	91 97       	sbiw	r26, 0x21	; 33
    1934:	02 80       	ldd	r0, Z+2	; 0x02
    1936:	f3 81       	ldd	r31, Z+3	; 0x03
    1938:	e0 2d       	mov	r30, r0
    193a:	09 95       	icall
    193c:	08 95       	ret

0000193e <u8g2_SetupBuffer>:
/*
  This procedure is called after setting up the display (u8x8 structure).
  --> This is the central init procedure for u8g2 object
*/
void u8g2_SetupBuffer(u8g2_t *u8g2, uint8_t *buf, uint8_t tile_buf_height, u8g2_draw_ll_hvline_cb ll_hvline_cb, const u8g2_cb_t *u8g2_cb)
{
    193e:	0f 93       	push	r16
    1940:	1f 93       	push	r17
    1942:	cf 93       	push	r28
    1944:	df 93       	push	r29
    1946:	ec 01       	movw	r28, r24
  u8g2->font = NULL;
    1948:	fc 01       	movw	r30, r24
    194a:	ec 5b       	subi	r30, 0xBC	; 188
    194c:	ff 4f       	sbci	r31, 0xFF	; 255
    194e:	11 82       	std	Z+1, r1	; 0x01
    1950:	10 82       	st	Z, r1
  //u8g2->kerning = NULL;
  //u8g2->get_kerning_cb = u8g2_GetNullKerning;
  
  //u8g2->ll_hvline = u8g2_ll_hvline_vertical_top_lsb;
  u8g2->ll_hvline = ll_hvline_cb;
    1952:	3f 8f       	std	Y+31, r19	; 0x1f
    1954:	2e 8f       	std	Y+30, r18	; 0x1e
  
  u8g2->tile_buf_ptr = buf;
    1956:	7b a3       	std	Y+35, r23	; 0x23
    1958:	6a a3       	std	Y+34, r22	; 0x22
  u8g2->tile_buf_height = tile_buf_height;
    195a:	4c a3       	std	Y+36, r20	; 0x24
  
  u8g2->tile_curr_row = 0;
    195c:	1d a2       	std	Y+37, r1	; 0x25
  
  u8g2->font_decode.is_transparent = 0; /* issue 443 */
    195e:	3f 96       	adiw	r30, 0x0f	; 15
    1960:	10 82       	st	Z, r1
  u8g2->bitmap_transparency = 0;
    1962:	b0 96       	adiw	r30, 0x20	; 32
    1964:	10 82       	st	Z, r1
  
  u8g2->font_height_mode = 0; /* issue 2046 */
    1966:	34 97       	sbiw	r30, 0x04	; 4
    1968:	10 82       	st	Z, r1
  u8g2->draw_color = 1;
    196a:	35 96       	adiw	r30, 0x05	; 5
    196c:	81 e0       	ldi	r24, 0x01	; 1
    196e:	80 83       	st	Z, r24
  u8g2->is_auto_page_clear = 1;
    1970:	31 96       	adiw	r30, 0x01	; 1
    1972:	80 83       	st	Z, r24
  
  u8g2->cb = u8g2_cb;
    1974:	19 a3       	std	Y+33, r17	; 0x21
    1976:	08 a3       	std	Y+32, r16	; 0x20
  u8g2->cb->update_dimension(u8g2);
    1978:	d8 01       	movw	r26, r16
    197a:	ed 91       	ld	r30, X+
    197c:	fc 91       	ld	r31, X
    197e:	ce 01       	movw	r24, r28
    1980:	09 95       	icall
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_SetMaxClipWindow(u8g2);		/* assign a clip window and call the update() procedure */
    1982:	ce 01       	movw	r24, r28
    1984:	0e 94 83 0c 	call	0x1906	; 0x1906 <u8g2_SetMaxClipWindow>
#else
  u8g2->cb->update_page_win(u8g2);
#endif

  u8g2_SetFontPosBaseline(u8g2);  /* issue 195 */
    1988:	ce 01       	movw	r24, r28
    198a:	0e 94 2a 0a 	call	0x1454	; 0x1454 <u8g2_SetFontPosBaseline>
  
#ifdef U8G2_WITH_FONT_ROTATION  
  u8g2->font_decode.dir = 0;
    198e:	ca 5a       	subi	r28, 0xAA	; 170
    1990:	df 4f       	sbci	r29, 0xFF	; 255
    1992:	18 82       	st	Y, r1
#endif
}
    1994:	df 91       	pop	r29
    1996:	cf 91       	pop	r28
    1998:	1f 91       	pop	r17
    199a:	0f 91       	pop	r16
    199c:	08 95       	ret

0000199e <u8x8_ascii_next>:
      tile++;
      xx++;
    } while( xx < th );
    y+=2;
  } while( y < tv );  
}
    199e:	66 23       	and	r22, r22
    19a0:	29 f0       	breq	.+10     	; 0x19ac <u8x8_ascii_next+0xe>
    19a2:	6a 30       	cpi	r22, 0x0A	; 10
    19a4:	31 f0       	breq	.+12     	; 0x19b2 <u8x8_ascii_next+0x14>
    19a6:	86 2f       	mov	r24, r22
    19a8:	90 e0       	ldi	r25, 0x00	; 0
    19aa:	08 95       	ret
    19ac:	8f ef       	ldi	r24, 0xFF	; 255
    19ae:	9f ef       	ldi	r25, 0xFF	; 255
    19b0:	08 95       	ret
    19b2:	8f ef       	ldi	r24, 0xFF	; 255
    19b4:	9f ef       	ldi	r25, 0xFF	; 255
    19b6:	08 95       	ret

000019b8 <u8x8_utf8_init>:
*/

/* reset the internal state machine */
void u8x8_utf8_init(u8x8_t *u8x8)
{
  u8x8->utf8_state = 0;	/* also reset during u8x8_SetupDefaults() */
    19b8:	fc 01       	movw	r30, r24
    19ba:	10 8e       	std	Z+24, r1	; 0x18
    19bc:	08 95       	ret

000019be <u8x8_byte_SendBytes>:
{
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SET_DC, dc, NULL);
}

uint8_t u8x8_byte_SendBytes(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
    19be:	9a 01       	movw	r18, r20
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SEND, cnt, (void *)data);
    19c0:	dc 01       	movw	r26, r24
    19c2:	18 96       	adiw	r26, 0x08	; 8
    19c4:	ed 91       	ld	r30, X+
    19c6:	fc 91       	ld	r31, X
    19c8:	19 97       	sbiw	r26, 0x09	; 9
    19ca:	46 2f       	mov	r20, r22
    19cc:	67 e1       	ldi	r22, 0x17	; 23
    19ce:	09 95       	icall
}
    19d0:	08 95       	ret

000019d2 <u8x8_byte_SendByte>:

uint8_t u8x8_byte_SendByte(u8x8_t *u8x8, uint8_t byte)
{
    19d2:	cf 93       	push	r28
    19d4:	df 93       	push	r29
    19d6:	1f 92       	push	r1
    19d8:	cd b7       	in	r28, 0x3d	; 61
    19da:	de b7       	in	r29, 0x3e	; 62
    19dc:	69 83       	std	Y+1, r22	; 0x01
  return u8x8_byte_SendBytes(u8x8, 1, &byte);
    19de:	ae 01       	movw	r20, r28
    19e0:	4f 5f       	subi	r20, 0xFF	; 255
    19e2:	5f 4f       	sbci	r21, 0xFF	; 255
    19e4:	61 e0       	ldi	r22, 0x01	; 1
    19e6:	0e 94 df 0c 	call	0x19be	; 0x19be <u8x8_byte_SendBytes>
}
    19ea:	0f 90       	pop	r0
    19ec:	df 91       	pop	r29
    19ee:	cf 91       	pop	r28
    19f0:	08 95       	ret

000019f2 <u8x8_byte_StartTransfer>:

uint8_t u8x8_byte_StartTransfer(u8x8_t *u8x8)
{
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_START_TRANSFER, 0, NULL);
    19f2:	dc 01       	movw	r26, r24
    19f4:	18 96       	adiw	r26, 0x08	; 8
    19f6:	ed 91       	ld	r30, X+
    19f8:	fc 91       	ld	r31, X
    19fa:	19 97       	sbiw	r26, 0x09	; 9
    19fc:	20 e0       	ldi	r18, 0x00	; 0
    19fe:	30 e0       	ldi	r19, 0x00	; 0
    1a00:	40 e0       	ldi	r20, 0x00	; 0
    1a02:	68 e1       	ldi	r22, 0x18	; 24
    1a04:	09 95       	icall
}
    1a06:	08 95       	ret

00001a08 <u8x8_byte_EndTransfer>:

uint8_t u8x8_byte_EndTransfer(u8x8_t *u8x8)
{
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_END_TRANSFER, 0, NULL);
    1a08:	dc 01       	movw	r26, r24
    1a0a:	18 96       	adiw	r26, 0x08	; 8
    1a0c:	ed 91       	ld	r30, X+
    1a0e:	fc 91       	ld	r31, X
    1a10:	19 97       	sbiw	r26, 0x09	; 9
    1a12:	20 e0       	ldi	r18, 0x00	; 0
    1a14:	30 e0       	ldi	r19, 0x00	; 0
    1a16:	40 e0       	ldi	r20, 0x00	; 0
    1a18:	69 e1       	ldi	r22, 0x19	; 25
    1a1a:	09 95       	icall
}
    1a1c:	08 95       	ret

00001a1e <u8x8_i2c_data_transfer>:
      break;
    default:
      return 0;
  }
  return 1;
}
    1a1e:	ef 92       	push	r14
    1a20:	ff 92       	push	r15
    1a22:	1f 93       	push	r17
    1a24:	cf 93       	push	r28
    1a26:	df 93       	push	r29
    1a28:	ec 01       	movw	r28, r24
    1a2a:	16 2f       	mov	r17, r22
    1a2c:	7a 01       	movw	r14, r20
    1a2e:	0e 94 f9 0c 	call	0x19f2	; 0x19f2 <u8x8_byte_StartTransfer>
    1a32:	60 e4       	ldi	r22, 0x40	; 64
    1a34:	ce 01       	movw	r24, r28
    1a36:	0e 94 e9 0c 	call	0x19d2	; 0x19d2 <u8x8_byte_SendByte>
    1a3a:	e8 85       	ldd	r30, Y+8	; 0x08
    1a3c:	f9 85       	ldd	r31, Y+9	; 0x09
    1a3e:	97 01       	movw	r18, r14
    1a40:	41 2f       	mov	r20, r17
    1a42:	67 e1       	ldi	r22, 0x17	; 23
    1a44:	ce 01       	movw	r24, r28
    1a46:	09 95       	icall
    1a48:	ce 01       	movw	r24, r28
    1a4a:	0e 94 04 0d 	call	0x1a08	; 0x1a08 <u8x8_byte_EndTransfer>
    1a4e:	df 91       	pop	r29
    1a50:	cf 91       	pop	r28
    1a52:	1f 91       	pop	r17
    1a54:	ff 90       	pop	r15
    1a56:	ef 90       	pop	r14
    1a58:	08 95       	ret

00001a5a <u8x8_cad_SendCmd>:
    1a5a:	46 2f       	mov	r20, r22
    1a5c:	dc 01       	movw	r26, r24
    1a5e:	16 96       	adiw	r26, 0x06	; 6
    1a60:	ed 91       	ld	r30, X+
    1a62:	fc 91       	ld	r31, X
    1a64:	17 97       	sbiw	r26, 0x07	; 7
    1a66:	20 e0       	ldi	r18, 0x00	; 0
    1a68:	30 e0       	ldi	r19, 0x00	; 0
    1a6a:	65 e1       	ldi	r22, 0x15	; 21
    1a6c:	09 95       	icall
    1a6e:	08 95       	ret

00001a70 <u8x8_cad_SendArg>:
    1a70:	46 2f       	mov	r20, r22
    1a72:	dc 01       	movw	r26, r24
    1a74:	16 96       	adiw	r26, 0x06	; 6
    1a76:	ed 91       	ld	r30, X+
    1a78:	fc 91       	ld	r31, X
    1a7a:	17 97       	sbiw	r26, 0x07	; 7
    1a7c:	20 e0       	ldi	r18, 0x00	; 0
    1a7e:	30 e0       	ldi	r19, 0x00	; 0
    1a80:	66 e1       	ldi	r22, 0x16	; 22
    1a82:	09 95       	icall
    1a84:	08 95       	ret

00001a86 <u8x8_cad_SendData>:
    1a86:	9a 01       	movw	r18, r20
    1a88:	dc 01       	movw	r26, r24
    1a8a:	16 96       	adiw	r26, 0x06	; 6
    1a8c:	ed 91       	ld	r30, X+
    1a8e:	fc 91       	ld	r31, X
    1a90:	17 97       	sbiw	r26, 0x07	; 7
    1a92:	46 2f       	mov	r20, r22
    1a94:	67 e1       	ldi	r22, 0x17	; 23
    1a96:	09 95       	icall
    1a98:	08 95       	ret

00001a9a <u8x8_cad_StartTransfer>:
    1a9a:	dc 01       	movw	r26, r24
    1a9c:	16 96       	adiw	r26, 0x06	; 6
    1a9e:	ed 91       	ld	r30, X+
    1aa0:	fc 91       	ld	r31, X
    1aa2:	17 97       	sbiw	r26, 0x07	; 7
    1aa4:	20 e0       	ldi	r18, 0x00	; 0
    1aa6:	30 e0       	ldi	r19, 0x00	; 0
    1aa8:	40 e0       	ldi	r20, 0x00	; 0
    1aaa:	68 e1       	ldi	r22, 0x18	; 24
    1aac:	09 95       	icall
    1aae:	08 95       	ret

00001ab0 <u8x8_cad_EndTransfer>:
    1ab0:	dc 01       	movw	r26, r24
    1ab2:	16 96       	adiw	r26, 0x06	; 6
    1ab4:	ed 91       	ld	r30, X+
    1ab6:	fc 91       	ld	r31, X
    1ab8:	17 97       	sbiw	r26, 0x07	; 7
    1aba:	20 e0       	ldi	r18, 0x00	; 0
    1abc:	30 e0       	ldi	r19, 0x00	; 0
    1abe:	40 e0       	ldi	r20, 0x00	; 0
    1ac0:	69 e1       	ldi	r22, 0x19	; 25
    1ac2:	09 95       	icall
    1ac4:	08 95       	ret

00001ac6 <u8x8_cad_SendSequence>:
    1ac6:	ef 92       	push	r14
    1ac8:	ff 92       	push	r15
    1aca:	0f 93       	push	r16
    1acc:	1f 93       	push	r17
    1ace:	cf 93       	push	r28
    1ad0:	df 93       	push	r29
    1ad2:	1f 92       	push	r1
    1ad4:	cd b7       	in	r28, 0x3d	; 61
    1ad6:	de b7       	in	r29, 0x3e	; 62
    1ad8:	7c 01       	movw	r14, r24
    1ada:	8b 01       	movw	r16, r22
    1adc:	d8 01       	movw	r26, r16
    1ade:	6d 91       	ld	r22, X+
    1ae0:	8d 01       	movw	r16, r26
    1ae2:	67 31       	cpi	r22, 0x17	; 23
    1ae4:	b9 f0       	breq	.+46     	; 0x1b14 <u8x8_cad_SendSequence+0x4e>
    1ae6:	18 f4       	brcc	.+6      	; 0x1aee <u8x8_cad_SendSequence+0x28>
    1ae8:	65 31       	cpi	r22, 0x15	; 21
    1aea:	30 f4       	brcc	.+12     	; 0x1af8 <u8x8_cad_SendSequence+0x32>
    1aec:	33 c0       	rjmp	.+102    	; 0x1b54 <u8x8_cad_SendSequence+0x8e>
    1aee:	6a 31       	cpi	r22, 0x1A	; 26
    1af0:	e8 f0       	brcs	.+58     	; 0x1b2c <u8x8_cad_SendSequence+0x66>
    1af2:	6e 3f       	cpi	r22, 0xFE	; 254
    1af4:	31 f1       	breq	.+76     	; 0x1b42 <u8x8_cad_SendSequence+0x7c>
    1af6:	2e c0       	rjmp	.+92     	; 0x1b54 <u8x8_cad_SendSequence+0x8e>
    1af8:	fd 01       	movw	r30, r26
    1afa:	41 91       	ld	r20, Z+
    1afc:	8f 01       	movw	r16, r30
    1afe:	49 83       	std	Y+1, r20	; 0x01
    1b00:	d7 01       	movw	r26, r14
    1b02:	16 96       	adiw	r26, 0x06	; 6
    1b04:	ed 91       	ld	r30, X+
    1b06:	fc 91       	ld	r31, X
    1b08:	17 97       	sbiw	r26, 0x07	; 7
    1b0a:	20 e0       	ldi	r18, 0x00	; 0
    1b0c:	30 e0       	ldi	r19, 0x00	; 0
    1b0e:	c7 01       	movw	r24, r14
    1b10:	09 95       	icall
    1b12:	e4 cf       	rjmp	.-56     	; 0x1adc <u8x8_cad_SendSequence+0x16>
    1b14:	fd 01       	movw	r30, r26
    1b16:	81 91       	ld	r24, Z+
    1b18:	8f 01       	movw	r16, r30
    1b1a:	89 83       	std	Y+1, r24	; 0x01
    1b1c:	ae 01       	movw	r20, r28
    1b1e:	4f 5f       	subi	r20, 0xFF	; 255
    1b20:	5f 4f       	sbci	r21, 0xFF	; 255
    1b22:	61 e0       	ldi	r22, 0x01	; 1
    1b24:	c7 01       	movw	r24, r14
    1b26:	0e 94 43 0d 	call	0x1a86	; 0x1a86 <u8x8_cad_SendData>
    1b2a:	d8 cf       	rjmp	.-80     	; 0x1adc <u8x8_cad_SendSequence+0x16>
    1b2c:	d7 01       	movw	r26, r14
    1b2e:	16 96       	adiw	r26, 0x06	; 6
    1b30:	ed 91       	ld	r30, X+
    1b32:	fc 91       	ld	r31, X
    1b34:	17 97       	sbiw	r26, 0x07	; 7
    1b36:	20 e0       	ldi	r18, 0x00	; 0
    1b38:	30 e0       	ldi	r19, 0x00	; 0
    1b3a:	40 e0       	ldi	r20, 0x00	; 0
    1b3c:	c7 01       	movw	r24, r14
    1b3e:	09 95       	icall
    1b40:	cd cf       	rjmp	.-102    	; 0x1adc <u8x8_cad_SendSequence+0x16>
    1b42:	fd 01       	movw	r30, r26
    1b44:	41 91       	ld	r20, Z+
    1b46:	8f 01       	movw	r16, r30
    1b48:	49 83       	std	Y+1, r20	; 0x01
    1b4a:	69 e2       	ldi	r22, 0x29	; 41
    1b4c:	c7 01       	movw	r24, r14
    1b4e:	0e 94 66 0f 	call	0x1ecc	; 0x1ecc <u8x8_gpio_call>
    1b52:	c4 cf       	rjmp	.-120    	; 0x1adc <u8x8_cad_SendSequence+0x16>
    1b54:	0f 90       	pop	r0
    1b56:	df 91       	pop	r29
    1b58:	cf 91       	pop	r28
    1b5a:	1f 91       	pop	r17
    1b5c:	0f 91       	pop	r16
    1b5e:	ff 90       	pop	r15
    1b60:	ef 90       	pop	r14
    1b62:	08 95       	ret

00001b64 <u8x8_cad_ssd13xx_fast_i2c>:


/* fast version with reduced data start/stops, issue 735 */
uint8_t u8x8_cad_ssd13xx_fast_i2c(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
    1b64:	ef 92       	push	r14
    1b66:	ff 92       	push	r15
    1b68:	0f 93       	push	r16
    1b6a:	1f 93       	push	r17
    1b6c:	cf 93       	push	r28
    1b6e:	7c 01       	movw	r14, r24
    1b70:	c4 2f       	mov	r28, r20
    1b72:	89 01       	movw	r16, r18
  static uint8_t in_transfer = 0;
  uint8_t *p;
  switch(msg)
    1b74:	66 31       	cpi	r22, 0x16	; 22
    1b76:	29 f1       	breq	.+74     	; 0x1bc2 <u8x8_cad_ssd13xx_fast_i2c+0x5e>
    1b78:	30 f4       	brcc	.+12     	; 0x1b86 <u8x8_cad_ssd13xx_fast_i2c+0x22>
    1b7a:	64 31       	cpi	r22, 0x14	; 20
    1b7c:	09 f4       	brne	.+2      	; 0x1b80 <u8x8_cad_ssd13xx_fast_i2c+0x1c>
    1b7e:	41 c0       	rjmp	.+130    	; 0x1c02 <u8x8_cad_ssd13xx_fast_i2c+0x9e>
    1b80:	65 31       	cpi	r22, 0x15	; 21
    1b82:	49 f0       	breq	.+18     	; 0x1b96 <u8x8_cad_ssd13xx_fast_i2c+0x32>
    1b84:	60 c0       	rjmp	.+192    	; 0x1c46 <u8x8_cad_ssd13xx_fast_i2c+0xe2>
    1b86:	68 31       	cpi	r22, 0x18	; 24
    1b88:	09 f4       	brne	.+2      	; 0x1b8c <u8x8_cad_ssd13xx_fast_i2c+0x28>
    1b8a:	4e c0       	rjmp	.+156    	; 0x1c28 <u8x8_cad_ssd13xx_fast_i2c+0xc4>
    1b8c:	f8 f0       	brcs	.+62     	; 0x1bcc <u8x8_cad_ssd13xx_fast_i2c+0x68>
    1b8e:	69 31       	cpi	r22, 0x19	; 25
    1b90:	09 f4       	brne	.+2      	; 0x1b94 <u8x8_cad_ssd13xx_fast_i2c+0x30>
    1b92:	4e c0       	rjmp	.+156    	; 0x1c30 <u8x8_cad_ssd13xx_fast_i2c+0xcc>
    1b94:	58 c0       	rjmp	.+176    	; 0x1c46 <u8x8_cad_ssd13xx_fast_i2c+0xe2>
  {
    case U8X8_MSG_CAD_SEND_CMD:
      /* improved version, takeover from ld7032 */
      /* assumes, that the args of a command is not longer than 31 bytes */
      /* speed improvement is about 4% compared to the classic version */
      if ( in_transfer != 0 )
    1b96:	80 91 52 06 	lds	r24, 0x0652	; 0x800652 <in_transfer.3728>
    1b9a:	88 23       	and	r24, r24
    1b9c:	19 f0       	breq	.+6      	; 0x1ba4 <u8x8_cad_ssd13xx_fast_i2c+0x40>
	 u8x8_byte_EndTransfer(u8x8); 
    1b9e:	c7 01       	movw	r24, r14
    1ba0:	0e 94 04 0d 	call	0x1a08	; 0x1a08 <u8x8_byte_EndTransfer>
      
      u8x8_byte_StartTransfer(u8x8);
    1ba4:	c7 01       	movw	r24, r14
    1ba6:	0e 94 f9 0c 	call	0x19f2	; 0x19f2 <u8x8_byte_StartTransfer>
      u8x8_byte_SendByte(u8x8, 0x000);	/* cmd byte for ssd13xx controller */
    1baa:	60 e0       	ldi	r22, 0x00	; 0
    1bac:	c7 01       	movw	r24, r14
    1bae:	0e 94 e9 0c 	call	0x19d2	; 0x19d2 <u8x8_byte_SendByte>
      u8x8_byte_SendByte(u8x8, arg_int);
    1bb2:	6c 2f       	mov	r22, r28
    1bb4:	c7 01       	movw	r24, r14
    1bb6:	0e 94 e9 0c 	call	0x19d2	; 0x19d2 <u8x8_byte_SendByte>
      in_transfer = 1;
    1bba:	81 e0       	ldi	r24, 0x01	; 1
    1bbc:	80 93 52 06 	sts	0x0652, r24	; 0x800652 <in_transfer.3728>
	//   u8x8_byte_StartTransfer(u8x8);
	//   u8x8_byte_SendByte(u8x8, 0x000);	/* cmd byte for ssd13xx controller */
	//   in_transfer = 1;
	// }
	//u8x8_byte_SendByte(u8x8, arg_int);
      break;
    1bc0:	43 c0       	rjmp	.+134    	; 0x1c48 <u8x8_cad_ssd13xx_fast_i2c+0xe4>
    case U8X8_MSG_CAD_SEND_ARG:
      u8x8_byte_SendByte(u8x8, arg_int);
    1bc2:	64 2f       	mov	r22, r20
    1bc4:	0e 94 e9 0c 	call	0x19d2	; 0x19d2 <u8x8_byte_SendByte>
      in_transfer = 0;
      break;
    default:
      return 0;
  }
  return 1;
    1bc8:	81 e0       	ldi	r24, 0x01	; 1
	// }
	//u8x8_byte_SendByte(u8x8, arg_int);
      break;
    case U8X8_MSG_CAD_SEND_ARG:
      u8x8_byte_SendByte(u8x8, arg_int);
      break;      
    1bca:	3e c0       	rjmp	.+124    	; 0x1c48 <u8x8_cad_ssd13xx_fast_i2c+0xe4>
    case U8X8_MSG_CAD_SEND_DATA:
      if ( in_transfer != 0 )
    1bcc:	80 91 52 06 	lds	r24, 0x0652	; 0x800652 <in_transfer.3728>
    1bd0:	88 23       	and	r24, r24
    1bd2:	61 f0       	breq	.+24     	; 0x1bec <u8x8_cad_ssd13xx_fast_i2c+0x88>
	u8x8_byte_EndTransfer(u8x8); 
    1bd4:	c7 01       	movw	r24, r14
    1bd6:	0e 94 04 0d 	call	0x1a08	; 0x1a08 <u8x8_byte_EndTransfer>
    1bda:	08 c0       	rjmp	.+16     	; 0x1bec <u8x8_cad_ssd13xx_fast_i2c+0x88>
      /* so this is done here. Even further, only 24 bytes will be sent, */
      /* because there will be another byte (DC) required during the transfer */
      p = arg_ptr;
       while( arg_int > 24 )
      {
	u8x8_i2c_data_transfer(u8x8, 24, p);
    1bdc:	a8 01       	movw	r20, r16
    1bde:	68 e1       	ldi	r22, 0x18	; 24
    1be0:	c7 01       	movw	r24, r14
    1be2:	0e 94 0f 0d 	call	0x1a1e	; 0x1a1e <u8x8_i2c_data_transfer>
	arg_int-=24;
    1be6:	c8 51       	subi	r28, 0x18	; 24
	p+=24;
    1be8:	08 5e       	subi	r16, 0xE8	; 232
    1bea:	1f 4f       	sbci	r17, 0xFF	; 255
      /* I guess this is related to the size of the Wire buffers in Arduino */
      /* Unfortunately, this can not be handled in the byte level drivers, */
      /* so this is done here. Even further, only 24 bytes will be sent, */
      /* because there will be another byte (DC) required during the transfer */
      p = arg_ptr;
       while( arg_int > 24 )
    1bec:	c9 31       	cpi	r28, 0x19	; 25
    1bee:	b0 f7       	brcc	.-20     	; 0x1bdc <u8x8_cad_ssd13xx_fast_i2c+0x78>
      {
	u8x8_i2c_data_transfer(u8x8, 24, p);
	arg_int-=24;
	p+=24;
      }
      u8x8_i2c_data_transfer(u8x8, arg_int, p);
    1bf0:	a8 01       	movw	r20, r16
    1bf2:	6c 2f       	mov	r22, r28
    1bf4:	c7 01       	movw	r24, r14
    1bf6:	0e 94 0f 0d 	call	0x1a1e	; 0x1a1e <u8x8_i2c_data_transfer>
      in_transfer = 0;
    1bfa:	10 92 52 06 	sts	0x0652, r1	; 0x800652 <in_transfer.3728>
      in_transfer = 0;
      break;
    default:
      return 0;
  }
  return 1;
    1bfe:	81 e0       	ldi	r24, 0x01	; 1
	arg_int-=24;
	p+=24;
      }
      u8x8_i2c_data_transfer(u8x8, arg_int, p);
      in_transfer = 0;
      break;
    1c00:	23 c0       	rjmp	.+70     	; 0x1c48 <u8x8_cad_ssd13xx_fast_i2c+0xe4>
    case U8X8_MSG_CAD_INIT:
      /* apply default i2c adr if required so that the start transfer msg can use this */
      if ( u8x8->i2c_address == 255 )
    1c02:	dc 01       	movw	r26, r24
    1c04:	56 96       	adiw	r26, 0x16	; 22
    1c06:	8c 91       	ld	r24, X
    1c08:	56 97       	sbiw	r26, 0x16	; 22
    1c0a:	8f 3f       	cpi	r24, 0xFF	; 255
    1c0c:	19 f4       	brne	.+6      	; 0x1c14 <u8x8_cad_ssd13xx_fast_i2c+0xb0>
	u8x8->i2c_address = 0x078;
    1c0e:	88 e7       	ldi	r24, 0x78	; 120
    1c10:	56 96       	adiw	r26, 0x16	; 22
    1c12:	8c 93       	st	X, r24
      return u8x8->byte_cb(u8x8, msg, arg_int, arg_ptr);
    1c14:	d7 01       	movw	r26, r14
    1c16:	18 96       	adiw	r26, 0x08	; 8
    1c18:	ed 91       	ld	r30, X+
    1c1a:	fc 91       	ld	r31, X
    1c1c:	19 97       	sbiw	r26, 0x09	; 9
    1c1e:	98 01       	movw	r18, r16
    1c20:	4c 2f       	mov	r20, r28
    1c22:	c7 01       	movw	r24, r14
    1c24:	09 95       	icall
    1c26:	10 c0       	rjmp	.+32     	; 0x1c48 <u8x8_cad_ssd13xx_fast_i2c+0xe4>
    case U8X8_MSG_CAD_START_TRANSFER:
      in_transfer = 0;
    1c28:	10 92 52 06 	sts	0x0652, r1	; 0x800652 <in_transfer.3728>
      in_transfer = 0;
      break;
    default:
      return 0;
  }
  return 1;
    1c2c:	81 e0       	ldi	r24, 0x01	; 1
      if ( u8x8->i2c_address == 255 )
	u8x8->i2c_address = 0x078;
      return u8x8->byte_cb(u8x8, msg, arg_int, arg_ptr);
    case U8X8_MSG_CAD_START_TRANSFER:
      in_transfer = 0;
      break;
    1c2e:	0c c0       	rjmp	.+24     	; 0x1c48 <u8x8_cad_ssd13xx_fast_i2c+0xe4>
    case U8X8_MSG_CAD_END_TRANSFER:
      if ( in_transfer != 0 )
    1c30:	80 91 52 06 	lds	r24, 0x0652	; 0x800652 <in_transfer.3728>
    1c34:	88 23       	and	r24, r24
    1c36:	19 f0       	breq	.+6      	; 0x1c3e <u8x8_cad_ssd13xx_fast_i2c+0xda>
	u8x8_byte_EndTransfer(u8x8); 
    1c38:	c7 01       	movw	r24, r14
    1c3a:	0e 94 04 0d 	call	0x1a08	; 0x1a08 <u8x8_byte_EndTransfer>
      in_transfer = 0;
    1c3e:	10 92 52 06 	sts	0x0652, r1	; 0x800652 <in_transfer.3728>
      break;
    default:
      return 0;
  }
  return 1;
    1c42:	81 e0       	ldi	r24, 0x01	; 1
      break;
    case U8X8_MSG_CAD_END_TRANSFER:
      if ( in_transfer != 0 )
	u8x8_byte_EndTransfer(u8x8); 
      in_transfer = 0;
      break;
    1c44:	01 c0       	rjmp	.+2      	; 0x1c48 <u8x8_cad_ssd13xx_fast_i2c+0xe4>
    default:
      return 0;
    1c46:	80 e0       	ldi	r24, 0x00	; 0
  }
  return 1;
}
    1c48:	cf 91       	pop	r28
    1c4a:	1f 91       	pop	r17
    1c4c:	0f 91       	pop	r16
    1c4e:	ff 90       	pop	r15
    1c50:	ef 90       	pop	r14
    1c52:	08 95       	ret

00001c54 <u8x8_d_helper_display_setup_memory>:
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_FLIP_MODE, mode, NULL);  
}

void u8x8_SetContrast(u8x8_t *u8x8, uint8_t value)
{
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_CONTRAST, value, NULL);  
    1c54:	fc 01       	movw	r30, r24
    1c56:	71 83       	std	Z+1, r23	; 0x01
    1c58:	60 83       	st	Z, r22
    1c5a:	fb 01       	movw	r30, r22
    1c5c:	22 89       	ldd	r18, Z+18	; 0x12
    1c5e:	fc 01       	movw	r30, r24
    1c60:	24 8b       	std	Z+20, r18	; 0x14
    1c62:	08 95       	ret

00001c64 <u8x8_d_helper_display_init>:
    1c64:	cf 93       	push	r28
    1c66:	df 93       	push	r29
    1c68:	ec 01       	movw	r28, r24
    1c6a:	ea 85       	ldd	r30, Y+10	; 0x0a
    1c6c:	fb 85       	ldd	r31, Y+11	; 0x0b
    1c6e:	20 e0       	ldi	r18, 0x00	; 0
    1c70:	30 e0       	ldi	r19, 0x00	; 0
    1c72:	40 e0       	ldi	r20, 0x00	; 0
    1c74:	68 e2       	ldi	r22, 0x28	; 40
    1c76:	09 95       	icall
    1c78:	ee 81       	ldd	r30, Y+6	; 0x06
    1c7a:	ff 81       	ldd	r31, Y+7	; 0x07
    1c7c:	20 e0       	ldi	r18, 0x00	; 0
    1c7e:	30 e0       	ldi	r19, 0x00	; 0
    1c80:	40 e0       	ldi	r20, 0x00	; 0
    1c82:	64 e1       	ldi	r22, 0x14	; 20
    1c84:	ce 01       	movw	r24, r28
    1c86:	09 95       	icall
    1c88:	41 e0       	ldi	r20, 0x01	; 1
    1c8a:	6b e4       	ldi	r22, 0x4B	; 75
    1c8c:	ce 01       	movw	r24, r28
    1c8e:	0e 94 66 0f 	call	0x1ecc	; 0x1ecc <u8x8_gpio_call>
    1c92:	e8 81       	ld	r30, Y
    1c94:	f9 81       	ldd	r31, Y+1	; 0x01
    1c96:	44 81       	ldd	r20, Z+4	; 0x04
    1c98:	69 e2       	ldi	r22, 0x29	; 41
    1c9a:	ce 01       	movw	r24, r28
    1c9c:	0e 94 66 0f 	call	0x1ecc	; 0x1ecc <u8x8_gpio_call>
    1ca0:	40 e0       	ldi	r20, 0x00	; 0
    1ca2:	6b e4       	ldi	r22, 0x4B	; 75
    1ca4:	ce 01       	movw	r24, r28
    1ca6:	0e 94 66 0f 	call	0x1ecc	; 0x1ecc <u8x8_gpio_call>
    1caa:	e8 81       	ld	r30, Y
    1cac:	f9 81       	ldd	r31, Y+1	; 0x01
    1cae:	44 81       	ldd	r20, Z+4	; 0x04
    1cb0:	69 e2       	ldi	r22, 0x29	; 41
    1cb2:	ce 01       	movw	r24, r28
    1cb4:	0e 94 66 0f 	call	0x1ecc	; 0x1ecc <u8x8_gpio_call>
    1cb8:	41 e0       	ldi	r20, 0x01	; 1
    1cba:	6b e4       	ldi	r22, 0x4B	; 75
    1cbc:	ce 01       	movw	r24, r28
    1cbe:	0e 94 66 0f 	call	0x1ecc	; 0x1ecc <u8x8_gpio_call>
    1cc2:	e8 81       	ld	r30, Y
    1cc4:	f9 81       	ldd	r31, Y+1	; 0x01
    1cc6:	45 81       	ldd	r20, Z+5	; 0x05
    1cc8:	69 e2       	ldi	r22, 0x29	; 41
    1cca:	ce 01       	movw	r24, r28
    1ccc:	0e 94 66 0f 	call	0x1ecc	; 0x1ecc <u8x8_gpio_call>
    1cd0:	df 91       	pop	r29
    1cd2:	cf 91       	pop	r28
    1cd4:	08 95       	ret

00001cd6 <u8x8_DrawTile>:
    1cd6:	0f 93       	push	r16
    1cd8:	1f 93       	push	r17
    1cda:	cf 93       	push	r28
    1cdc:	df 93       	push	r29
    1cde:	00 d0       	rcall	.+0      	; 0x1ce0 <u8x8_DrawTile+0xa>
    1ce0:	00 d0       	rcall	.+0      	; 0x1ce2 <u8x8_DrawTile+0xc>
    1ce2:	1f 92       	push	r1
    1ce4:	cd b7       	in	r28, 0x3d	; 61
    1ce6:	de b7       	in	r29, 0x3e	; 62
    1ce8:	6c 83       	std	Y+4, r22	; 0x04
    1cea:	4d 83       	std	Y+5, r20	; 0x05
    1cec:	2b 83       	std	Y+3, r18	; 0x03
    1cee:	1a 83       	std	Y+2, r17	; 0x02
    1cf0:	09 83       	std	Y+1, r16	; 0x01
    1cf2:	dc 01       	movw	r26, r24
    1cf4:	14 96       	adiw	r26, 0x04	; 4
    1cf6:	ed 91       	ld	r30, X+
    1cf8:	fc 91       	ld	r31, X
    1cfa:	15 97       	sbiw	r26, 0x05	; 5
    1cfc:	9e 01       	movw	r18, r28
    1cfe:	2f 5f       	subi	r18, 0xFF	; 255
    1d00:	3f 4f       	sbci	r19, 0xFF	; 255
    1d02:	41 e0       	ldi	r20, 0x01	; 1
    1d04:	6f e0       	ldi	r22, 0x0F	; 15
    1d06:	09 95       	icall
    1d08:	0f 90       	pop	r0
    1d0a:	0f 90       	pop	r0
    1d0c:	0f 90       	pop	r0
    1d0e:	0f 90       	pop	r0
    1d10:	0f 90       	pop	r0
    1d12:	df 91       	pop	r29
    1d14:	cf 91       	pop	r28
    1d16:	1f 91       	pop	r17
    1d18:	0f 91       	pop	r16
    1d1a:	08 95       	ret

00001d1c <u8x8_SetupMemory>:
    1d1c:	dc 01       	movw	r26, r24
    1d1e:	14 96       	adiw	r26, 0x04	; 4
    1d20:	ed 91       	ld	r30, X+
    1d22:	fc 91       	ld	r31, X
    1d24:	15 97       	sbiw	r26, 0x05	; 5
    1d26:	20 e0       	ldi	r18, 0x00	; 0
    1d28:	30 e0       	ldi	r19, 0x00	; 0
    1d2a:	40 e0       	ldi	r20, 0x00	; 0
    1d2c:	69 e0       	ldi	r22, 0x09	; 9
    1d2e:	09 95       	icall
    1d30:	08 95       	ret

00001d32 <u8x8_InitDisplay>:
    1d32:	dc 01       	movw	r26, r24
    1d34:	14 96       	adiw	r26, 0x04	; 4
    1d36:	ed 91       	ld	r30, X+
    1d38:	fc 91       	ld	r31, X
    1d3a:	15 97       	sbiw	r26, 0x05	; 5
    1d3c:	20 e0       	ldi	r18, 0x00	; 0
    1d3e:	30 e0       	ldi	r19, 0x00	; 0
    1d40:	40 e0       	ldi	r20, 0x00	; 0
    1d42:	6a e0       	ldi	r22, 0x0A	; 10
    1d44:	09 95       	icall
    1d46:	08 95       	ret

00001d48 <u8x8_SetPowerSave>:
    1d48:	46 2f       	mov	r20, r22
    1d4a:	dc 01       	movw	r26, r24
    1d4c:	14 96       	adiw	r26, 0x04	; 4
    1d4e:	ed 91       	ld	r30, X+
    1d50:	fc 91       	ld	r31, X
    1d52:	15 97       	sbiw	r26, 0x05	; 5
    1d54:	20 e0       	ldi	r18, 0x00	; 0
    1d56:	30 e0       	ldi	r19, 0x00	; 0
    1d58:	6b e0       	ldi	r22, 0x0B	; 11
    1d5a:	09 95       	icall
    1d5c:	08 95       	ret

00001d5e <u8x8_RefreshDisplay>:
}

void u8x8_RefreshDisplay(u8x8_t *u8x8)
{
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_REFRESH, 0, NULL);  
    1d5e:	dc 01       	movw	r26, r24
    1d60:	14 96       	adiw	r26, 0x04	; 4
    1d62:	ed 91       	ld	r30, X+
    1d64:	fc 91       	ld	r31, X
    1d66:	15 97       	sbiw	r26, 0x05	; 5
    1d68:	20 e0       	ldi	r18, 0x00	; 0
    1d6a:	30 e0       	ldi	r19, 0x00	; 0
    1d6c:	40 e0       	ldi	r20, 0x00	; 0
    1d6e:	60 e1       	ldi	r22, 0x10	; 16
    1d70:	09 95       	icall
    1d72:	08 95       	ret

00001d74 <u8x8_d_ssd1306_sh1106_generic>:
  U8X8_END_TRANSFER(),             	/* disable chip */
  U8X8_END()             			/* end of sequence */
};

static uint8_t u8x8_d_ssd1306_sh1106_generic(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
    1d74:	ef 92       	push	r14
    1d76:	ff 92       	push	r15
    1d78:	0f 93       	push	r16
    1d7a:	1f 93       	push	r17
    1d7c:	cf 93       	push	r28
    1d7e:	df 93       	push	r29
    1d80:	8c 01       	movw	r16, r24
    1d82:	c4 2f       	mov	r28, r20
    1d84:	79 01       	movw	r14, r18
  uint8_t x, c;
  uint8_t *ptr;
  switch(msg)
    1d86:	6d 30       	cpi	r22, 0x0D	; 13
    1d88:	b9 f0       	breq	.+46     	; 0x1db8 <u8x8_d_ssd1306_sh1106_generic+0x44>
    1d8a:	18 f4       	brcc	.+6      	; 0x1d92 <u8x8_d_ssd1306_sh1106_generic+0x1e>
    1d8c:	6b 30       	cpi	r22, 0x0B	; 11
    1d8e:	31 f0       	breq	.+12     	; 0x1d9c <u8x8_d_ssd1306_sh1106_generic+0x28>
    1d90:	72 c0       	rjmp	.+228    	; 0x1e76 <u8x8_d_ssd1306_sh1106_generic+0x102>
    1d92:	6e 30       	cpi	r22, 0x0E	; 14
    1d94:	69 f1       	breq	.+90     	; 0x1df0 <u8x8_d_ssd1306_sh1106_generic+0x7c>
    1d96:	6f 30       	cpi	r22, 0x0F	; 15
    1d98:	d1 f1       	breq	.+116    	; 0x1e0e <u8x8_d_ssd1306_sh1106_generic+0x9a>
    1d9a:	6d c0       	rjmp	.+218    	; 0x1e76 <u8x8_d_ssd1306_sh1106_generic+0x102>
      u8x8_d_helper_display_init(u8x8);
      u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_init_seq);    
      break;
    */
    case U8X8_MSG_DISPLAY_SET_POWER_SAVE:
      if ( arg_int == 0 )
    1d9c:	41 11       	cpse	r20, r1
    1d9e:	06 c0       	rjmp	.+12     	; 0x1dac <u8x8_d_ssd1306_sh1106_generic+0x38>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_powersave0_seq);
    1da0:	63 e3       	ldi	r22, 0x33	; 51
    1da2:	71 e0       	ldi	r23, 0x01	; 1
    1da4:	0e 94 63 0d 	call	0x1ac6	; 0x1ac6 <u8x8_cad_SendSequence>
      u8x8_cad_EndTransfer(u8x8);
      break;
    default:
      return 0;
  }
  return 1;
    1da8:	81 e0       	ldi	r24, 0x01	; 1
    1daa:	66 c0       	rjmp	.+204    	; 0x1e78 <u8x8_d_ssd1306_sh1106_generic+0x104>
    */
    case U8X8_MSG_DISPLAY_SET_POWER_SAVE:
      if ( arg_int == 0 )
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_powersave0_seq);
      else
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_powersave1_seq);
    1dac:	6e e2       	ldi	r22, 0x2E	; 46
    1dae:	71 e0       	ldi	r23, 0x01	; 1
    1db0:	0e 94 63 0d 	call	0x1ac6	; 0x1ac6 <u8x8_cad_SendSequence>
      u8x8_cad_EndTransfer(u8x8);
      break;
    default:
      return 0;
  }
  return 1;
    1db4:	81 e0       	ldi	r24, 0x01	; 1
    1db6:	60 c0       	rjmp	.+192    	; 0x1e78 <u8x8_d_ssd1306_sh1106_generic+0x104>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_powersave0_seq);
      else
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_powersave1_seq);
      break;
    case U8X8_MSG_DISPLAY_SET_FLIP_MODE:
      if ( arg_int == 0 )
    1db8:	41 11       	cpse	r20, r1
    1dba:	0d c0       	rjmp	.+26     	; 0x1dd6 <u8x8_d_ssd1306_sh1106_generic+0x62>
      {
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_flip0_seq);
    1dbc:	67 e2       	ldi	r22, 0x27	; 39
    1dbe:	71 e0       	ldi	r23, 0x01	; 1
    1dc0:	0e 94 63 0d 	call	0x1ac6	; 0x1ac6 <u8x8_cad_SendSequence>
	u8x8->x_offset = u8x8->display_info->default_x_offset;
    1dc4:	d8 01       	movw	r26, r16
    1dc6:	ed 91       	ld	r30, X+
    1dc8:	fc 91       	ld	r31, X
    1dca:	11 97       	sbiw	r26, 0x01	; 1
    1dcc:	82 89       	ldd	r24, Z+18	; 0x12
    1dce:	54 96       	adiw	r26, 0x14	; 20
    1dd0:	8c 93       	st	X, r24
      u8x8_cad_EndTransfer(u8x8);
      break;
    default:
      return 0;
  }
  return 1;
    1dd2:	81 e0       	ldi	r24, 0x01	; 1
    1dd4:	51 c0       	rjmp	.+162    	; 0x1e78 <u8x8_d_ssd1306_sh1106_generic+0x104>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_flip0_seq);
	u8x8->x_offset = u8x8->display_info->default_x_offset;
      }
      else
      {
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_flip1_seq);
    1dd6:	60 e2       	ldi	r22, 0x20	; 32
    1dd8:	71 e0       	ldi	r23, 0x01	; 1
    1dda:	0e 94 63 0d 	call	0x1ac6	; 0x1ac6 <u8x8_cad_SendSequence>
	u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
    1dde:	d8 01       	movw	r26, r16
    1de0:	ed 91       	ld	r30, X+
    1de2:	fc 91       	ld	r31, X
    1de4:	11 97       	sbiw	r26, 0x01	; 1
    1de6:	83 89       	ldd	r24, Z+19	; 0x13
    1de8:	54 96       	adiw	r26, 0x14	; 20
    1dea:	8c 93       	st	X, r24
      u8x8_cad_EndTransfer(u8x8);
      break;
    default:
      return 0;
  }
  return 1;
    1dec:	81 e0       	ldi	r24, 0x01	; 1
    1dee:	44 c0       	rjmp	.+136    	; 0x1e78 <u8x8_d_ssd1306_sh1106_generic+0x104>
	u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
      }
      break;
#ifdef U8X8_WITH_SET_CONTRAST
    case U8X8_MSG_DISPLAY_SET_CONTRAST:
      u8x8_cad_StartTransfer(u8x8);
    1df0:	0e 94 4d 0d 	call	0x1a9a	; 0x1a9a <u8x8_cad_StartTransfer>
      u8x8_cad_SendCmd(u8x8, 0x081 );
    1df4:	61 e8       	ldi	r22, 0x81	; 129
    1df6:	c8 01       	movw	r24, r16
    1df8:	0e 94 2d 0d 	call	0x1a5a	; 0x1a5a <u8x8_cad_SendCmd>
      u8x8_cad_SendArg(u8x8, arg_int );	/* ssd1306 has range from 0 to 255 */
    1dfc:	6c 2f       	mov	r22, r28
    1dfe:	c8 01       	movw	r24, r16
    1e00:	0e 94 38 0d 	call	0x1a70	; 0x1a70 <u8x8_cad_SendArg>
      u8x8_cad_EndTransfer(u8x8);
    1e04:	c8 01       	movw	r24, r16
    1e06:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <u8x8_cad_EndTransfer>
      u8x8_cad_EndTransfer(u8x8);
      break;
    default:
      return 0;
  }
  return 1;
    1e0a:	81 e0       	ldi	r24, 0x01	; 1
    case U8X8_MSG_DISPLAY_SET_CONTRAST:
      u8x8_cad_StartTransfer(u8x8);
      u8x8_cad_SendCmd(u8x8, 0x081 );
      u8x8_cad_SendArg(u8x8, arg_int );	/* ssd1306 has range from 0 to 255 */
      u8x8_cad_EndTransfer(u8x8);
      break;
    1e0c:	35 c0       	rjmp	.+106    	; 0x1e78 <u8x8_d_ssd1306_sh1106_generic+0x104>
#endif
    case U8X8_MSG_DISPLAY_DRAW_TILE:
      u8x8_cad_StartTransfer(u8x8);
    1e0e:	0e 94 4d 0d 	call	0x1a9a	; 0x1a9a <u8x8_cad_StartTransfer>
      x = ((u8x8_tile_t *)arg_ptr)->x_pos;    
    1e12:	f7 01       	movw	r30, r14
    1e14:	d3 81       	ldd	r29, Z+3	; 0x03
      x *= 8;
    1e16:	dd 0f       	add	r29, r29
    1e18:	dd 0f       	add	r29, r29
    1e1a:	dd 0f       	add	r29, r29
      x += u8x8->x_offset;
    1e1c:	d8 01       	movw	r26, r16
    1e1e:	54 96       	adiw	r26, 0x14	; 20
    1e20:	8c 91       	ld	r24, X
    1e22:	d8 0f       	add	r29, r24
    
      u8x8_cad_SendCmd(u8x8, 0x040 );	/* set line offset to 0 */
    1e24:	60 e4       	ldi	r22, 0x40	; 64
    1e26:	c8 01       	movw	r24, r16
    1e28:	0e 94 2d 0d 	call	0x1a5a	; 0x1a5a <u8x8_cad_SendCmd>
    
      u8x8_cad_SendCmd(u8x8, 0x010 | (x>>4) );
    1e2c:	6d 2f       	mov	r22, r29
    1e2e:	62 95       	swap	r22
    1e30:	6f 70       	andi	r22, 0x0F	; 15
    1e32:	60 61       	ori	r22, 0x10	; 16
    1e34:	c8 01       	movw	r24, r16
    1e36:	0e 94 2d 0d 	call	0x1a5a	; 0x1a5a <u8x8_cad_SendCmd>
      u8x8_cad_SendArg(u8x8, 0x000 | ((x&15)));					/* probably wrong, should be SendCmd */
    1e3a:	6d 2f       	mov	r22, r29
    1e3c:	6f 70       	andi	r22, 0x0F	; 15
    1e3e:	c8 01       	movw	r24, r16
    1e40:	0e 94 38 0d 	call	0x1a70	; 0x1a70 <u8x8_cad_SendArg>
      u8x8_cad_SendArg(u8x8, 0x0b0 | (((u8x8_tile_t *)arg_ptr)->y_pos));	/* probably wrong, should be SendCmd */
    1e44:	f7 01       	movw	r30, r14
    1e46:	64 81       	ldd	r22, Z+4	; 0x04
    1e48:	60 6b       	ori	r22, 0xB0	; 176
    1e4a:	c8 01       	movw	r24, r16
    1e4c:	0e 94 38 0d 	call	0x1a70	; 0x1a70 <u8x8_cad_SendArg>

    
      do
      {
	c = ((u8x8_tile_t *)arg_ptr)->cnt;
    1e50:	d7 01       	movw	r26, r14
    1e52:	12 96       	adiw	r26, 0x02	; 2
    1e54:	6c 91       	ld	r22, X
    1e56:	12 97       	sbiw	r26, 0x02	; 2
	ptr = ((u8x8_tile_t *)arg_ptr)->tile_ptr;
    1e58:	4d 91       	ld	r20, X+
    1e5a:	5c 91       	ld	r21, X
	u8x8_cad_SendData(u8x8, c*8, ptr); 	/* note: SendData can not handle more than 255 bytes */
    1e5c:	66 0f       	add	r22, r22
    1e5e:	66 0f       	add	r22, r22
    1e60:	66 0f       	add	r22, r22
    1e62:	c8 01       	movw	r24, r16
    1e64:	0e 94 43 0d 	call	0x1a86	; 0x1a86 <u8x8_cad_SendData>
	  u8x8_cad_SendData(u8x8, 8, ptr);
	  ptr += 8;
	  c--;
	} while( c > 0 );
	*/
	arg_int--;
    1e68:	c1 50       	subi	r28, 0x01	; 1
      } while( arg_int > 0 );
    1e6a:	91 f7       	brne	.-28     	; 0x1e50 <u8x8_d_ssd1306_sh1106_generic+0xdc>
      
      u8x8_cad_EndTransfer(u8x8);
    1e6c:	c8 01       	movw	r24, r16
    1e6e:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <u8x8_cad_EndTransfer>
      break;
    default:
      return 0;
  }
  return 1;
    1e72:	81 e0       	ldi	r24, 0x01	; 1
	*/
	arg_int--;
      } while( arg_int > 0 );
      
      u8x8_cad_EndTransfer(u8x8);
      break;
    1e74:	01 c0       	rjmp	.+2      	; 0x1e78 <u8x8_d_ssd1306_sh1106_generic+0x104>
    default:
      return 0;
    1e76:	80 e0       	ldi	r24, 0x00	; 0
  }
  return 1;
}
    1e78:	df 91       	pop	r29
    1e7a:	cf 91       	pop	r28
    1e7c:	1f 91       	pop	r17
    1e7e:	0f 91       	pop	r16
    1e80:	ff 90       	pop	r15
    1e82:	ef 90       	pop	r14
    1e84:	08 95       	ret

00001e86 <u8x8_d_ssd1306_128x64_noname>:
  /* pixel_width = */ 128,
  /* pixel_height = */ 64
};

uint8_t u8x8_d_ssd1306_128x64_noname(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
    1e86:	0f 93       	push	r16
    1e88:	1f 93       	push	r17
    1e8a:	cf 93       	push	r28
    1e8c:	8c 01       	movw	r16, r24
    1e8e:	c6 2f       	mov	r28, r22
    
  if ( u8x8_d_ssd1306_sh1106_generic(u8x8, msg, arg_int, arg_ptr) != 0 )
    1e90:	0e 94 ba 0e 	call	0x1d74	; 0x1d74 <u8x8_d_ssd1306_sh1106_generic>
    1e94:	81 11       	cpse	r24, r1
    1e96:	15 c0       	rjmp	.+42     	; 0x1ec2 <u8x8_d_ssd1306_128x64_noname+0x3c>
    return 1;
  
  switch(msg)
    1e98:	c9 30       	cpi	r28, 0x09	; 9
    1e9a:	61 f0       	breq	.+24     	; 0x1eb4 <u8x8_d_ssd1306_128x64_noname+0x2e>
    1e9c:	ca 30       	cpi	r28, 0x0A	; 10
    1e9e:	91 f4       	brne	.+36     	; 0x1ec4 <u8x8_d_ssd1306_128x64_noname+0x3e>
  {
    case U8X8_MSG_DISPLAY_INIT:
      u8x8_d_helper_display_init(u8x8);
    1ea0:	c8 01       	movw	r24, r16
    1ea2:	0e 94 32 0e 	call	0x1c64	; 0x1c64 <u8x8_d_helper_display_init>
      u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_init_seq);    
    1ea6:	68 e3       	ldi	r22, 0x38	; 56
    1ea8:	71 e0       	ldi	r23, 0x01	; 1
    1eaa:	c8 01       	movw	r24, r16
    1eac:	0e 94 63 0d 	call	0x1ac6	; 0x1ac6 <u8x8_cad_SendSequence>
      u8x8_d_helper_display_setup_memory(u8x8, &u8x8_ssd1306_128x64_noname_display_info);
      break;
    default:
      return 0;
  }
  return 1;
    1eb0:	81 e0       	ldi	r24, 0x01	; 1
  switch(msg)
  {
    case U8X8_MSG_DISPLAY_INIT:
      u8x8_d_helper_display_init(u8x8);
      u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_init_seq);    
      break;
    1eb2:	08 c0       	rjmp	.+16     	; 0x1ec4 <u8x8_d_ssd1306_128x64_noname+0x3e>
    case U8X8_MSG_DISPLAY_SETUP_MEMORY:
      u8x8_d_helper_display_setup_memory(u8x8, &u8x8_ssd1306_128x64_noname_display_info);
    1eb4:	68 e0       	ldi	r22, 0x08	; 8
    1eb6:	71 e0       	ldi	r23, 0x01	; 1
    1eb8:	c8 01       	movw	r24, r16
    1eba:	0e 94 2a 0e 	call	0x1c54	; 0x1c54 <u8x8_d_helper_display_setup_memory>
      break;
    default:
      return 0;
  }
  return 1;
    1ebe:	81 e0       	ldi	r24, 0x01	; 1
      u8x8_d_helper_display_init(u8x8);
      u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_init_seq);    
      break;
    case U8X8_MSG_DISPLAY_SETUP_MEMORY:
      u8x8_d_helper_display_setup_memory(u8x8, &u8x8_ssd1306_128x64_noname_display_info);
      break;
    1ec0:	01 c0       	rjmp	.+2      	; 0x1ec4 <u8x8_d_ssd1306_128x64_noname+0x3e>

uint8_t u8x8_d_ssd1306_128x64_noname(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
    
  if ( u8x8_d_ssd1306_sh1106_generic(u8x8, msg, arg_int, arg_ptr) != 0 )
    return 1;
    1ec2:	81 e0       	ldi	r24, 0x01	; 1
      break;
    default:
      return 0;
  }
  return 1;
}
    1ec4:	cf 91       	pop	r28
    1ec6:	1f 91       	pop	r17
    1ec8:	0f 91       	pop	r16
    1eca:	08 95       	ret

00001ecc <u8x8_gpio_call>:
#include "u8x8.h"


void u8x8_gpio_call(u8x8_t *u8x8, uint8_t msg, uint8_t arg)
{
  u8x8->gpio_and_delay_cb(u8x8, msg, arg, NULL);
    1ecc:	dc 01       	movw	r26, r24
    1ece:	1a 96       	adiw	r26, 0x0a	; 10
    1ed0:	ed 91       	ld	r30, X+
    1ed2:	fc 91       	ld	r31, X
    1ed4:	1b 97       	sbiw	r26, 0x0b	; 11
    1ed6:	20 e0       	ldi	r18, 0x00	; 0
    1ed8:	30 e0       	ldi	r19, 0x00	; 0
    1eda:	09 95       	icall
    1edc:	08 95       	ret

00001ede <u8x8_dummy_cb>:
      u8x8_d_helper_display_init(u8x8);
      break;
  }
  /* the null device callback will succeed for all messages */
  return 1;
}
    1ede:	80 e0       	ldi	r24, 0x00	; 0
    1ee0:	08 95       	ret

00001ee2 <u8x8_SetupDefaults>:
    Setup u8x8
  Args:
    u8x8	An empty u8x8 structure
*/
void u8x8_SetupDefaults(u8x8_t *u8x8)
{
    1ee2:	fc 01       	movw	r30, r24
    u8x8->display_info = NULL;
    1ee4:	11 82       	std	Z+1, r1	; 0x01
    1ee6:	10 82       	st	Z, r1
    u8x8->display_cb = u8x8_dummy_cb;
    1ee8:	8f e6       	ldi	r24, 0x6F	; 111
    1eea:	9f e0       	ldi	r25, 0x0F	; 15
    1eec:	95 83       	std	Z+5, r25	; 0x05
    1eee:	84 83       	std	Z+4, r24	; 0x04
    u8x8->cad_cb = u8x8_dummy_cb;
    1ef0:	97 83       	std	Z+7, r25	; 0x07
    1ef2:	86 83       	std	Z+6, r24	; 0x06
    u8x8->byte_cb = u8x8_dummy_cb;
    1ef4:	91 87       	std	Z+9, r25	; 0x09
    1ef6:	80 87       	std	Z+8, r24	; 0x08
    u8x8->gpio_and_delay_cb = u8x8_dummy_cb;
    1ef8:	93 87       	std	Z+11, r25	; 0x0b
    1efa:	82 87       	std	Z+10, r24	; 0x0a
    u8x8->is_font_inverse_mode = 0;
    1efc:	15 8a       	std	Z+21, r1	; 0x15
    //u8x8->device_address = 0;
    u8x8->utf8_state = 0;		/* also reset by u8x8_utf8_init */
    1efe:	10 8e       	std	Z+24, r1	; 0x18
    u8x8->bus_clock = 0;		/* issue 769 */
    1f00:	14 86       	std	Z+12, r1	; 0x0c
    1f02:	15 86       	std	Z+13, r1	; 0x0d
    1f04:	16 86       	std	Z+14, r1	; 0x0e
    1f06:	17 86       	std	Z+15, r1	; 0x0f
    u8x8->i2c_address = 255;
    1f08:	8f ef       	ldi	r24, 0xFF	; 255
    1f0a:	86 8b       	std	Z+22, r24	; 0x16
    u8x8->debounce_default_pin_state = 255;	/* assume all low active buttons */
    1f0c:	82 8f       	std	Z+26, r24	; 0x1a
    1f0e:	08 95       	ret

00001f10 <u8x8_Setup>:
    byte_cb			Display controller/communication specific callback funtion
    gpio_and_delay_cb	Environment specific callback function

*/
void u8x8_Setup(u8x8_t *u8x8, u8x8_msg_cb display_cb, u8x8_msg_cb cad_cb, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
    1f10:	af 92       	push	r10
    1f12:	bf 92       	push	r11
    1f14:	cf 92       	push	r12
    1f16:	df 92       	push	r13
    1f18:	ef 92       	push	r14
    1f1a:	ff 92       	push	r15
    1f1c:	0f 93       	push	r16
    1f1e:	1f 93       	push	r17
    1f20:	cf 93       	push	r28
    1f22:	df 93       	push	r29
    1f24:	ec 01       	movw	r28, r24
    1f26:	5b 01       	movw	r10, r22
    1f28:	6a 01       	movw	r12, r20
    1f2a:	79 01       	movw	r14, r18
  /* setup defaults and reset pins to U8X8_PIN_NONE */
  u8x8_SetupDefaults(u8x8);
    1f2c:	0e 94 71 0f 	call	0x1ee2	; 0x1ee2 <u8x8_SetupDefaults>

  /* setup specific callbacks */
  u8x8->display_cb = display_cb;
    1f30:	bd 82       	std	Y+5, r11	; 0x05
    1f32:	ac 82       	std	Y+4, r10	; 0x04
  u8x8->cad_cb = cad_cb;
    1f34:	df 82       	std	Y+7, r13	; 0x07
    1f36:	ce 82       	std	Y+6, r12	; 0x06
  u8x8->byte_cb = byte_cb;
    1f38:	f9 86       	std	Y+9, r15	; 0x09
    1f3a:	e8 86       	std	Y+8, r14	; 0x08
  u8x8->gpio_and_delay_cb = gpio_and_delay_cb;
    1f3c:	1b 87       	std	Y+11, r17	; 0x0b
    1f3e:	0a 87       	std	Y+10, r16	; 0x0a

  /* setup display info */
  u8x8_SetupMemory(u8x8);
    1f40:	ce 01       	movw	r24, r28
    1f42:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <u8x8_SetupMemory>
}
    1f46:	df 91       	pop	r29
    1f48:	cf 91       	pop	r28
    1f4a:	1f 91       	pop	r17
    1f4c:	0f 91       	pop	r16
    1f4e:	ff 90       	pop	r15
    1f50:	ef 90       	pop	r14
    1f52:	df 90       	pop	r13
    1f54:	cf 90       	pop	r12
    1f56:	bf 90       	pop	r11
    1f58:	af 90       	pop	r10
    1f5a:	08 95       	ret

00001f5c <i2c_init>:
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
{
    return i2c_start( address );

}/* i2c_rep_start */
    1f5c:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
    1f60:	88 e4       	ldi	r24, 0x48	; 72
    1f62:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
    1f66:	08 95       	ret

00001f68 <i2c_start_wait>:
    1f68:	0f 93       	push	r16
    1f6a:	1f 93       	push	r17
    1f6c:	94 ea       	ldi	r25, 0xA4	; 164
    1f6e:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    1f72:	4f ef       	ldi	r20, 0xFF	; 255
    1f74:	50 e0       	ldi	r21, 0x00	; 0
    1f76:	60 e0       	ldi	r22, 0x00	; 0
    1f78:	70 e0       	ldi	r23, 0x00	; 0
    1f7a:	02 c0       	rjmp	.+4      	; 0x1f80 <i2c_start_wait+0x18>
    1f7c:	b9 01       	movw	r22, r18
    1f7e:	a8 01       	movw	r20, r16
    1f80:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    1f84:	99 23       	and	r25, r25
    1f86:	54 f0       	brlt	.+20     	; 0x1f9c <i2c_start_wait+0x34>
    1f88:	8a 01       	movw	r16, r20
    1f8a:	9b 01       	movw	r18, r22
    1f8c:	01 50       	subi	r16, 0x01	; 1
    1f8e:	11 09       	sbc	r17, r1
    1f90:	21 09       	sbc	r18, r1
    1f92:	31 09       	sbc	r19, r1
    1f94:	45 2b       	or	r20, r21
    1f96:	46 2b       	or	r20, r22
    1f98:	47 2b       	or	r20, r23
    1f9a:	81 f7       	brne	.-32     	; 0x1f7c <i2c_start_wait+0x14>
    1f9c:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
    1fa0:	98 7f       	andi	r25, 0xF8	; 248
    1fa2:	98 30       	cpi	r25, 0x08	; 8
    1fa4:	11 f0       	breq	.+4      	; 0x1faa <i2c_start_wait+0x42>
    1fa6:	90 31       	cpi	r25, 0x10	; 16
    1fa8:	09 f7       	brne	.-62     	; 0x1f6c <i2c_start_wait+0x4>
    1faa:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
    1fae:	94 e8       	ldi	r25, 0x84	; 132
    1fb0:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    1fb4:	4f ef       	ldi	r20, 0xFF	; 255
    1fb6:	50 e0       	ldi	r21, 0x00	; 0
    1fb8:	60 e0       	ldi	r22, 0x00	; 0
    1fba:	70 e0       	ldi	r23, 0x00	; 0
    1fbc:	02 c0       	rjmp	.+4      	; 0x1fc2 <i2c_start_wait+0x5a>
    1fbe:	b9 01       	movw	r22, r18
    1fc0:	a8 01       	movw	r20, r16
    1fc2:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    1fc6:	99 23       	and	r25, r25
    1fc8:	54 f0       	brlt	.+20     	; 0x1fde <i2c_start_wait+0x76>
    1fca:	8a 01       	movw	r16, r20
    1fcc:	9b 01       	movw	r18, r22
    1fce:	01 50       	subi	r16, 0x01	; 1
    1fd0:	11 09       	sbc	r17, r1
    1fd2:	21 09       	sbc	r18, r1
    1fd4:	31 09       	sbc	r19, r1
    1fd6:	45 2b       	or	r20, r21
    1fd8:	46 2b       	or	r20, r22
    1fda:	47 2b       	or	r20, r23
    1fdc:	81 f7       	brne	.-32     	; 0x1fbe <i2c_start_wait+0x56>
    1fde:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
    1fe2:	98 7f       	andi	r25, 0xF8	; 248
    1fe4:	90 32       	cpi	r25, 0x20	; 32
    1fe6:	11 f0       	breq	.+4      	; 0x1fec <i2c_start_wait+0x84>
    1fe8:	98 35       	cpi	r25, 0x58	; 88
    1fea:	c9 f4       	brne	.+50     	; 0x201e <i2c_start_wait+0xb6>
    1fec:	94 e9       	ldi	r25, 0x94	; 148
    1fee:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    1ff2:	4f ef       	ldi	r20, 0xFF	; 255
    1ff4:	50 e0       	ldi	r21, 0x00	; 0
    1ff6:	60 e0       	ldi	r22, 0x00	; 0
    1ff8:	70 e0       	ldi	r23, 0x00	; 0
    1ffa:	02 c0       	rjmp	.+4      	; 0x2000 <i2c_start_wait+0x98>
    1ffc:	b9 01       	movw	r22, r18
    1ffe:	a8 01       	movw	r20, r16
    2000:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    2004:	94 ff       	sbrs	r25, 4
    2006:	b2 cf       	rjmp	.-156    	; 0x1f6c <i2c_start_wait+0x4>
    2008:	8a 01       	movw	r16, r20
    200a:	9b 01       	movw	r18, r22
    200c:	01 50       	subi	r16, 0x01	; 1
    200e:	11 09       	sbc	r17, r1
    2010:	21 09       	sbc	r18, r1
    2012:	31 09       	sbc	r19, r1
    2014:	45 2b       	or	r20, r21
    2016:	46 2b       	or	r20, r22
    2018:	47 2b       	or	r20, r23
    201a:	81 f7       	brne	.-32     	; 0x1ffc <i2c_start_wait+0x94>
    201c:	a7 cf       	rjmp	.-178    	; 0x1f6c <i2c_start_wait+0x4>
    201e:	1f 91       	pop	r17
    2020:	0f 91       	pop	r16
    2022:	08 95       	ret

00002024 <i2c_stop>:
void i2c_stop(void)
{
	uint32_t  i2c_timer = 0;

    /* send stop condition */
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    2024:	84 e9       	ldi	r24, 0x94	; 148
    2026:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	
	// wait until stop condition is executed and bus released
	i2c_timer = I2C_TIMER_DELAY;
    202a:	8f ef       	ldi	r24, 0xFF	; 255
    202c:	90 e0       	ldi	r25, 0x00	; 0
    202e:	a0 e0       	ldi	r26, 0x00	; 0
    2030:	b0 e0       	ldi	r27, 0x00	; 0
	while((TWCR & (1<<TWSTO)) && i2c_timer--);
    2032:	02 c0       	rjmp	.+4      	; 0x2038 <i2c_stop+0x14>
    2034:	db 01       	movw	r26, r22
    2036:	ca 01       	movw	r24, r20
    2038:	20 91 bc 00 	lds	r18, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    203c:	24 ff       	sbrs	r18, 4
    203e:	0a c0       	rjmp	.+20     	; 0x2054 <i2c_stop+0x30>
    2040:	ac 01       	movw	r20, r24
    2042:	bd 01       	movw	r22, r26
    2044:	41 50       	subi	r20, 0x01	; 1
    2046:	51 09       	sbc	r21, r1
    2048:	61 09       	sbc	r22, r1
    204a:	71 09       	sbc	r23, r1
    204c:	89 2b       	or	r24, r25
    204e:	8a 2b       	or	r24, r26
    2050:	8b 2b       	or	r24, r27
    2052:	81 f7       	brne	.-32     	; 0x2034 <i2c_stop+0x10>
    2054:	08 95       	ret

00002056 <i2c_write>:
{	
	uint32_t  i2c_timer = 0;
    uint8_t   twst;
    
	// send data to the previously addressed device
	TWDR = data;
    2056:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
	TWCR = (1<<TWINT) | (1<<TWEN);
    205a:	84 e8       	ldi	r24, 0x84	; 132
    205c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>

	// wait until transmission completed
	i2c_timer = I2C_TIMER_DELAY;
    2060:	8f ef       	ldi	r24, 0xFF	; 255
    2062:	90 e0       	ldi	r25, 0x00	; 0
    2064:	a0 e0       	ldi	r26, 0x00	; 0
    2066:	b0 e0       	ldi	r27, 0x00	; 0
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
    2068:	02 c0       	rjmp	.+4      	; 0x206e <i2c_write+0x18>
    206a:	db 01       	movw	r26, r22
    206c:	ca 01       	movw	r24, r20
    206e:	20 91 bc 00 	lds	r18, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    2072:	22 23       	and	r18, r18
    2074:	64 f0       	brlt	.+24     	; 0x208e <i2c_write+0x38>
    2076:	ac 01       	movw	r20, r24
    2078:	bd 01       	movw	r22, r26
    207a:	41 50       	subi	r20, 0x01	; 1
    207c:	51 09       	sbc	r21, r1
    207e:	61 09       	sbc	r22, r1
    2080:	71 09       	sbc	r23, r1
    2082:	89 2b       	or	r24, r25
    2084:	8a 2b       	or	r24, r26
    2086:	8b 2b       	or	r24, r27
    2088:	81 f7       	brne	.-32     	; 0x206a <i2c_write+0x14>
    208a:	db 01       	movw	r26, r22
    208c:	ca 01       	movw	r24, r20
	if(i2c_timer == 0)
    208e:	89 2b       	or	r24, r25
    2090:	8a 2b       	or	r24, r26
    2092:	8b 2b       	or	r24, r27
    2094:	39 f0       	breq	.+14     	; 0x20a4 <i2c_write+0x4e>
		return 1;

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
    2096:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
    209a:	88 7f       	andi	r24, 0xF8	; 248
	if( twst != TW_MT_DATA_ACK) return 1;
    209c:	88 32       	cpi	r24, 0x28	; 40
    209e:	21 f0       	breq	.+8      	; 0x20a8 <i2c_write+0x52>
    20a0:	81 e0       	ldi	r24, 0x01	; 1
    20a2:	08 95       	ret

	// wait until transmission completed
	i2c_timer = I2C_TIMER_DELAY;
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
	if(i2c_timer == 0)
		return 1;
    20a4:	81 e0       	ldi	r24, 0x01	; 1
    20a6:	08 95       	ret

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
	if( twst != TW_MT_DATA_ACK) return 1;
	return 0;
    20a8:	80 e0       	ldi	r24, 0x00	; 0

}/* i2c_write */
    20aa:	08 95       	ret

000020ac <u8x8_byte_avr_hw_i2c>:
}
#endif

#ifdef AVR_USE_HW_I2C
uint8_t u8x8_byte_avr_hw_i2c(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
    20ac:	0f 93       	push	r16
    20ae:	1f 93       	push	r17
    20b0:	cf 93       	push	r28
	uint8_t *data;
	switch(msg){
    20b2:	68 31       	cpi	r22, 0x18	; 24
    20b4:	f9 f0       	breq	.+62     	; 0x20f4 <u8x8_byte_avr_hw_i2c+0x48>
    20b6:	28 f4       	brcc	.+10     	; 0x20c2 <u8x8_byte_avr_hw_i2c+0x16>
    20b8:	64 31       	cpi	r22, 0x14	; 20
    20ba:	c1 f0       	breq	.+48     	; 0x20ec <u8x8_byte_avr_hw_i2c+0x40>
    20bc:	67 31       	cpi	r22, 0x17	; 23
    20be:	81 f0       	breq	.+32     	; 0x20e0 <u8x8_byte_avr_hw_i2c+0x34>
    20c0:	04 c0       	rjmp	.+8      	; 0x20ca <u8x8_byte_avr_hw_i2c+0x1e>
    20c2:	69 31       	cpi	r22, 0x19	; 25
    20c4:	e9 f0       	breq	.+58     	; 0x2100 <u8x8_byte_avr_hw_i2c+0x54>
    20c6:	60 32       	cpi	r22, 0x20	; 32
    20c8:	f9 f0       	breq	.+62     	; 0x2108 <u8x8_byte_avr_hw_i2c+0x5c>
			break;
		case U8X8_MSG_BYTE_END_TRANSFER:
			i2c_stop();
			break;
		default:
			return 0;
    20ca:	80 e0       	ldi	r24, 0x00	; 0
    20cc:	1e c0       	rjmp	.+60     	; 0x210a <u8x8_byte_avr_hw_i2c+0x5e>
	uint8_t *data;
	switch(msg){
		case U8X8_MSG_BYTE_SEND:
			data = (uint8_t *)arg_ptr;
			while( arg_int-- )
				i2c_write(*data++);
    20ce:	89 01       	movw	r16, r18
    20d0:	0f 5f       	subi	r16, 0xFF	; 255
    20d2:	1f 4f       	sbci	r17, 0xFF	; 255
    20d4:	f9 01       	movw	r30, r18
    20d6:	80 81       	ld	r24, Z
    20d8:	0e 94 2b 10 	call	0x2056	; 0x2056 <i2c_write>
{
	uint8_t *data;
	switch(msg){
		case U8X8_MSG_BYTE_SEND:
			data = (uint8_t *)arg_ptr;
			while( arg_int-- )
    20dc:	4c 2f       	mov	r20, r28
				i2c_write(*data++);
    20de:	98 01       	movw	r18, r16
{
	uint8_t *data;
	switch(msg){
		case U8X8_MSG_BYTE_SEND:
			data = (uint8_t *)arg_ptr;
			while( arg_int-- )
    20e0:	cf ef       	ldi	r28, 0xFF	; 255
    20e2:	c4 0f       	add	r28, r20
    20e4:	41 11       	cpse	r20, r1
    20e6:	f3 cf       	rjmp	.-26     	; 0x20ce <u8x8_byte_avr_hw_i2c+0x22>
			i2c_stop();
			break;
		default:
			return 0;
	}
	return 1;
    20e8:	81 e0       	ldi	r24, 0x01	; 1
    20ea:	0f c0       	rjmp	.+30     	; 0x210a <u8x8_byte_avr_hw_i2c+0x5e>
			data = (uint8_t *)arg_ptr;
			while( arg_int-- )
				i2c_write(*data++);
			break;
		case U8X8_MSG_BYTE_INIT:
			i2c_init();
    20ec:	0e 94 ae 0f 	call	0x1f5c	; 0x1f5c <i2c_init>
			i2c_stop();
			break;
		default:
			return 0;
	}
	return 1;
    20f0:	81 e0       	ldi	r24, 0x01	; 1
			while( arg_int-- )
				i2c_write(*data++);
			break;
		case U8X8_MSG_BYTE_INIT:
			i2c_init();
			break;
    20f2:	0b c0       	rjmp	.+22     	; 0x210a <u8x8_byte_avr_hw_i2c+0x5e>
		case U8X8_MSG_BYTE_SET_DC:
			/* ignored for i2c */
			break;
		case U8X8_MSG_BYTE_START_TRANSFER:
			i2c_start_wait(u8x8_GetI2CAddress(u8x8)+I2C_WRITE);
    20f4:	fc 01       	movw	r30, r24
    20f6:	86 89       	ldd	r24, Z+22	; 0x16
    20f8:	0e 94 b4 0f 	call	0x1f68	; 0x1f68 <i2c_start_wait>
			i2c_stop();
			break;
		default:
			return 0;
	}
	return 1;
    20fc:	81 e0       	ldi	r24, 0x01	; 1
		case U8X8_MSG_BYTE_SET_DC:
			/* ignored for i2c */
			break;
		case U8X8_MSG_BYTE_START_TRANSFER:
			i2c_start_wait(u8x8_GetI2CAddress(u8x8)+I2C_WRITE);
			break;
    20fe:	05 c0       	rjmp	.+10     	; 0x210a <u8x8_byte_avr_hw_i2c+0x5e>
		case U8X8_MSG_BYTE_END_TRANSFER:
			i2c_stop();
    2100:	0e 94 12 10 	call	0x2024	; 0x2024 <i2c_stop>
			break;
		default:
			return 0;
	}
	return 1;
    2104:	81 e0       	ldi	r24, 0x01	; 1
		case U8X8_MSG_BYTE_START_TRANSFER:
			i2c_start_wait(u8x8_GetI2CAddress(u8x8)+I2C_WRITE);
			break;
		case U8X8_MSG_BYTE_END_TRANSFER:
			i2c_stop();
			break;
    2106:	01 c0       	rjmp	.+2      	; 0x210a <u8x8_byte_avr_hw_i2c+0x5e>
		default:
			return 0;
	}
	return 1;
    2108:	81 e0       	ldi	r24, 0x01	; 1
}
    210a:	cf 91       	pop	r28
    210c:	1f 91       	pop	r17
    210e:	0f 91       	pop	r16
    2110:	08 95       	ret

00002112 <u8x8_avr_delay>:
#endif

uint8_t u8x8_avr_delay (u8x8_t * u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr) {
	uint8_t cycles;

	switch(msg) {
    2112:	6a 32       	cpi	r22, 0x2A	; 42
    2114:	11 f1       	breq	.+68     	; 0x215a <u8x8_avr_delay+0x48>
    2116:	18 f4       	brcc	.+6      	; 0x211e <u8x8_avr_delay+0xc>
    2118:	69 32       	cpi	r22, 0x29	; 41
    211a:	61 f1       	breq	.+88     	; 0x2174 <u8x8_avr_delay+0x62>
    211c:	04 c0       	rjmp	.+8      	; 0x2126 <u8x8_avr_delay+0x14>
    211e:	6b 32       	cpi	r22, 0x2B	; 43
    2120:	21 f0       	breq	.+8      	; 0x212a <u8x8_avr_delay+0x18>
    2122:	6c 32       	cpi	r22, 0x2C	; 44
    2124:	69 f1       	breq	.+90     	; 0x2180 <u8x8_avr_delay+0x6e>
			break;
		case U8X8_MSG_DELAY_MILLI:  // delay arg_int * 1 milli second
			while( arg_int-- ) _delay_ms(1);
			break;
		default:
			return 0;
    2126:	80 e0       	ldi	r24, 0x00	; 0
    2128:	08 95       	ret
			#define CALL_CYCLES 26UL
			#define CALC_CYCLES 4UL
			#define RETURN_CYCLES 4UL
			#define CYCLES_PER_LOOP 4UL

			cycles = (100UL * arg_int) / (P_CPU_NS * CYCLES_PER_LOOP);
    212a:	24 2f       	mov	r18, r20
    212c:	30 e0       	ldi	r19, 0x00	; 0
    212e:	a4 e6       	ldi	r26, 0x64	; 100
    2130:	b0 e0       	ldi	r27, 0x00	; 0
    2132:	0e 94 ff 13 	call	0x27fe	; 0x27fe <__umulhisi3>
    2136:	28 ef       	ldi	r18, 0xF8	; 248
    2138:	30 e0       	ldi	r19, 0x00	; 0
    213a:	40 e0       	ldi	r20, 0x00	; 0
    213c:	50 e0       	ldi	r21, 0x00	; 0
    213e:	0e 94 dd 13 	call	0x27ba	; 0x27ba <__udivmodsi4>

			if (cycles > CALL_CYCLES + RETURN_CYCLES + CALC_CYCLES)
    2142:	23 32       	cpi	r18, 0x23	; 35
    2144:	f8 f4       	brcc	.+62     	; 0x2184 <u8x8_avr_delay+0x72>
				break;

			__asm__ __volatile__ (
    2146:	82 2f       	mov	r24, r18
    2148:	01 97       	sbiw	r24, 0x01	; 1
    214a:	f1 f7       	brne	.-4      	; 0x2148 <u8x8_avr_delay+0x36>
			break;
		default:
			return 0;
	}

	return 1;
    214c:	81 e0       	ldi	r24, 0x01	; 1

			__asm__ __volatile__ (
			  "1: sbiw %0,1" "\n\t"  // 2 cycles
			  "brne 1b":"=w" (cycles):"0" (cycles)  // 2 cycles
			);
			break;
    214e:	08 95       	ret
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    2150:	95 e3       	ldi	r25, 0x35	; 53
    2152:	9a 95       	dec	r25
    2154:	f1 f7       	brne	.-4      	; 0x2152 <u8x8_avr_delay+0x40>
    2156:	00 00       	nop
		case U8X8_MSG_DELAY_10MICRO: // delay arg_int * 10 micro seconds
			while( arg_int-- ) _delay_us(10);
    2158:	48 2f       	mov	r20, r24
    215a:	8f ef       	ldi	r24, 0xFF	; 255
    215c:	84 0f       	add	r24, r20
    215e:	41 11       	cpse	r20, r1
    2160:	f7 cf       	rjmp	.-18     	; 0x2150 <u8x8_avr_delay+0x3e>
			break;
		default:
			return 0;
	}

	return 1;
    2162:	81 e0       	ldi	r24, 0x01	; 1
    2164:	08 95       	ret
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    2166:	ef e9       	ldi	r30, 0x9F	; 159
    2168:	ff e0       	ldi	r31, 0x0F	; 15
    216a:	31 97       	sbiw	r30, 0x01	; 1
    216c:	f1 f7       	brne	.-4      	; 0x216a <u8x8_avr_delay+0x58>
    216e:	00 c0       	rjmp	.+0      	; 0x2170 <u8x8_avr_delay+0x5e>
    2170:	00 00       	nop
			break;
		case U8X8_MSG_DELAY_10MICRO: // delay arg_int * 10 micro seconds
			while( arg_int-- ) _delay_us(10);
			break;
		case U8X8_MSG_DELAY_MILLI:  // delay arg_int * 1 milli second
			while( arg_int-- ) _delay_ms(1);
    2172:	48 2f       	mov	r20, r24
    2174:	8f ef       	ldi	r24, 0xFF	; 255
    2176:	84 0f       	add	r24, r20
    2178:	41 11       	cpse	r20, r1
    217a:	f5 cf       	rjmp	.-22     	; 0x2166 <u8x8_avr_delay+0x54>
			break;
		default:
			return 0;
	}

	return 1;
    217c:	81 e0       	ldi	r24, 0x01	; 1
    217e:	08 95       	ret
    2180:	81 e0       	ldi	r24, 0x01	; 1
    2182:	08 95       	ret
    2184:	81 e0       	ldi	r24, 0x01	; 1
}
    2186:	08 95       	ret

00002188 <UV_light>:
	}
}


// when we want to turn on led we want to call this function
void UV_light(){
    2188:	0f 93       	push	r16
    218a:	1f 93       	push	r17
    218c:	cf 93       	push	r28
    218e:	df 93       	push	r29
	int temp = 0;
    2190:	00 e0       	ldi	r16, 0x00	; 0
    2192:	10 e0       	ldi	r17, 0x00	; 0

	while(temp <= type)
    2194:	d1 c0       	rjmp	.+418    	; 0x2338 <UV_light+0x1b0>
	{
		int i = 0;
		while (i<10){
			
			//If power is not supply then UV and Green Light can not be light up
			if ((~PIND & (1<<PIND2)))
    2196:	4a 99       	sbic	0x09, 2	; 9
    2198:	1f c0       	rjmp	.+62     	; 0x21d8 <UV_light+0x50>
			{
				PORTD &= ~(1<<PORTD3);
    219a:	8b b1       	in	r24, 0x0b	; 11
    219c:	87 7f       	andi	r24, 0xF7	; 247
    219e:	8b b9       	out	0x0b, r24	; 11
				PORTD &= ~(1<<PORTD5);
    21a0:	8b b1       	in	r24, 0x0b	; 11
    21a2:	8f 7d       	andi	r24, 0xDF	; 223
    21a4:	8b b9       	out	0x0b, r24	; 11
				// Sending information to LCD to print
				u8g2_ClearBuffer(&u8g2);
    21a6:	87 eb       	ldi	r24, 0xB7	; 183
    21a8:	96 e0       	ldi	r25, 0x06	; 6
    21aa:	0e 94 d7 05 	call	0xbae	; 0xbae <u8g2_ClearBuffer>
				u8g2_SetFont(&u8g2, u8g2_font_calibration_gothic_nbp_tr);
    21ae:	62 e4       	ldi	r22, 0x42	; 66
    21b0:	75 e0       	ldi	r23, 0x05	; 5
    21b2:	87 eb       	ldi	r24, 0xB7	; 183
    21b4:	96 e0       	ldi	r25, 0x06	; 6
    21b6:	0e 94 3a 0a 	call	0x1474	; 0x1474 <u8g2_SetFont>
				u8g2_DrawStr(&u8g2, 30, 30, "Caution..!");
    21ba:	2d e6       	ldi	r18, 0x6D	; 109
    21bc:	31 e0       	ldi	r19, 0x01	; 1
    21be:	4e e1       	ldi	r20, 0x1E	; 30
    21c0:	50 e0       	ldi	r21, 0x00	; 0
    21c2:	6e e1       	ldi	r22, 0x1E	; 30
    21c4:	70 e0       	ldi	r23, 0x00	; 0
    21c6:	87 eb       	ldi	r24, 0xB7	; 183
    21c8:	96 e0       	ldi	r25, 0x06	; 6
    21ca:	0e 94 d5 09 	call	0x13aa	; 0x13aa <u8g2_DrawStr>
				u8g2_SendBuffer(&u8g2);
    21ce:	87 eb       	ldi	r24, 0xB7	; 183
    21d0:	96 e0       	ldi	r25, 0x06	; 6
    21d2:	0e 94 ed 05 	call	0xbda	; 0xbda <u8g2_SendBuffer>
    21d6:	41 c0       	rjmp	.+130    	; 0x225a <UV_light+0xd2>
				// LCD ............

			}
			
			//If stop button push then forced stop
			else if(~PINC& (1<<PINC2))
    21d8:	32 99       	sbic	0x06, 2	; 6
    21da:	2c c0       	rjmp	.+88     	; 0x2234 <UV_light+0xac>
			{
				// Sending information to LCD to print
				u8g2_ClearBuffer(&u8g2);
    21dc:	87 eb       	ldi	r24, 0xB7	; 183
    21de:	96 e0       	ldi	r25, 0x06	; 6
    21e0:	0e 94 d7 05 	call	0xbae	; 0xbae <u8g2_ClearBuffer>
				u8g2_SetFont(&u8g2, u8g2_font_calibration_gothic_nbp_tr);
    21e4:	62 e4       	ldi	r22, 0x42	; 66
    21e6:	75 e0       	ldi	r23, 0x05	; 5
    21e8:	87 eb       	ldi	r24, 0xB7	; 183
    21ea:	96 e0       	ldi	r25, 0x06	; 6
    21ec:	0e 94 3a 0a 	call	0x1474	; 0x1474 <u8g2_SetFont>
				u8g2_DrawStr(&u8g2, 40, 20, "Force ");
    21f0:	28 e7       	ldi	r18, 0x78	; 120
    21f2:	31 e0       	ldi	r19, 0x01	; 1
    21f4:	44 e1       	ldi	r20, 0x14	; 20
    21f6:	50 e0       	ldi	r21, 0x00	; 0
    21f8:	68 e2       	ldi	r22, 0x28	; 40
    21fa:	70 e0       	ldi	r23, 0x00	; 0
    21fc:	87 eb       	ldi	r24, 0xB7	; 183
    21fe:	96 e0       	ldi	r25, 0x06	; 6
    2200:	0e 94 d5 09 	call	0x13aa	; 0x13aa <u8g2_DrawStr>
				u8g2_DrawStr(&u8g2, 30, 35, "Stopped");
    2204:	2f e7       	ldi	r18, 0x7F	; 127
    2206:	31 e0       	ldi	r19, 0x01	; 1
    2208:	43 e2       	ldi	r20, 0x23	; 35
    220a:	50 e0       	ldi	r21, 0x00	; 0
    220c:	6e e1       	ldi	r22, 0x1E	; 30
    220e:	70 e0       	ldi	r23, 0x00	; 0
    2210:	87 eb       	ldi	r24, 0xB7	; 183
    2212:	96 e0       	ldi	r25, 0x06	; 6
    2214:	0e 94 d5 09 	call	0x13aa	; 0x13aa <u8g2_DrawStr>
				u8g2_SendBuffer(&u8g2);
    2218:	87 eb       	ldi	r24, 0xB7	; 183
    221a:	96 e0       	ldi	r25, 0x06	; 6
    221c:	0e 94 ed 05 	call	0xbda	; 0xbda <u8g2_SendBuffer>
    2220:	2f ef       	ldi	r18, 0xFF	; 255
    2222:	81 ee       	ldi	r24, 0xE1	; 225
    2224:	94 e0       	ldi	r25, 0x04	; 4
    2226:	21 50       	subi	r18, 0x01	; 1
    2228:	80 40       	sbci	r24, 0x00	; 0
    222a:	90 40       	sbci	r25, 0x00	; 0
    222c:	e1 f7       	brne	.-8      	; 0x2226 <UV_light+0x9e>
    222e:	00 c0       	rjmp	.+0      	; 0x2230 <UV_light+0xa8>
    2230:	00 00       	nop
    2232:	c4 c0       	rjmp	.+392    	; 0x23bc <UV_light+0x234>
			}
			
			//If there no any other problem work UV and Green Led
			else
			{
				PORTD |= (1<<PORTD3);
    2234:	8b b1       	in	r24, 0x0b	; 11
    2236:	88 60       	ori	r24, 0x08	; 8
    2238:	8b b9       	out	0x0b, r24	; 11
				PORTD |= (1<<PORTD5);
    223a:	8b b1       	in	r24, 0x0b	; 11
    223c:	80 62       	ori	r24, 0x20	; 32
    223e:	8b b9       	out	0x0b, r24	; 11
    2240:	2f ef       	ldi	r18, 0xFF	; 255
    2242:	81 ee       	ldi	r24, 0xE1	; 225
    2244:	94 e0       	ldi	r25, 0x04	; 4
    2246:	21 50       	subi	r18, 0x01	; 1
    2248:	80 40       	sbci	r24, 0x00	; 0
    224a:	90 40       	sbci	r25, 0x00	; 0
    224c:	e1 f7       	brne	.-8      	; 0x2246 <UV_light+0xbe>
    224e:	00 c0       	rjmp	.+0      	; 0x2250 <UV_light+0xc8>
    2250:	00 00       	nop
				_delay_ms(100);
				i=i+1;
    2252:	21 96       	adiw	r28, 0x01	; 1
    2254:	02 c0       	rjmp	.+4      	; 0x225a <UV_light+0xd2>
    2256:	c0 e0       	ldi	r28, 0x00	; 0
    2258:	d0 e0       	ldi	r29, 0x00	; 0
	int temp = 0;

	while(temp <= type)
	{
		int i = 0;
		while (i<10){
    225a:	ca 30       	cpi	r28, 0x0A	; 10
    225c:	d1 05       	cpc	r29, r1
    225e:	0c f4       	brge	.+2      	; 0x2262 <UV_light+0xda>
    2260:	9a cf       	rjmp	.-204    	; 0x2196 <UV_light+0xe>
				_delay_ms(100);
				i=i+1;
			}
		}
		
		temp = temp+1;
    2262:	0f 5f       	subi	r16, 0xFF	; 255
    2264:	1f 4f       	sbci	r17, 0xFF	; 255
		minute = (type-temp)/60;
    2266:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    226a:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    226e:	80 1b       	sub	r24, r16
    2270:	91 0b       	sbc	r25, r17
    2272:	6c e3       	ldi	r22, 0x3C	; 60
    2274:	70 e0       	ldi	r23, 0x00	; 0
    2276:	0e 94 c9 13 	call	0x2792	; 0x2792 <__divmodhi4>
    227a:	60 93 2e 07 	sts	0x072E, r22	; 0x80072e <minute>
		second = (type-temp)%60;
    227e:	80 93 2d 07 	sts	0x072D, r24	; 0x80072d <second>
		if (second<10){sprintf(res, "0%d : 0%d", minute,second);}
    2282:	8a 30       	cpi	r24, 0x0A	; 10
    2284:	b8 f4       	brcc	.+46     	; 0x22b4 <UV_light+0x12c>
    2286:	1f 92       	push	r1
    2288:	8f 93       	push	r24
    228a:	1f 92       	push	r1
    228c:	6f 93       	push	r22
    228e:	87 e8       	ldi	r24, 0x87	; 135
    2290:	91 e0       	ldi	r25, 0x01	; 1
    2292:	9f 93       	push	r25
    2294:	8f 93       	push	r24
    2296:	83 e5       	ldi	r24, 0x53	; 83
    2298:	96 e0       	ldi	r25, 0x06	; 6
    229a:	9f 93       	push	r25
    229c:	8f 93       	push	r24
    229e:	0e 94 15 14 	call	0x282a	; 0x282a <sprintf>
    22a2:	8d b7       	in	r24, 0x3d	; 61
    22a4:	9e b7       	in	r25, 0x3e	; 62
    22a6:	08 96       	adiw	r24, 0x08	; 8
    22a8:	0f b6       	in	r0, 0x3f	; 63
    22aa:	f8 94       	cli
    22ac:	9e bf       	out	0x3e, r25	; 62
    22ae:	0f be       	out	0x3f, r0	; 63
    22b0:	8d bf       	out	0x3d, r24	; 61
    22b2:	16 c0       	rjmp	.+44     	; 0x22e0 <UV_light+0x158>
		
		else{sprintf(res, "0%d : %d", minute,second);}
    22b4:	1f 92       	push	r1
    22b6:	8f 93       	push	r24
    22b8:	1f 92       	push	r1
    22ba:	6f 93       	push	r22
    22bc:	81 e9       	ldi	r24, 0x91	; 145
    22be:	91 e0       	ldi	r25, 0x01	; 1
    22c0:	9f 93       	push	r25
    22c2:	8f 93       	push	r24
    22c4:	83 e5       	ldi	r24, 0x53	; 83
    22c6:	96 e0       	ldi	r25, 0x06	; 6
    22c8:	9f 93       	push	r25
    22ca:	8f 93       	push	r24
    22cc:	0e 94 15 14 	call	0x282a	; 0x282a <sprintf>
    22d0:	8d b7       	in	r24, 0x3d	; 61
    22d2:	9e b7       	in	r25, 0x3e	; 62
    22d4:	08 96       	adiw	r24, 0x08	; 8
    22d6:	0f b6       	in	r0, 0x3f	; 63
    22d8:	f8 94       	cli
    22da:	9e bf       	out	0x3e, r25	; 62
    22dc:	0f be       	out	0x3f, r0	; 63
    22de:	8d bf       	out	0x3d, r24	; 61
		
		// Sending information to LCD to print
		u8g2_ClearBuffer(&u8g2);
    22e0:	87 eb       	ldi	r24, 0xB7	; 183
    22e2:	96 e0       	ldi	r25, 0x06	; 6
    22e4:	0e 94 d7 05 	call	0xbae	; 0xbae <u8g2_ClearBuffer>
		u8g2_SetFont(&u8g2, u8g2_font_smart_patrol_nbp_tr);
    22e8:	68 e6       	ldi	r22, 0x68	; 104
    22ea:	70 e0       	ldi	r23, 0x00	; 0
    22ec:	87 eb       	ldi	r24, 0xB7	; 183
    22ee:	96 e0       	ldi	r25, 0x06	; 6
    22f0:	0e 94 3a 0a 	call	0x1474	; 0x1474 <u8g2_SetFont>
		u8g2_DrawStr(&u8g2, 30, 5, "**********");
    22f4:	2a e9       	ldi	r18, 0x9A	; 154
    22f6:	31 e0       	ldi	r19, 0x01	; 1
    22f8:	45 e0       	ldi	r20, 0x05	; 5
    22fa:	50 e0       	ldi	r21, 0x00	; 0
    22fc:	6e e1       	ldi	r22, 0x1E	; 30
    22fe:	70 e0       	ldi	r23, 0x00	; 0
    2300:	87 eb       	ldi	r24, 0xB7	; 183
    2302:	96 e0       	ldi	r25, 0x06	; 6
    2304:	0e 94 d5 09 	call	0x13aa	; 0x13aa <u8g2_DrawStr>
		u8g2_DrawStr(&u8g2, 30, 20, "Time Left");
    2308:	25 ea       	ldi	r18, 0xA5	; 165
    230a:	31 e0       	ldi	r19, 0x01	; 1
    230c:	44 e1       	ldi	r20, 0x14	; 20
    230e:	50 e0       	ldi	r21, 0x00	; 0
    2310:	6e e1       	ldi	r22, 0x1E	; 30
    2312:	70 e0       	ldi	r23, 0x00	; 0
    2314:	87 eb       	ldi	r24, 0xB7	; 183
    2316:	96 e0       	ldi	r25, 0x06	; 6
    2318:	0e 94 d5 09 	call	0x13aa	; 0x13aa <u8g2_DrawStr>
		u8g2_DrawStr(&u8g2, 40, 40, res);
    231c:	23 e5       	ldi	r18, 0x53	; 83
    231e:	36 e0       	ldi	r19, 0x06	; 6
    2320:	48 e2       	ldi	r20, 0x28	; 40
    2322:	50 e0       	ldi	r21, 0x00	; 0
    2324:	68 e2       	ldi	r22, 0x28	; 40
    2326:	70 e0       	ldi	r23, 0x00	; 0
    2328:	87 eb       	ldi	r24, 0xB7	; 183
    232a:	96 e0       	ldi	r25, 0x06	; 6
    232c:	0e 94 d5 09 	call	0x13aa	; 0x13aa <u8g2_DrawStr>
		u8g2_SendBuffer(&u8g2);
    2330:	87 eb       	ldi	r24, 0xB7	; 183
    2332:	96 e0       	ldi	r25, 0x06	; 6
    2334:	0e 94 ed 05 	call	0xbda	; 0xbda <u8g2_SendBuffer>

// when we want to turn on led we want to call this function
void UV_light(){
	int temp = 0;

	while(temp <= type)
    2338:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    233c:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    2340:	80 17       	cp	r24, r16
    2342:	91 07       	cpc	r25, r17
    2344:	0c f0       	brlt	.+2      	; 0x2348 <UV_light+0x1c0>
    2346:	87 cf       	rjmp	.-242    	; 0x2256 <UV_light+0xce>
		// LCD ............

		
	}
	
	PORTD &= ~(1<<PORTD3);
    2348:	8b b1       	in	r24, 0x0b	; 11
    234a:	87 7f       	andi	r24, 0xF7	; 247
    234c:	8b b9       	out	0x0b, r24	; 11
	PORTD &= ~(1<<PORTD5);
    234e:	8b b1       	in	r24, 0x0b	; 11
    2350:	8f 7d       	andi	r24, 0xDF	; 223
    2352:	8b b9       	out	0x0b, r24	; 11
	
	if (type+1==temp){
    2354:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    2358:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    235c:	01 96       	adiw	r24, 0x01	; 1
    235e:	08 17       	cp	r16, r24
    2360:	19 07       	cpc	r17, r25
    2362:	61 f5       	brne	.+88     	; 0x23bc <UV_light+0x234>
		
		// Sending information to LCD to print
		u8g2_ClearBuffer(&u8g2);
    2364:	87 eb       	ldi	r24, 0xB7	; 183
    2366:	96 e0       	ldi	r25, 0x06	; 6
    2368:	0e 94 d7 05 	call	0xbae	; 0xbae <u8g2_ClearBuffer>
		u8g2_SetFont(&u8g2, u8g2_font_smart_patrol_nbp_tr);
    236c:	68 e6       	ldi	r22, 0x68	; 104
    236e:	70 e0       	ldi	r23, 0x00	; 0
    2370:	87 eb       	ldi	r24, 0xB7	; 183
    2372:	96 e0       	ldi	r25, 0x06	; 6
    2374:	0e 94 3a 0a 	call	0x1474	; 0x1474 <u8g2_SetFont>
		u8g2_DrawStr(&u8g2, 50, 20, "O");
    2378:	2f ea       	ldi	r18, 0xAF	; 175
    237a:	31 e0       	ldi	r19, 0x01	; 1
    237c:	44 e1       	ldi	r20, 0x14	; 20
    237e:	50 e0       	ldi	r21, 0x00	; 0
    2380:	62 e3       	ldi	r22, 0x32	; 50
    2382:	70 e0       	ldi	r23, 0x00	; 0
    2384:	87 eb       	ldi	r24, 0xB7	; 183
    2386:	96 e0       	ldi	r25, 0x06	; 6
    2388:	0e 94 d5 09 	call	0x13aa	; 0x13aa <u8g2_DrawStr>
		u8g2_DrawStr(&u8g2, 40, 35, "/ | )");
    238c:	21 eb       	ldi	r18, 0xB1	; 177
    238e:	31 e0       	ldi	r19, 0x01	; 1
    2390:	43 e2       	ldi	r20, 0x23	; 35
    2392:	50 e0       	ldi	r21, 0x00	; 0
    2394:	68 e2       	ldi	r22, 0x28	; 40
    2396:	70 e0       	ldi	r23, 0x00	; 0
    2398:	87 eb       	ldi	r24, 0xB7	; 183
    239a:	96 e0       	ldi	r25, 0x06	; 6
    239c:	0e 94 d5 09 	call	0x13aa	; 0x13aa <u8g2_DrawStr>
		u8g2_DrawStr(&u8g2, 41, 45, "/  |..........");
    23a0:	27 eb       	ldi	r18, 0xB7	; 183
    23a2:	31 e0       	ldi	r19, 0x01	; 1
    23a4:	4d e2       	ldi	r20, 0x2D	; 45
    23a6:	50 e0       	ldi	r21, 0x00	; 0
    23a8:	69 e2       	ldi	r22, 0x29	; 41
    23aa:	70 e0       	ldi	r23, 0x00	; 0
    23ac:	87 eb       	ldi	r24, 0xB7	; 183
    23ae:	96 e0       	ldi	r25, 0x06	; 6
    23b0:	0e 94 d5 09 	call	0x13aa	; 0x13aa <u8g2_DrawStr>
		u8g2_SendBuffer(&u8g2);
    23b4:	87 eb       	ldi	r24, 0xB7	; 183
    23b6:	96 e0       	ldi	r25, 0x06	; 6
    23b8:	0e 94 ed 05 	call	0xbda	; 0xbda <u8g2_SendBuffer>
		// LCD ............
	}

	return;
	
}
    23bc:	df 91       	pop	r29
    23be:	cf 91       	pop	r28
    23c0:	1f 91       	pop	r17
    23c2:	0f 91       	pop	r16
    23c4:	08 95       	ret

000023c6 <updateMenu>:

void updateMenu(){
	switch(type){
    23c6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    23ca:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    23ce:	80 3e       	cpi	r24, 0xE0	; 224
    23d0:	21 e0       	ldi	r18, 0x01	; 1
    23d2:	92 07       	cpc	r25, r18
    23d4:	a9 f1       	breq	.+106    	; 0x2440 <updateMenu+0x7a>
    23d6:	88 35       	cpi	r24, 0x58	; 88
    23d8:	22 e0       	ldi	r18, 0x02	; 2
    23da:	92 07       	cpc	r25, r18
    23dc:	09 f4       	brne	.+2      	; 0x23e0 <updateMenu+0x1a>
    23de:	5c c0       	rjmp	.+184    	; 0x2498 <updateMenu+0xd2>
    23e0:	88 36       	cpi	r24, 0x68	; 104
    23e2:	91 40       	sbci	r25, 0x01	; 1
    23e4:	09 f0       	breq	.+2      	; 0x23e8 <updateMenu+0x22>
    23e6:	83 c0       	rjmp	.+262    	; 0x24ee <updateMenu+0x128>
		
		case 6*60:
		// Sending information to LCD to print
		u8g2_ClearBuffer(&u8g2);
    23e8:	87 eb       	ldi	r24, 0xB7	; 183
    23ea:	96 e0       	ldi	r25, 0x06	; 6
    23ec:	0e 94 d7 05 	call	0xbae	; 0xbae <u8g2_ClearBuffer>
		u8g2_SetFont(&u8g2, u8g2_font_smart_patrol_nbp_tr);
    23f0:	68 e6       	ldi	r22, 0x68	; 104
    23f2:	70 e0       	ldi	r23, 0x00	; 0
    23f4:	87 eb       	ldi	r24, 0xB7	; 183
    23f6:	96 e0       	ldi	r25, 0x06	; 6
    23f8:	0e 94 3a 0a 	call	0x1474	; 0x1474 <u8g2_SetFont>
		u8g2_DrawStr(&u8g2, 30, 20, "Small Items");
    23fc:	26 ec       	ldi	r18, 0xC6	; 198
    23fe:	31 e0       	ldi	r19, 0x01	; 1
    2400:	44 e1       	ldi	r20, 0x14	; 20
    2402:	50 e0       	ldi	r21, 0x00	; 0
    2404:	6e e1       	ldi	r22, 0x1E	; 30
    2406:	70 e0       	ldi	r23, 0x00	; 0
    2408:	87 eb       	ldi	r24, 0xB7	; 183
    240a:	96 e0       	ldi	r25, 0x06	; 6
    240c:	0e 94 d5 09 	call	0x13aa	; 0x13aa <u8g2_DrawStr>
		u8g2_DrawStr(&u8g2, 30, 40, "6 Minutes");
    2410:	22 ed       	ldi	r18, 0xD2	; 210
    2412:	31 e0       	ldi	r19, 0x01	; 1
    2414:	48 e2       	ldi	r20, 0x28	; 40
    2416:	50 e0       	ldi	r21, 0x00	; 0
    2418:	6e e1       	ldi	r22, 0x1E	; 30
    241a:	70 e0       	ldi	r23, 0x00	; 0
    241c:	87 eb       	ldi	r24, 0xB7	; 183
    241e:	96 e0       	ldi	r25, 0x06	; 6
    2420:	0e 94 d5 09 	call	0x13aa	; 0x13aa <u8g2_DrawStr>
		u8g2_SendBuffer(&u8g2);
    2424:	87 eb       	ldi	r24, 0xB7	; 183
    2426:	96 e0       	ldi	r25, 0x06	; 6
    2428:	0e 94 ed 05 	call	0xbda	; 0xbda <u8g2_SendBuffer>
    242c:	8f ef       	ldi	r24, 0xFF	; 255
    242e:	93 ec       	ldi	r25, 0xC3	; 195
    2430:	29 e0       	ldi	r18, 0x09	; 9
    2432:	81 50       	subi	r24, 0x01	; 1
    2434:	90 40       	sbci	r25, 0x00	; 0
    2436:	20 40       	sbci	r18, 0x00	; 0
    2438:	e1 f7       	brne	.-8      	; 0x2432 <updateMenu+0x6c>
    243a:	00 c0       	rjmp	.+0      	; 0x243c <updateMenu+0x76>
    243c:	00 00       	nop
    243e:	08 95       	ret
		// LCD ............
		break;
		
		case 8*60:                          //Third display state
		// Sending information to LCD to print
		u8g2_ClearBuffer(&u8g2);
    2440:	87 eb       	ldi	r24, 0xB7	; 183
    2442:	96 e0       	ldi	r25, 0x06	; 6
    2444:	0e 94 d7 05 	call	0xbae	; 0xbae <u8g2_ClearBuffer>
		u8g2_SetFont(&u8g2, u8g2_font_smart_patrol_nbp_tr);
    2448:	68 e6       	ldi	r22, 0x68	; 104
    244a:	70 e0       	ldi	r23, 0x00	; 0
    244c:	87 eb       	ldi	r24, 0xB7	; 183
    244e:	96 e0       	ldi	r25, 0x06	; 6
    2450:	0e 94 3a 0a 	call	0x1474	; 0x1474 <u8g2_SetFont>
		u8g2_DrawStr(&u8g2, 20, 20, "Medium Items");
    2454:	2c ed       	ldi	r18, 0xDC	; 220
    2456:	31 e0       	ldi	r19, 0x01	; 1
    2458:	44 e1       	ldi	r20, 0x14	; 20
    245a:	50 e0       	ldi	r21, 0x00	; 0
    245c:	64 e1       	ldi	r22, 0x14	; 20
    245e:	70 e0       	ldi	r23, 0x00	; 0
    2460:	87 eb       	ldi	r24, 0xB7	; 183
    2462:	96 e0       	ldi	r25, 0x06	; 6
    2464:	0e 94 d5 09 	call	0x13aa	; 0x13aa <u8g2_DrawStr>
		u8g2_DrawStr(&u8g2, 30, 40, "8 Minutes");
    2468:	29 ee       	ldi	r18, 0xE9	; 233
    246a:	31 e0       	ldi	r19, 0x01	; 1
    246c:	48 e2       	ldi	r20, 0x28	; 40
    246e:	50 e0       	ldi	r21, 0x00	; 0
    2470:	6e e1       	ldi	r22, 0x1E	; 30
    2472:	70 e0       	ldi	r23, 0x00	; 0
    2474:	87 eb       	ldi	r24, 0xB7	; 183
    2476:	96 e0       	ldi	r25, 0x06	; 6
    2478:	0e 94 d5 09 	call	0x13aa	; 0x13aa <u8g2_DrawStr>
		u8g2_SendBuffer(&u8g2);
    247c:	87 eb       	ldi	r24, 0xB7	; 183
    247e:	96 e0       	ldi	r25, 0x06	; 6
    2480:	0e 94 ed 05 	call	0xbda	; 0xbda <u8g2_SendBuffer>
    2484:	8f ef       	ldi	r24, 0xFF	; 255
    2486:	93 ec       	ldi	r25, 0xC3	; 195
    2488:	29 e0       	ldi	r18, 0x09	; 9
    248a:	81 50       	subi	r24, 0x01	; 1
    248c:	90 40       	sbci	r25, 0x00	; 0
    248e:	20 40       	sbci	r18, 0x00	; 0
    2490:	e1 f7       	brne	.-8      	; 0x248a <updateMenu+0xc4>
    2492:	00 c0       	rjmp	.+0      	; 0x2494 <updateMenu+0xce>
    2494:	00 00       	nop
    2496:	08 95       	ret
		break;
		
		
		case 10*60:
		// Sending information to LCD to print
		u8g2_ClearBuffer(&u8g2);
    2498:	87 eb       	ldi	r24, 0xB7	; 183
    249a:	96 e0       	ldi	r25, 0x06	; 6
    249c:	0e 94 d7 05 	call	0xbae	; 0xbae <u8g2_ClearBuffer>
		u8g2_SetFont(&u8g2, u8g2_font_smart_patrol_nbp_tr);
    24a0:	68 e6       	ldi	r22, 0x68	; 104
    24a2:	70 e0       	ldi	r23, 0x00	; 0
    24a4:	87 eb       	ldi	r24, 0xB7	; 183
    24a6:	96 e0       	ldi	r25, 0x06	; 6
    24a8:	0e 94 3a 0a 	call	0x1474	; 0x1474 <u8g2_SetFont>
		u8g2_DrawStr(&u8g2, 20, 20, "Large Items");
    24ac:	23 ef       	ldi	r18, 0xF3	; 243
    24ae:	31 e0       	ldi	r19, 0x01	; 1
    24b0:	44 e1       	ldi	r20, 0x14	; 20
    24b2:	50 e0       	ldi	r21, 0x00	; 0
    24b4:	64 e1       	ldi	r22, 0x14	; 20
    24b6:	70 e0       	ldi	r23, 0x00	; 0
    24b8:	87 eb       	ldi	r24, 0xB7	; 183
    24ba:	96 e0       	ldi	r25, 0x06	; 6
    24bc:	0e 94 d5 09 	call	0x13aa	; 0x13aa <u8g2_DrawStr>
		u8g2_DrawStr(&u8g2, 30, 40, "10 Minutes");
    24c0:	2f ef       	ldi	r18, 0xFF	; 255
    24c2:	31 e0       	ldi	r19, 0x01	; 1
    24c4:	48 e2       	ldi	r20, 0x28	; 40
    24c6:	50 e0       	ldi	r21, 0x00	; 0
    24c8:	6e e1       	ldi	r22, 0x1E	; 30
    24ca:	70 e0       	ldi	r23, 0x00	; 0
    24cc:	87 eb       	ldi	r24, 0xB7	; 183
    24ce:	96 e0       	ldi	r25, 0x06	; 6
    24d0:	0e 94 d5 09 	call	0x13aa	; 0x13aa <u8g2_DrawStr>
		u8g2_SendBuffer(&u8g2);
    24d4:	87 eb       	ldi	r24, 0xB7	; 183
    24d6:	96 e0       	ldi	r25, 0x06	; 6
    24d8:	0e 94 ed 05 	call	0xbda	; 0xbda <u8g2_SendBuffer>
    24dc:	8f ef       	ldi	r24, 0xFF	; 255
    24de:	93 ec       	ldi	r25, 0xC3	; 195
    24e0:	29 e0       	ldi	r18, 0x09	; 9
    24e2:	81 50       	subi	r24, 0x01	; 1
    24e4:	90 40       	sbci	r25, 0x00	; 0
    24e6:	20 40       	sbci	r18, 0x00	; 0
    24e8:	e1 f7       	brne	.-8      	; 0x24e2 <updateMenu+0x11c>
    24ea:	00 c0       	rjmp	.+0      	; 0x24ec <updateMenu+0x126>
    24ec:	00 00       	nop
    24ee:	08 95       	ret

000024f0 <main>:
char res[100];

int main (void)
{
	//Input
	DDRC = 0x00;  // PortC input (Place where 0 is input and 1 is output)
    24f0:	17 b8       	out	0x07, r1	; 7
	//pin 0  - select
	//pin 1  - up (increase the working time)
	//pin 2  - stop (force stop working)
	//pin 3  - down (decrease the working time)
	
	DDRD = 0xfb; // PortD pin1 input others are output 1111 1011
    24f2:	8b ef       	ldi	r24, 0xFB	; 251
    24f4:	8a b9       	out	0x0a, r24	; 10
	//pin 3 UV lights are connected
	//pin5 Green Led (Working indicator)
	//pin6 Red Led (Off mode indicator)
	
	//Output
	DDRB = 0x05;  // DDRC |= 0B00000101; pin0,pin2 are output and other input
    24f6:	85 e0       	ldi	r24, 0x05	; 5
    24f8:	84 b9       	out	0x04, r24	; 4
	//This is for buzzer
	
	PORTC = 0xff; //all the input value of port c assign to 1
    24fa:	8f ef       	ldi	r24, 0xFF	; 255
    24fc:	88 b9       	out	0x08, r24	; 8
	PORTD = 0x02; // pin0 assign to 1
    24fe:	82 e0       	ldi	r24, 0x02	; 2
    2500:	8b b9       	out	0x0b, r24	; 11
	
	
	u8g2_Setup_ssd1306_i2c_128x64_noname_f(&u8g2, U8G2_R0, u8x8_byte_avr_hw_i2c, u8x8_avr_delay);
    2502:	29 e8       	ldi	r18, 0x89	; 137
    2504:	30 e1       	ldi	r19, 0x10	; 16
    2506:	46 e5       	ldi	r20, 0x56	; 86
    2508:	50 e1       	ldi	r21, 0x10	; 16
    250a:	62 e0       	ldi	r22, 0x02	; 2
    250c:	71 e0       	ldi	r23, 0x01	; 1
    250e:	87 eb       	ldi	r24, 0xB7	; 183
    2510:	96 e0       	ldi	r25, 0x06	; 6
    2512:	0e 94 fe 05 	call	0xbfc	; 0xbfc <u8g2_Setup_ssd1306_i2c_128x64_noname_f>
	u8g2_SetI2CAddress(&u8g2, SSD1306_ADDR);
    2516:	88 e7       	ldi	r24, 0x78	; 120
    2518:	80 93 cd 06 	sts	0x06CD, r24	; 0x8006cd <u8g2+0x16>
	u8g2_InitDisplay(&u8g2);
    251c:	87 eb       	ldi	r24, 0xB7	; 183
    251e:	96 e0       	ldi	r25, 0x06	; 6
    2520:	0e 94 99 0e 	call	0x1d32	; 0x1d32 <u8x8_InitDisplay>
	u8g2_SetPowerSave(&u8g2, 0);
    2524:	60 e0       	ldi	r22, 0x00	; 0
    2526:	87 eb       	ldi	r24, 0xB7	; 183
    2528:	96 e0       	ldi	r25, 0x06	; 6
    252a:	0e 94 a4 0e 	call	0x1d48	; 0x1d48 <u8x8_SetPowerSave>
	
	u8g2_ClearBuffer(&u8g2);
    252e:	87 eb       	ldi	r24, 0xB7	; 183
    2530:	96 e0       	ldi	r25, 0x06	; 6
    2532:	0e 94 d7 05 	call	0xbae	; 0xbae <u8g2_ClearBuffer>
	u8g2_SetFont(&u8g2, u8g2_font_calibration_gothic_nbp_tr);
    2536:	62 e4       	ldi	r22, 0x42	; 66
    2538:	75 e0       	ldi	r23, 0x05	; 5
    253a:	87 eb       	ldi	r24, 0xB7	; 183
    253c:	96 e0       	ldi	r25, 0x06	; 6
    253e:	0e 94 3a 0a 	call	0x1474	; 0x1474 <u8g2_SetFont>
	u8g2_SetFontRefHeightText(&u8g2);
    2542:	87 eb       	ldi	r24, 0xB7	; 183
    2544:	96 e0       	ldi	r25, 0x06	; 6
    2546:	0e 94 23 0a 	call	0x1446	; 0x1446 <u8g2_SetFontRefHeightText>
	u8g2_SetFontPosTop(&u8g2);
    254a:	87 eb       	ldi	r24, 0xB7	; 183
    254c:	96 e0       	ldi	r25, 0x06	; 6
    254e:	0e 94 32 0a 	call	0x1464	; 0x1464 <u8g2_SetFontPosTop>
	u8g2_DrawStr(&u8g2, 40, 20, "Sensitizing");
    2552:	2a e0       	ldi	r18, 0x0A	; 10
    2554:	32 e0       	ldi	r19, 0x02	; 2
    2556:	44 e1       	ldi	r20, 0x14	; 20
    2558:	50 e0       	ldi	r21, 0x00	; 0
    255a:	68 e2       	ldi	r22, 0x28	; 40
    255c:	70 e0       	ldi	r23, 0x00	; 0
    255e:	87 eb       	ldi	r24, 0xB7	; 183
    2560:	96 e0       	ldi	r25, 0x06	; 6
    2562:	0e 94 d5 09 	call	0x13aa	; 0x13aa <u8g2_DrawStr>
	u8g2_DrawStr(&u8g2, 20, 40, "Using UV Rays");
    2566:	26 e1       	ldi	r18, 0x16	; 22
    2568:	32 e0       	ldi	r19, 0x02	; 2
    256a:	48 e2       	ldi	r20, 0x28	; 40
    256c:	50 e0       	ldi	r21, 0x00	; 0
    256e:	64 e1       	ldi	r22, 0x14	; 20
    2570:	70 e0       	ldi	r23, 0x00	; 0
    2572:	87 eb       	ldi	r24, 0xB7	; 183
    2574:	96 e0       	ldi	r25, 0x06	; 6
    2576:	0e 94 d5 09 	call	0x13aa	; 0x13aa <u8g2_DrawStr>
	u8g2_SendBuffer(&u8g2);
    257a:	87 eb       	ldi	r24, 0xB7	; 183
    257c:	96 e0       	ldi	r25, 0x06	; 6
    257e:	0e 94 ed 05 	call	0xbda	; 0xbda <u8g2_SendBuffer>
    2582:	2f ef       	ldi	r18, 0xFF	; 255
    2584:	87 ea       	ldi	r24, 0xA7	; 167
    2586:	91 e6       	ldi	r25, 0x61	; 97
    2588:	21 50       	subi	r18, 0x01	; 1
    258a:	80 40       	sbci	r24, 0x00	; 0
    258c:	90 40       	sbci	r25, 0x00	; 0
    258e:	e1 f7       	brne	.-8      	; 0x2588 <main+0x98>
    2590:	00 c0       	rjmp	.+0      	; 0x2592 <main+0xa2>
    2592:	00 00       	nop
	_delay_ms(2000);

	u8g2_ClearBuffer(&u8g2);
    2594:	87 eb       	ldi	r24, 0xB7	; 183
    2596:	96 e0       	ldi	r25, 0x06	; 6
    2598:	0e 94 d7 05 	call	0xbae	; 0xbae <u8g2_ClearBuffer>
	u8g2_SetFont(&u8g2, u8g2_font_smart_patrol_nbp_tr);
    259c:	68 e6       	ldi	r22, 0x68	; 104
    259e:	70 e0       	ldi	r23, 0x00	; 0
    25a0:	87 eb       	ldi	r24, 0xB7	; 183
    25a2:	96 e0       	ldi	r25, 0x06	; 6
    25a4:	0e 94 3a 0a 	call	0x1474	; 0x1474 <u8g2_SetFont>
	u8g2_SetFontRefHeightText(&u8g2);
    25a8:	87 eb       	ldi	r24, 0xB7	; 183
    25aa:	96 e0       	ldi	r25, 0x06	; 6
    25ac:	0e 94 23 0a 	call	0x1446	; 0x1446 <u8g2_SetFontRefHeightText>
	u8g2_SetFontPosTop(&u8g2);
    25b0:	87 eb       	ldi	r24, 0xB7	; 183
    25b2:	96 e0       	ldi	r25, 0x06	; 6
    25b4:	0e 94 32 0a 	call	0x1464	; 0x1464 <u8g2_SetFontPosTop>
	u8g2_DrawStr(&u8g2, 10, 15, "Designed by");
    25b8:	24 e2       	ldi	r18, 0x24	; 36
    25ba:	32 e0       	ldi	r19, 0x02	; 2
    25bc:	4f e0       	ldi	r20, 0x0F	; 15
    25be:	50 e0       	ldi	r21, 0x00	; 0
    25c0:	6a e0       	ldi	r22, 0x0A	; 10
    25c2:	70 e0       	ldi	r23, 0x00	; 0
    25c4:	87 eb       	ldi	r24, 0xB7	; 183
    25c6:	96 e0       	ldi	r25, 0x06	; 6
    25c8:	0e 94 d5 09 	call	0x13aa	; 0x13aa <u8g2_DrawStr>
	u8g2_DrawStr(&u8g2, 10, 40, "Group 14");
    25cc:	20 e3       	ldi	r18, 0x30	; 48
    25ce:	32 e0       	ldi	r19, 0x02	; 2
    25d0:	48 e2       	ldi	r20, 0x28	; 40
    25d2:	50 e0       	ldi	r21, 0x00	; 0
    25d4:	6a e0       	ldi	r22, 0x0A	; 10
    25d6:	70 e0       	ldi	r23, 0x00	; 0
    25d8:	87 eb       	ldi	r24, 0xB7	; 183
    25da:	96 e0       	ldi	r25, 0x06	; 6
    25dc:	0e 94 d5 09 	call	0x13aa	; 0x13aa <u8g2_DrawStr>
	u8g2_SendBuffer(&u8g2);
    25e0:	87 eb       	ldi	r24, 0xB7	; 183
    25e2:	96 e0       	ldi	r25, 0x06	; 6
    25e4:	0e 94 ed 05 	call	0xbda	; 0xbda <u8g2_SendBuffer>
    25e8:	2f ef       	ldi	r18, 0xFF	; 255
    25ea:	87 ea       	ldi	r24, 0xA7	; 167
    25ec:	91 e6       	ldi	r25, 0x61	; 97
    25ee:	21 50       	subi	r18, 0x01	; 1
    25f0:	80 40       	sbci	r24, 0x00	; 0
    25f2:	90 40       	sbci	r25, 0x00	; 0
    25f4:	e1 f7       	brne	.-8      	; 0x25ee <main+0xfe>
    25f6:	00 c0       	rjmp	.+0      	; 0x25f8 <main+0x108>
    25f8:	00 00       	nop
	
	

	while(1){
		
		if((PIND & (1<<PIND2)))
    25fa:	4a 9b       	sbis	0x09, 2	; 9
    25fc:	34 c0       	rjmp	.+104    	; 0x2666 <main+0x176>
		{
			u8g2_ClearBuffer(&u8g2);
    25fe:	87 eb       	ldi	r24, 0xB7	; 183
    2600:	96 e0       	ldi	r25, 0x06	; 6
    2602:	0e 94 d7 05 	call	0xbae	; 0xbae <u8g2_ClearBuffer>
			u8g2_SetFont(&u8g2, u8g2_font_smart_patrol_nbp_tr);
    2606:	68 e6       	ldi	r22, 0x68	; 104
    2608:	70 e0       	ldi	r23, 0x00	; 0
    260a:	87 eb       	ldi	r24, 0xB7	; 183
    260c:	96 e0       	ldi	r25, 0x06	; 6
    260e:	0e 94 3a 0a 	call	0x1474	; 0x1474 <u8g2_SetFont>
			u8g2_SetFontRefHeightText(&u8g2);
    2612:	87 eb       	ldi	r24, 0xB7	; 183
    2614:	96 e0       	ldi	r25, 0x06	; 6
    2616:	0e 94 23 0a 	call	0x1446	; 0x1446 <u8g2_SetFontRefHeightText>
			u8g2_SetFontPosTop(&u8g2);
    261a:	87 eb       	ldi	r24, 0xB7	; 183
    261c:	96 e0       	ldi	r25, 0x06	; 6
    261e:	0e 94 32 0a 	call	0x1464	; 0x1464 <u8g2_SetFontPosTop>
			u8g2_DrawStr(&u8g2, 0, 0, "Press Select to");
    2622:	29 e3       	ldi	r18, 0x39	; 57
    2624:	32 e0       	ldi	r19, 0x02	; 2
    2626:	40 e0       	ldi	r20, 0x00	; 0
    2628:	50 e0       	ldi	r21, 0x00	; 0
    262a:	60 e0       	ldi	r22, 0x00	; 0
    262c:	70 e0       	ldi	r23, 0x00	; 0
    262e:	87 eb       	ldi	r24, 0xB7	; 183
    2630:	96 e0       	ldi	r25, 0x06	; 6
    2632:	0e 94 d5 09 	call	0x13aa	; 0x13aa <u8g2_DrawStr>
			u8g2_DrawStr(&u8g2, 0, 30, "Sensitizing");
    2636:	2a e0       	ldi	r18, 0x0A	; 10
    2638:	32 e0       	ldi	r19, 0x02	; 2
    263a:	4e e1       	ldi	r20, 0x1E	; 30
    263c:	50 e0       	ldi	r21, 0x00	; 0
    263e:	60 e0       	ldi	r22, 0x00	; 0
    2640:	70 e0       	ldi	r23, 0x00	; 0
    2642:	87 eb       	ldi	r24, 0xB7	; 183
    2644:	96 e0       	ldi	r25, 0x06	; 6
    2646:	0e 94 d5 09 	call	0x13aa	; 0x13aa <u8g2_DrawStr>
			u8g2_SendBuffer(&u8g2);
    264a:	87 eb       	ldi	r24, 0xB7	; 183
    264c:	96 e0       	ldi	r25, 0x06	; 6
    264e:	0e 94 ed 05 	call	0xbda	; 0xbda <u8g2_SendBuffer>
    2652:	2f ef       	ldi	r18, 0xFF	; 255
    2654:	87 ea       	ldi	r24, 0xA7	; 167
    2656:	91 e6       	ldi	r25, 0x61	; 97
    2658:	21 50       	subi	r18, 0x01	; 1
    265a:	80 40       	sbci	r24, 0x00	; 0
    265c:	90 40       	sbci	r25, 0x00	; 0
    265e:	e1 f7       	brne	.-8      	; 0x2658 <main+0x168>
    2660:	00 c0       	rjmp	.+0      	; 0x2662 <main+0x172>
    2662:	00 00       	nop
    2664:	29 c0       	rjmp	.+82     	; 0x26b8 <main+0x1c8>
			_delay_ms(2000);
		}
		
		else
		{
			u8g2_ClearBuffer(&u8g2);
    2666:	87 eb       	ldi	r24, 0xB7	; 183
    2668:	96 e0       	ldi	r25, 0x06	; 6
    266a:	0e 94 d7 05 	call	0xbae	; 0xbae <u8g2_ClearBuffer>
			u8g2_SetFont(&u8g2, u8g2_font_smart_patrol_nbp_tr);
    266e:	68 e6       	ldi	r22, 0x68	; 104
    2670:	70 e0       	ldi	r23, 0x00	; 0
    2672:	87 eb       	ldi	r24, 0xB7	; 183
    2674:	96 e0       	ldi	r25, 0x06	; 6
    2676:	0e 94 3a 0a 	call	0x1474	; 0x1474 <u8g2_SetFont>
			u8g2_SetFontRefHeightText(&u8g2);
    267a:	87 eb       	ldi	r24, 0xB7	; 183
    267c:	96 e0       	ldi	r25, 0x06	; 6
    267e:	0e 94 23 0a 	call	0x1446	; 0x1446 <u8g2_SetFontRefHeightText>
			u8g2_SetFontPosTop(&u8g2);
    2682:	87 eb       	ldi	r24, 0xB7	; 183
    2684:	96 e0       	ldi	r25, 0x06	; 6
    2686:	0e 94 32 0a 	call	0x1464	; 0x1464 <u8g2_SetFontPosTop>
			u8g2_DrawStr(&u8g2, 0, 0, "Press On");
    268a:	29 e4       	ldi	r18, 0x49	; 73
    268c:	32 e0       	ldi	r19, 0x02	; 2
    268e:	40 e0       	ldi	r20, 0x00	; 0
    2690:	50 e0       	ldi	r21, 0x00	; 0
    2692:	60 e0       	ldi	r22, 0x00	; 0
    2694:	70 e0       	ldi	r23, 0x00	; 0
    2696:	87 eb       	ldi	r24, 0xB7	; 183
    2698:	96 e0       	ldi	r25, 0x06	; 6
    269a:	0e 94 d5 09 	call	0x13aa	; 0x13aa <u8g2_DrawStr>
			u8g2_SendBuffer(&u8g2);
    269e:	87 eb       	ldi	r24, 0xB7	; 183
    26a0:	96 e0       	ldi	r25, 0x06	; 6
    26a2:	0e 94 ed 05 	call	0xbda	; 0xbda <u8g2_SendBuffer>
    26a6:	2f ef       	ldi	r18, 0xFF	; 255
    26a8:	87 ea       	ldi	r24, 0xA7	; 167
    26aa:	91 e6       	ldi	r25, 0x61	; 97
    26ac:	21 50       	subi	r18, 0x01	; 1
    26ae:	80 40       	sbci	r24, 0x00	; 0
    26b0:	90 40       	sbci	r25, 0x00	; 0
    26b2:	e1 f7       	brne	.-8      	; 0x26ac <main+0x1bc>
    26b4:	00 c0       	rjmp	.+0      	; 0x26b6 <main+0x1c6>
    26b6:	00 00       	nop
			_delay_ms(2000);
		}
		
		
		// If the power button is on red led should blink all others off
		if((PIND & (1<<PIND2)))
    26b8:	4a 9b       	sbis	0x09, 2	; 9
    26ba:	04 c0       	rjmp	.+8      	; 0x26c4 <main+0x1d4>
		{
			PORTD |= (1<<PORTD6); // make portD pin6 high
    26bc:	8b b1       	in	r24, 0x0b	; 11
    26be:	80 64       	ori	r24, 0x40	; 64
    26c0:	8b b9       	out	0x0b, r24	; 11
    26c2:	03 c0       	rjmp	.+6      	; 0x26ca <main+0x1da>
		}
		//If power is not on all the system is off
		else
		{
			PORTD &= ~(1<<PORTD6);
    26c4:	8b b1       	in	r24, 0x0b	; 11
    26c6:	8f 7b       	andi	r24, 0xBF	; 191
    26c8:	8b b9       	out	0x0b, r24	; 11
		}
		
		
		//If power button on or off Green led and UV are initially of
		
		PORTD &= ~(1<<PORTD3); // make portD pin3 low
    26ca:	8b b1       	in	r24, 0x0b	; 11
    26cc:	87 7f       	andi	r24, 0xF7	; 247
    26ce:	8b b9       	out	0x0b, r24	; 11
		PORTD &= ~(1<<PORTD5); // make portD pin5 low
    26d0:	8b b1       	in	r24, 0x0b	; 11
    26d2:	8f 7d       	andi	r24, 0xDF	; 223
    26d4:	8b b9       	out	0x0b, r24	; 11
		
		//If Select button is pressed then Red Led should off and UV should on
		
		if(~PINC & 0x01)  //if portC pin0 is low
    26d6:	30 99       	sbic	0x06, 0	; 6
    26d8:	05 c0       	rjmp	.+10     	; 0x26e4 <main+0x1f4>
		{
			PORTD &= ~(1<<PORTD6);  //portD pin6 is low
    26da:	8b b1       	in	r24, 0x0b	; 11
    26dc:	8f 7b       	andi	r24, 0xBF	; 191
    26de:	8b b9       	out	0x0b, r24	; 11
			UV_light();
    26e0:	0e 94 c4 10 	call	0x2188	; 0x2188 <UV_light>
		}
		
		
		//If up button pressed increase the working time by 120 units
		
		if(~PINC& 0x02)  //if portC pin1 is low
    26e4:	31 99       	sbic	0x06, 1	; 6
    26e6:	1e c0       	rjmp	.+60     	; 0x2724 <main+0x234>
    26e8:	2f ef       	ldi	r18, 0xFF	; 255
    26ea:	89 e6       	ldi	r24, 0x69	; 105
    26ec:	98 e1       	ldi	r25, 0x18	; 24
    26ee:	21 50       	subi	r18, 0x01	; 1
    26f0:	80 40       	sbci	r24, 0x00	; 0
    26f2:	90 40       	sbci	r25, 0x00	; 0
    26f4:	e1 f7       	brne	.-8      	; 0x26ee <main+0x1fe>
    26f6:	00 c0       	rjmp	.+0      	; 0x26f8 <main+0x208>
    26f8:	00 00       	nop
		{
			_delay_ms(500);
			type = type + 120;
    26fa:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    26fe:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    2702:	88 58       	subi	r24, 0x88	; 136
    2704:	9f 4f       	sbci	r25, 0xFF	; 255
    2706:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    270a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
			if(type > 60*10){type=60*10;}
    270e:	89 35       	cpi	r24, 0x59	; 89
    2710:	92 40       	sbci	r25, 0x02	; 2
    2712:	34 f0       	brlt	.+12     	; 0x2720 <main+0x230>
    2714:	88 e5       	ldi	r24, 0x58	; 88
    2716:	92 e0       	ldi	r25, 0x02	; 2
    2718:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    271c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
			
			updateMenu();
    2720:	0e 94 e3 11 	call	0x23c6	; 0x23c6 <updateMenu>
		}
		
		
		//If down button is pressed decreasing the working time by 120 units
		
		if(~PINC& 0x08)   //if portC pin4 is low
    2724:	33 99       	sbic	0x06, 3	; 6
    2726:	1e c0       	rjmp	.+60     	; 0x2764 <main+0x274>
    2728:	8f ef       	ldi	r24, 0xFF	; 255
    272a:	99 e6       	ldi	r25, 0x69	; 105
    272c:	28 e1       	ldi	r18, 0x18	; 24
    272e:	81 50       	subi	r24, 0x01	; 1
    2730:	90 40       	sbci	r25, 0x00	; 0
    2732:	20 40       	sbci	r18, 0x00	; 0
    2734:	e1 f7       	brne	.-8      	; 0x272e <main+0x23e>
    2736:	00 c0       	rjmp	.+0      	; 0x2738 <main+0x248>
    2738:	00 00       	nop
		{
			_delay_ms(500);
			type = type - 120;
    273a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    273e:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    2742:	88 57       	subi	r24, 0x78	; 120
    2744:	91 09       	sbc	r25, r1
    2746:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    274a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
			if(type < 60*6){type=60*6;}
    274e:	88 36       	cpi	r24, 0x68	; 104
    2750:	91 40       	sbci	r25, 0x01	; 1
    2752:	34 f4       	brge	.+12     	; 0x2760 <main+0x270>
    2754:	88 e6       	ldi	r24, 0x68	; 104
    2756:	91 e0       	ldi	r25, 0x01	; 1
    2758:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    275c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
			
			updateMenu();
    2760:	0e 94 e3 11 	call	0x23c6	; 0x23c6 <updateMenu>
		}
		
		updateMenu();
    2764:	0e 94 e3 11 	call	0x23c6	; 0x23c6 <updateMenu>
		
		
	}
    2768:	48 cf       	rjmp	.-368    	; 0x25fa <main+0x10a>

0000276a <__udivmodhi4>:
    276a:	aa 1b       	sub	r26, r26
    276c:	bb 1b       	sub	r27, r27
    276e:	51 e1       	ldi	r21, 0x11	; 17
    2770:	07 c0       	rjmp	.+14     	; 0x2780 <__udivmodhi4_ep>

00002772 <__udivmodhi4_loop>:
    2772:	aa 1f       	adc	r26, r26
    2774:	bb 1f       	adc	r27, r27
    2776:	a6 17       	cp	r26, r22
    2778:	b7 07       	cpc	r27, r23
    277a:	10 f0       	brcs	.+4      	; 0x2780 <__udivmodhi4_ep>
    277c:	a6 1b       	sub	r26, r22
    277e:	b7 0b       	sbc	r27, r23

00002780 <__udivmodhi4_ep>:
    2780:	88 1f       	adc	r24, r24
    2782:	99 1f       	adc	r25, r25
    2784:	5a 95       	dec	r21
    2786:	a9 f7       	brne	.-22     	; 0x2772 <__udivmodhi4_loop>
    2788:	80 95       	com	r24
    278a:	90 95       	com	r25
    278c:	bc 01       	movw	r22, r24
    278e:	cd 01       	movw	r24, r26
    2790:	08 95       	ret

00002792 <__divmodhi4>:
    2792:	97 fb       	bst	r25, 7
    2794:	07 2e       	mov	r0, r23
    2796:	16 f4       	brtc	.+4      	; 0x279c <__divmodhi4+0xa>
    2798:	00 94       	com	r0
    279a:	07 d0       	rcall	.+14     	; 0x27aa <__divmodhi4_neg1>
    279c:	77 fd       	sbrc	r23, 7
    279e:	09 d0       	rcall	.+18     	; 0x27b2 <__divmodhi4_neg2>
    27a0:	0e 94 b5 13 	call	0x276a	; 0x276a <__udivmodhi4>
    27a4:	07 fc       	sbrc	r0, 7
    27a6:	05 d0       	rcall	.+10     	; 0x27b2 <__divmodhi4_neg2>
    27a8:	3e f4       	brtc	.+14     	; 0x27b8 <__divmodhi4_exit>

000027aa <__divmodhi4_neg1>:
    27aa:	90 95       	com	r25
    27ac:	81 95       	neg	r24
    27ae:	9f 4f       	sbci	r25, 0xFF	; 255
    27b0:	08 95       	ret

000027b2 <__divmodhi4_neg2>:
    27b2:	70 95       	com	r23
    27b4:	61 95       	neg	r22
    27b6:	7f 4f       	sbci	r23, 0xFF	; 255

000027b8 <__divmodhi4_exit>:
    27b8:	08 95       	ret

000027ba <__udivmodsi4>:
    27ba:	a1 e2       	ldi	r26, 0x21	; 33
    27bc:	1a 2e       	mov	r1, r26
    27be:	aa 1b       	sub	r26, r26
    27c0:	bb 1b       	sub	r27, r27
    27c2:	fd 01       	movw	r30, r26
    27c4:	0d c0       	rjmp	.+26     	; 0x27e0 <__udivmodsi4_ep>

000027c6 <__udivmodsi4_loop>:
    27c6:	aa 1f       	adc	r26, r26
    27c8:	bb 1f       	adc	r27, r27
    27ca:	ee 1f       	adc	r30, r30
    27cc:	ff 1f       	adc	r31, r31
    27ce:	a2 17       	cp	r26, r18
    27d0:	b3 07       	cpc	r27, r19
    27d2:	e4 07       	cpc	r30, r20
    27d4:	f5 07       	cpc	r31, r21
    27d6:	20 f0       	brcs	.+8      	; 0x27e0 <__udivmodsi4_ep>
    27d8:	a2 1b       	sub	r26, r18
    27da:	b3 0b       	sbc	r27, r19
    27dc:	e4 0b       	sbc	r30, r20
    27de:	f5 0b       	sbc	r31, r21

000027e0 <__udivmodsi4_ep>:
    27e0:	66 1f       	adc	r22, r22
    27e2:	77 1f       	adc	r23, r23
    27e4:	88 1f       	adc	r24, r24
    27e6:	99 1f       	adc	r25, r25
    27e8:	1a 94       	dec	r1
    27ea:	69 f7       	brne	.-38     	; 0x27c6 <__udivmodsi4_loop>
    27ec:	60 95       	com	r22
    27ee:	70 95       	com	r23
    27f0:	80 95       	com	r24
    27f2:	90 95       	com	r25
    27f4:	9b 01       	movw	r18, r22
    27f6:	ac 01       	movw	r20, r24
    27f8:	bd 01       	movw	r22, r26
    27fa:	cf 01       	movw	r24, r30
    27fc:	08 95       	ret

000027fe <__umulhisi3>:
    27fe:	a2 9f       	mul	r26, r18
    2800:	b0 01       	movw	r22, r0
    2802:	b3 9f       	mul	r27, r19
    2804:	c0 01       	movw	r24, r0
    2806:	a3 9f       	mul	r26, r19
    2808:	70 0d       	add	r23, r0
    280a:	81 1d       	adc	r24, r1
    280c:	11 24       	eor	r1, r1
    280e:	91 1d       	adc	r25, r1
    2810:	b2 9f       	mul	r27, r18
    2812:	70 0d       	add	r23, r0
    2814:	81 1d       	adc	r24, r1
    2816:	11 24       	eor	r1, r1
    2818:	91 1d       	adc	r25, r1
    281a:	08 95       	ret

0000281c <memset>:
    281c:	dc 01       	movw	r26, r24
    281e:	01 c0       	rjmp	.+2      	; 0x2822 <memset+0x6>
    2820:	6d 93       	st	X+, r22
    2822:	41 50       	subi	r20, 0x01	; 1
    2824:	50 40       	sbci	r21, 0x00	; 0
    2826:	e0 f7       	brcc	.-8      	; 0x2820 <memset+0x4>
    2828:	08 95       	ret

0000282a <sprintf>:
    282a:	ae e0       	ldi	r26, 0x0E	; 14
    282c:	b0 e0       	ldi	r27, 0x00	; 0
    282e:	eb e1       	ldi	r30, 0x1B	; 27
    2830:	f4 e1       	ldi	r31, 0x14	; 20
    2832:	0c 94 d6 16 	jmp	0x2dac	; 0x2dac <__prologue_saves__+0x1c>
    2836:	0d 89       	ldd	r16, Y+21	; 0x15
    2838:	1e 89       	ldd	r17, Y+22	; 0x16
    283a:	86 e0       	ldi	r24, 0x06	; 6
    283c:	8c 83       	std	Y+4, r24	; 0x04
    283e:	1a 83       	std	Y+2, r17	; 0x02
    2840:	09 83       	std	Y+1, r16	; 0x01
    2842:	8f ef       	ldi	r24, 0xFF	; 255
    2844:	9f e7       	ldi	r25, 0x7F	; 127
    2846:	9e 83       	std	Y+6, r25	; 0x06
    2848:	8d 83       	std	Y+5, r24	; 0x05
    284a:	ae 01       	movw	r20, r28
    284c:	47 5e       	subi	r20, 0xE7	; 231
    284e:	5f 4f       	sbci	r21, 0xFF	; 255
    2850:	6f 89       	ldd	r22, Y+23	; 0x17
    2852:	78 8d       	ldd	r23, Y+24	; 0x18
    2854:	ce 01       	movw	r24, r28
    2856:	01 96       	adiw	r24, 0x01	; 1
    2858:	0e 94 37 14 	call	0x286e	; 0x286e <vfprintf>
    285c:	ef 81       	ldd	r30, Y+7	; 0x07
    285e:	f8 85       	ldd	r31, Y+8	; 0x08
    2860:	e0 0f       	add	r30, r16
    2862:	f1 1f       	adc	r31, r17
    2864:	10 82       	st	Z, r1
    2866:	2e 96       	adiw	r28, 0x0e	; 14
    2868:	e4 e0       	ldi	r30, 0x04	; 4
    286a:	0c 94 f2 16 	jmp	0x2de4	; 0x2de4 <__epilogue_restores__+0x1c>

0000286e <vfprintf>:
    286e:	ab e0       	ldi	r26, 0x0B	; 11
    2870:	b0 e0       	ldi	r27, 0x00	; 0
    2872:	ed e3       	ldi	r30, 0x3D	; 61
    2874:	f4 e1       	ldi	r31, 0x14	; 20
    2876:	0c 94 c8 16 	jmp	0x2d90	; 0x2d90 <__prologue_saves__>
    287a:	6c 01       	movw	r12, r24
    287c:	7b 01       	movw	r14, r22
    287e:	8a 01       	movw	r16, r20
    2880:	fc 01       	movw	r30, r24
    2882:	17 82       	std	Z+7, r1	; 0x07
    2884:	16 82       	std	Z+6, r1	; 0x06
    2886:	83 81       	ldd	r24, Z+3	; 0x03
    2888:	81 ff       	sbrs	r24, 1
    288a:	cc c1       	rjmp	.+920    	; 0x2c24 <vfprintf+0x3b6>
    288c:	ce 01       	movw	r24, r28
    288e:	01 96       	adiw	r24, 0x01	; 1
    2890:	3c 01       	movw	r6, r24
    2892:	f6 01       	movw	r30, r12
    2894:	93 81       	ldd	r25, Z+3	; 0x03
    2896:	f7 01       	movw	r30, r14
    2898:	93 fd       	sbrc	r25, 3
    289a:	85 91       	lpm	r24, Z+
    289c:	93 ff       	sbrs	r25, 3
    289e:	81 91       	ld	r24, Z+
    28a0:	7f 01       	movw	r14, r30
    28a2:	88 23       	and	r24, r24
    28a4:	09 f4       	brne	.+2      	; 0x28a8 <vfprintf+0x3a>
    28a6:	ba c1       	rjmp	.+884    	; 0x2c1c <vfprintf+0x3ae>
    28a8:	85 32       	cpi	r24, 0x25	; 37
    28aa:	39 f4       	brne	.+14     	; 0x28ba <vfprintf+0x4c>
    28ac:	93 fd       	sbrc	r25, 3
    28ae:	85 91       	lpm	r24, Z+
    28b0:	93 ff       	sbrs	r25, 3
    28b2:	81 91       	ld	r24, Z+
    28b4:	7f 01       	movw	r14, r30
    28b6:	85 32       	cpi	r24, 0x25	; 37
    28b8:	29 f4       	brne	.+10     	; 0x28c4 <vfprintf+0x56>
    28ba:	b6 01       	movw	r22, r12
    28bc:	90 e0       	ldi	r25, 0x00	; 0
    28be:	0e 94 2e 16 	call	0x2c5c	; 0x2c5c <fputc>
    28c2:	e7 cf       	rjmp	.-50     	; 0x2892 <vfprintf+0x24>
    28c4:	91 2c       	mov	r9, r1
    28c6:	21 2c       	mov	r2, r1
    28c8:	31 2c       	mov	r3, r1
    28ca:	ff e1       	ldi	r31, 0x1F	; 31
    28cc:	f3 15       	cp	r31, r3
    28ce:	d8 f0       	brcs	.+54     	; 0x2906 <vfprintf+0x98>
    28d0:	8b 32       	cpi	r24, 0x2B	; 43
    28d2:	79 f0       	breq	.+30     	; 0x28f2 <vfprintf+0x84>
    28d4:	38 f4       	brcc	.+14     	; 0x28e4 <vfprintf+0x76>
    28d6:	80 32       	cpi	r24, 0x20	; 32
    28d8:	79 f0       	breq	.+30     	; 0x28f8 <vfprintf+0x8a>
    28da:	83 32       	cpi	r24, 0x23	; 35
    28dc:	a1 f4       	brne	.+40     	; 0x2906 <vfprintf+0x98>
    28de:	23 2d       	mov	r18, r3
    28e0:	20 61       	ori	r18, 0x10	; 16
    28e2:	1d c0       	rjmp	.+58     	; 0x291e <vfprintf+0xb0>
    28e4:	8d 32       	cpi	r24, 0x2D	; 45
    28e6:	61 f0       	breq	.+24     	; 0x2900 <vfprintf+0x92>
    28e8:	80 33       	cpi	r24, 0x30	; 48
    28ea:	69 f4       	brne	.+26     	; 0x2906 <vfprintf+0x98>
    28ec:	23 2d       	mov	r18, r3
    28ee:	21 60       	ori	r18, 0x01	; 1
    28f0:	16 c0       	rjmp	.+44     	; 0x291e <vfprintf+0xb0>
    28f2:	83 2d       	mov	r24, r3
    28f4:	82 60       	ori	r24, 0x02	; 2
    28f6:	38 2e       	mov	r3, r24
    28f8:	e3 2d       	mov	r30, r3
    28fa:	e4 60       	ori	r30, 0x04	; 4
    28fc:	3e 2e       	mov	r3, r30
    28fe:	2a c0       	rjmp	.+84     	; 0x2954 <vfprintf+0xe6>
    2900:	f3 2d       	mov	r31, r3
    2902:	f8 60       	ori	r31, 0x08	; 8
    2904:	1d c0       	rjmp	.+58     	; 0x2940 <vfprintf+0xd2>
    2906:	37 fc       	sbrc	r3, 7
    2908:	2d c0       	rjmp	.+90     	; 0x2964 <vfprintf+0xf6>
    290a:	20 ed       	ldi	r18, 0xD0	; 208
    290c:	28 0f       	add	r18, r24
    290e:	2a 30       	cpi	r18, 0x0A	; 10
    2910:	40 f0       	brcs	.+16     	; 0x2922 <vfprintf+0xb4>
    2912:	8e 32       	cpi	r24, 0x2E	; 46
    2914:	b9 f4       	brne	.+46     	; 0x2944 <vfprintf+0xd6>
    2916:	36 fc       	sbrc	r3, 6
    2918:	81 c1       	rjmp	.+770    	; 0x2c1c <vfprintf+0x3ae>
    291a:	23 2d       	mov	r18, r3
    291c:	20 64       	ori	r18, 0x40	; 64
    291e:	32 2e       	mov	r3, r18
    2920:	19 c0       	rjmp	.+50     	; 0x2954 <vfprintf+0xe6>
    2922:	36 fe       	sbrs	r3, 6
    2924:	06 c0       	rjmp	.+12     	; 0x2932 <vfprintf+0xc4>
    2926:	8a e0       	ldi	r24, 0x0A	; 10
    2928:	98 9e       	mul	r9, r24
    292a:	20 0d       	add	r18, r0
    292c:	11 24       	eor	r1, r1
    292e:	92 2e       	mov	r9, r18
    2930:	11 c0       	rjmp	.+34     	; 0x2954 <vfprintf+0xe6>
    2932:	ea e0       	ldi	r30, 0x0A	; 10
    2934:	2e 9e       	mul	r2, r30
    2936:	20 0d       	add	r18, r0
    2938:	11 24       	eor	r1, r1
    293a:	22 2e       	mov	r2, r18
    293c:	f3 2d       	mov	r31, r3
    293e:	f0 62       	ori	r31, 0x20	; 32
    2940:	3f 2e       	mov	r3, r31
    2942:	08 c0       	rjmp	.+16     	; 0x2954 <vfprintf+0xe6>
    2944:	8c 36       	cpi	r24, 0x6C	; 108
    2946:	21 f4       	brne	.+8      	; 0x2950 <vfprintf+0xe2>
    2948:	83 2d       	mov	r24, r3
    294a:	80 68       	ori	r24, 0x80	; 128
    294c:	38 2e       	mov	r3, r24
    294e:	02 c0       	rjmp	.+4      	; 0x2954 <vfprintf+0xe6>
    2950:	88 36       	cpi	r24, 0x68	; 104
    2952:	41 f4       	brne	.+16     	; 0x2964 <vfprintf+0xf6>
    2954:	f7 01       	movw	r30, r14
    2956:	93 fd       	sbrc	r25, 3
    2958:	85 91       	lpm	r24, Z+
    295a:	93 ff       	sbrs	r25, 3
    295c:	81 91       	ld	r24, Z+
    295e:	7f 01       	movw	r14, r30
    2960:	81 11       	cpse	r24, r1
    2962:	b3 cf       	rjmp	.-154    	; 0x28ca <vfprintf+0x5c>
    2964:	98 2f       	mov	r25, r24
    2966:	9f 7d       	andi	r25, 0xDF	; 223
    2968:	95 54       	subi	r25, 0x45	; 69
    296a:	93 30       	cpi	r25, 0x03	; 3
    296c:	28 f4       	brcc	.+10     	; 0x2978 <vfprintf+0x10a>
    296e:	0c 5f       	subi	r16, 0xFC	; 252
    2970:	1f 4f       	sbci	r17, 0xFF	; 255
    2972:	9f e3       	ldi	r25, 0x3F	; 63
    2974:	99 83       	std	Y+1, r25	; 0x01
    2976:	0d c0       	rjmp	.+26     	; 0x2992 <vfprintf+0x124>
    2978:	83 36       	cpi	r24, 0x63	; 99
    297a:	31 f0       	breq	.+12     	; 0x2988 <vfprintf+0x11a>
    297c:	83 37       	cpi	r24, 0x73	; 115
    297e:	71 f0       	breq	.+28     	; 0x299c <vfprintf+0x12e>
    2980:	83 35       	cpi	r24, 0x53	; 83
    2982:	09 f0       	breq	.+2      	; 0x2986 <vfprintf+0x118>
    2984:	59 c0       	rjmp	.+178    	; 0x2a38 <vfprintf+0x1ca>
    2986:	21 c0       	rjmp	.+66     	; 0x29ca <vfprintf+0x15c>
    2988:	f8 01       	movw	r30, r16
    298a:	80 81       	ld	r24, Z
    298c:	89 83       	std	Y+1, r24	; 0x01
    298e:	0e 5f       	subi	r16, 0xFE	; 254
    2990:	1f 4f       	sbci	r17, 0xFF	; 255
    2992:	88 24       	eor	r8, r8
    2994:	83 94       	inc	r8
    2996:	91 2c       	mov	r9, r1
    2998:	53 01       	movw	r10, r6
    299a:	13 c0       	rjmp	.+38     	; 0x29c2 <vfprintf+0x154>
    299c:	28 01       	movw	r4, r16
    299e:	f2 e0       	ldi	r31, 0x02	; 2
    29a0:	4f 0e       	add	r4, r31
    29a2:	51 1c       	adc	r5, r1
    29a4:	f8 01       	movw	r30, r16
    29a6:	a0 80       	ld	r10, Z
    29a8:	b1 80       	ldd	r11, Z+1	; 0x01
    29aa:	36 fe       	sbrs	r3, 6
    29ac:	03 c0       	rjmp	.+6      	; 0x29b4 <vfprintf+0x146>
    29ae:	69 2d       	mov	r22, r9
    29b0:	70 e0       	ldi	r23, 0x00	; 0
    29b2:	02 c0       	rjmp	.+4      	; 0x29b8 <vfprintf+0x14a>
    29b4:	6f ef       	ldi	r22, 0xFF	; 255
    29b6:	7f ef       	ldi	r23, 0xFF	; 255
    29b8:	c5 01       	movw	r24, r10
    29ba:	0e 94 23 16 	call	0x2c46	; 0x2c46 <strnlen>
    29be:	4c 01       	movw	r8, r24
    29c0:	82 01       	movw	r16, r4
    29c2:	f3 2d       	mov	r31, r3
    29c4:	ff 77       	andi	r31, 0x7F	; 127
    29c6:	3f 2e       	mov	r3, r31
    29c8:	16 c0       	rjmp	.+44     	; 0x29f6 <vfprintf+0x188>
    29ca:	28 01       	movw	r4, r16
    29cc:	22 e0       	ldi	r18, 0x02	; 2
    29ce:	42 0e       	add	r4, r18
    29d0:	51 1c       	adc	r5, r1
    29d2:	f8 01       	movw	r30, r16
    29d4:	a0 80       	ld	r10, Z
    29d6:	b1 80       	ldd	r11, Z+1	; 0x01
    29d8:	36 fe       	sbrs	r3, 6
    29da:	03 c0       	rjmp	.+6      	; 0x29e2 <vfprintf+0x174>
    29dc:	69 2d       	mov	r22, r9
    29de:	70 e0       	ldi	r23, 0x00	; 0
    29e0:	02 c0       	rjmp	.+4      	; 0x29e6 <vfprintf+0x178>
    29e2:	6f ef       	ldi	r22, 0xFF	; 255
    29e4:	7f ef       	ldi	r23, 0xFF	; 255
    29e6:	c5 01       	movw	r24, r10
    29e8:	0e 94 18 16 	call	0x2c30	; 0x2c30 <strnlen_P>
    29ec:	4c 01       	movw	r8, r24
    29ee:	f3 2d       	mov	r31, r3
    29f0:	f0 68       	ori	r31, 0x80	; 128
    29f2:	3f 2e       	mov	r3, r31
    29f4:	82 01       	movw	r16, r4
    29f6:	33 fc       	sbrc	r3, 3
    29f8:	1b c0       	rjmp	.+54     	; 0x2a30 <vfprintf+0x1c2>
    29fa:	82 2d       	mov	r24, r2
    29fc:	90 e0       	ldi	r25, 0x00	; 0
    29fe:	88 16       	cp	r8, r24
    2a00:	99 06       	cpc	r9, r25
    2a02:	b0 f4       	brcc	.+44     	; 0x2a30 <vfprintf+0x1c2>
    2a04:	b6 01       	movw	r22, r12
    2a06:	80 e2       	ldi	r24, 0x20	; 32
    2a08:	90 e0       	ldi	r25, 0x00	; 0
    2a0a:	0e 94 2e 16 	call	0x2c5c	; 0x2c5c <fputc>
    2a0e:	2a 94       	dec	r2
    2a10:	f4 cf       	rjmp	.-24     	; 0x29fa <vfprintf+0x18c>
    2a12:	f5 01       	movw	r30, r10
    2a14:	37 fc       	sbrc	r3, 7
    2a16:	85 91       	lpm	r24, Z+
    2a18:	37 fe       	sbrs	r3, 7
    2a1a:	81 91       	ld	r24, Z+
    2a1c:	5f 01       	movw	r10, r30
    2a1e:	b6 01       	movw	r22, r12
    2a20:	90 e0       	ldi	r25, 0x00	; 0
    2a22:	0e 94 2e 16 	call	0x2c5c	; 0x2c5c <fputc>
    2a26:	21 10       	cpse	r2, r1
    2a28:	2a 94       	dec	r2
    2a2a:	21 e0       	ldi	r18, 0x01	; 1
    2a2c:	82 1a       	sub	r8, r18
    2a2e:	91 08       	sbc	r9, r1
    2a30:	81 14       	cp	r8, r1
    2a32:	91 04       	cpc	r9, r1
    2a34:	71 f7       	brne	.-36     	; 0x2a12 <vfprintf+0x1a4>
    2a36:	e8 c0       	rjmp	.+464    	; 0x2c08 <vfprintf+0x39a>
    2a38:	84 36       	cpi	r24, 0x64	; 100
    2a3a:	11 f0       	breq	.+4      	; 0x2a40 <vfprintf+0x1d2>
    2a3c:	89 36       	cpi	r24, 0x69	; 105
    2a3e:	41 f5       	brne	.+80     	; 0x2a90 <vfprintf+0x222>
    2a40:	f8 01       	movw	r30, r16
    2a42:	37 fe       	sbrs	r3, 7
    2a44:	07 c0       	rjmp	.+14     	; 0x2a54 <vfprintf+0x1e6>
    2a46:	60 81       	ld	r22, Z
    2a48:	71 81       	ldd	r23, Z+1	; 0x01
    2a4a:	82 81       	ldd	r24, Z+2	; 0x02
    2a4c:	93 81       	ldd	r25, Z+3	; 0x03
    2a4e:	0c 5f       	subi	r16, 0xFC	; 252
    2a50:	1f 4f       	sbci	r17, 0xFF	; 255
    2a52:	08 c0       	rjmp	.+16     	; 0x2a64 <vfprintf+0x1f6>
    2a54:	60 81       	ld	r22, Z
    2a56:	71 81       	ldd	r23, Z+1	; 0x01
    2a58:	07 2e       	mov	r0, r23
    2a5a:	00 0c       	add	r0, r0
    2a5c:	88 0b       	sbc	r24, r24
    2a5e:	99 0b       	sbc	r25, r25
    2a60:	0e 5f       	subi	r16, 0xFE	; 254
    2a62:	1f 4f       	sbci	r17, 0xFF	; 255
    2a64:	f3 2d       	mov	r31, r3
    2a66:	ff 76       	andi	r31, 0x6F	; 111
    2a68:	3f 2e       	mov	r3, r31
    2a6a:	97 ff       	sbrs	r25, 7
    2a6c:	09 c0       	rjmp	.+18     	; 0x2a80 <vfprintf+0x212>
    2a6e:	90 95       	com	r25
    2a70:	80 95       	com	r24
    2a72:	70 95       	com	r23
    2a74:	61 95       	neg	r22
    2a76:	7f 4f       	sbci	r23, 0xFF	; 255
    2a78:	8f 4f       	sbci	r24, 0xFF	; 255
    2a7a:	9f 4f       	sbci	r25, 0xFF	; 255
    2a7c:	f0 68       	ori	r31, 0x80	; 128
    2a7e:	3f 2e       	mov	r3, r31
    2a80:	2a e0       	ldi	r18, 0x0A	; 10
    2a82:	30 e0       	ldi	r19, 0x00	; 0
    2a84:	a3 01       	movw	r20, r6
    2a86:	0e 94 6a 16 	call	0x2cd4	; 0x2cd4 <__ultoa_invert>
    2a8a:	88 2e       	mov	r8, r24
    2a8c:	86 18       	sub	r8, r6
    2a8e:	45 c0       	rjmp	.+138    	; 0x2b1a <vfprintf+0x2ac>
    2a90:	85 37       	cpi	r24, 0x75	; 117
    2a92:	31 f4       	brne	.+12     	; 0x2aa0 <vfprintf+0x232>
    2a94:	23 2d       	mov	r18, r3
    2a96:	2f 7e       	andi	r18, 0xEF	; 239
    2a98:	b2 2e       	mov	r11, r18
    2a9a:	2a e0       	ldi	r18, 0x0A	; 10
    2a9c:	30 e0       	ldi	r19, 0x00	; 0
    2a9e:	25 c0       	rjmp	.+74     	; 0x2aea <vfprintf+0x27c>
    2aa0:	93 2d       	mov	r25, r3
    2aa2:	99 7f       	andi	r25, 0xF9	; 249
    2aa4:	b9 2e       	mov	r11, r25
    2aa6:	8f 36       	cpi	r24, 0x6F	; 111
    2aa8:	c1 f0       	breq	.+48     	; 0x2ada <vfprintf+0x26c>
    2aaa:	18 f4       	brcc	.+6      	; 0x2ab2 <vfprintf+0x244>
    2aac:	88 35       	cpi	r24, 0x58	; 88
    2aae:	79 f0       	breq	.+30     	; 0x2ace <vfprintf+0x260>
    2ab0:	b5 c0       	rjmp	.+362    	; 0x2c1c <vfprintf+0x3ae>
    2ab2:	80 37       	cpi	r24, 0x70	; 112
    2ab4:	19 f0       	breq	.+6      	; 0x2abc <vfprintf+0x24e>
    2ab6:	88 37       	cpi	r24, 0x78	; 120
    2ab8:	21 f0       	breq	.+8      	; 0x2ac2 <vfprintf+0x254>
    2aba:	b0 c0       	rjmp	.+352    	; 0x2c1c <vfprintf+0x3ae>
    2abc:	e9 2f       	mov	r30, r25
    2abe:	e0 61       	ori	r30, 0x10	; 16
    2ac0:	be 2e       	mov	r11, r30
    2ac2:	b4 fe       	sbrs	r11, 4
    2ac4:	0d c0       	rjmp	.+26     	; 0x2ae0 <vfprintf+0x272>
    2ac6:	fb 2d       	mov	r31, r11
    2ac8:	f4 60       	ori	r31, 0x04	; 4
    2aca:	bf 2e       	mov	r11, r31
    2acc:	09 c0       	rjmp	.+18     	; 0x2ae0 <vfprintf+0x272>
    2ace:	34 fe       	sbrs	r3, 4
    2ad0:	0a c0       	rjmp	.+20     	; 0x2ae6 <vfprintf+0x278>
    2ad2:	29 2f       	mov	r18, r25
    2ad4:	26 60       	ori	r18, 0x06	; 6
    2ad6:	b2 2e       	mov	r11, r18
    2ad8:	06 c0       	rjmp	.+12     	; 0x2ae6 <vfprintf+0x278>
    2ada:	28 e0       	ldi	r18, 0x08	; 8
    2adc:	30 e0       	ldi	r19, 0x00	; 0
    2ade:	05 c0       	rjmp	.+10     	; 0x2aea <vfprintf+0x27c>
    2ae0:	20 e1       	ldi	r18, 0x10	; 16
    2ae2:	30 e0       	ldi	r19, 0x00	; 0
    2ae4:	02 c0       	rjmp	.+4      	; 0x2aea <vfprintf+0x27c>
    2ae6:	20 e1       	ldi	r18, 0x10	; 16
    2ae8:	32 e0       	ldi	r19, 0x02	; 2
    2aea:	f8 01       	movw	r30, r16
    2aec:	b7 fe       	sbrs	r11, 7
    2aee:	07 c0       	rjmp	.+14     	; 0x2afe <vfprintf+0x290>
    2af0:	60 81       	ld	r22, Z
    2af2:	71 81       	ldd	r23, Z+1	; 0x01
    2af4:	82 81       	ldd	r24, Z+2	; 0x02
    2af6:	93 81       	ldd	r25, Z+3	; 0x03
    2af8:	0c 5f       	subi	r16, 0xFC	; 252
    2afa:	1f 4f       	sbci	r17, 0xFF	; 255
    2afc:	06 c0       	rjmp	.+12     	; 0x2b0a <vfprintf+0x29c>
    2afe:	60 81       	ld	r22, Z
    2b00:	71 81       	ldd	r23, Z+1	; 0x01
    2b02:	80 e0       	ldi	r24, 0x00	; 0
    2b04:	90 e0       	ldi	r25, 0x00	; 0
    2b06:	0e 5f       	subi	r16, 0xFE	; 254
    2b08:	1f 4f       	sbci	r17, 0xFF	; 255
    2b0a:	a3 01       	movw	r20, r6
    2b0c:	0e 94 6a 16 	call	0x2cd4	; 0x2cd4 <__ultoa_invert>
    2b10:	88 2e       	mov	r8, r24
    2b12:	86 18       	sub	r8, r6
    2b14:	fb 2d       	mov	r31, r11
    2b16:	ff 77       	andi	r31, 0x7F	; 127
    2b18:	3f 2e       	mov	r3, r31
    2b1a:	36 fe       	sbrs	r3, 6
    2b1c:	0d c0       	rjmp	.+26     	; 0x2b38 <vfprintf+0x2ca>
    2b1e:	23 2d       	mov	r18, r3
    2b20:	2e 7f       	andi	r18, 0xFE	; 254
    2b22:	a2 2e       	mov	r10, r18
    2b24:	89 14       	cp	r8, r9
    2b26:	58 f4       	brcc	.+22     	; 0x2b3e <vfprintf+0x2d0>
    2b28:	34 fe       	sbrs	r3, 4
    2b2a:	0b c0       	rjmp	.+22     	; 0x2b42 <vfprintf+0x2d4>
    2b2c:	32 fc       	sbrc	r3, 2
    2b2e:	09 c0       	rjmp	.+18     	; 0x2b42 <vfprintf+0x2d4>
    2b30:	83 2d       	mov	r24, r3
    2b32:	8e 7e       	andi	r24, 0xEE	; 238
    2b34:	a8 2e       	mov	r10, r24
    2b36:	05 c0       	rjmp	.+10     	; 0x2b42 <vfprintf+0x2d4>
    2b38:	b8 2c       	mov	r11, r8
    2b3a:	a3 2c       	mov	r10, r3
    2b3c:	03 c0       	rjmp	.+6      	; 0x2b44 <vfprintf+0x2d6>
    2b3e:	b8 2c       	mov	r11, r8
    2b40:	01 c0       	rjmp	.+2      	; 0x2b44 <vfprintf+0x2d6>
    2b42:	b9 2c       	mov	r11, r9
    2b44:	a4 fe       	sbrs	r10, 4
    2b46:	0f c0       	rjmp	.+30     	; 0x2b66 <vfprintf+0x2f8>
    2b48:	fe 01       	movw	r30, r28
    2b4a:	e8 0d       	add	r30, r8
    2b4c:	f1 1d       	adc	r31, r1
    2b4e:	80 81       	ld	r24, Z
    2b50:	80 33       	cpi	r24, 0x30	; 48
    2b52:	21 f4       	brne	.+8      	; 0x2b5c <vfprintf+0x2ee>
    2b54:	9a 2d       	mov	r25, r10
    2b56:	99 7e       	andi	r25, 0xE9	; 233
    2b58:	a9 2e       	mov	r10, r25
    2b5a:	09 c0       	rjmp	.+18     	; 0x2b6e <vfprintf+0x300>
    2b5c:	a2 fe       	sbrs	r10, 2
    2b5e:	06 c0       	rjmp	.+12     	; 0x2b6c <vfprintf+0x2fe>
    2b60:	b3 94       	inc	r11
    2b62:	b3 94       	inc	r11
    2b64:	04 c0       	rjmp	.+8      	; 0x2b6e <vfprintf+0x300>
    2b66:	8a 2d       	mov	r24, r10
    2b68:	86 78       	andi	r24, 0x86	; 134
    2b6a:	09 f0       	breq	.+2      	; 0x2b6e <vfprintf+0x300>
    2b6c:	b3 94       	inc	r11
    2b6e:	a3 fc       	sbrc	r10, 3
    2b70:	11 c0       	rjmp	.+34     	; 0x2b94 <vfprintf+0x326>
    2b72:	a0 fe       	sbrs	r10, 0
    2b74:	06 c0       	rjmp	.+12     	; 0x2b82 <vfprintf+0x314>
    2b76:	b2 14       	cp	r11, r2
    2b78:	88 f4       	brcc	.+34     	; 0x2b9c <vfprintf+0x32e>
    2b7a:	28 0c       	add	r2, r8
    2b7c:	92 2c       	mov	r9, r2
    2b7e:	9b 18       	sub	r9, r11
    2b80:	0e c0       	rjmp	.+28     	; 0x2b9e <vfprintf+0x330>
    2b82:	b2 14       	cp	r11, r2
    2b84:	60 f4       	brcc	.+24     	; 0x2b9e <vfprintf+0x330>
    2b86:	b6 01       	movw	r22, r12
    2b88:	80 e2       	ldi	r24, 0x20	; 32
    2b8a:	90 e0       	ldi	r25, 0x00	; 0
    2b8c:	0e 94 2e 16 	call	0x2c5c	; 0x2c5c <fputc>
    2b90:	b3 94       	inc	r11
    2b92:	f7 cf       	rjmp	.-18     	; 0x2b82 <vfprintf+0x314>
    2b94:	b2 14       	cp	r11, r2
    2b96:	18 f4       	brcc	.+6      	; 0x2b9e <vfprintf+0x330>
    2b98:	2b 18       	sub	r2, r11
    2b9a:	02 c0       	rjmp	.+4      	; 0x2ba0 <vfprintf+0x332>
    2b9c:	98 2c       	mov	r9, r8
    2b9e:	21 2c       	mov	r2, r1
    2ba0:	a4 fe       	sbrs	r10, 4
    2ba2:	10 c0       	rjmp	.+32     	; 0x2bc4 <vfprintf+0x356>
    2ba4:	b6 01       	movw	r22, r12
    2ba6:	80 e3       	ldi	r24, 0x30	; 48
    2ba8:	90 e0       	ldi	r25, 0x00	; 0
    2baa:	0e 94 2e 16 	call	0x2c5c	; 0x2c5c <fputc>
    2bae:	a2 fe       	sbrs	r10, 2
    2bb0:	17 c0       	rjmp	.+46     	; 0x2be0 <vfprintf+0x372>
    2bb2:	a1 fc       	sbrc	r10, 1
    2bb4:	03 c0       	rjmp	.+6      	; 0x2bbc <vfprintf+0x34e>
    2bb6:	88 e7       	ldi	r24, 0x78	; 120
    2bb8:	90 e0       	ldi	r25, 0x00	; 0
    2bba:	02 c0       	rjmp	.+4      	; 0x2bc0 <vfprintf+0x352>
    2bbc:	88 e5       	ldi	r24, 0x58	; 88
    2bbe:	90 e0       	ldi	r25, 0x00	; 0
    2bc0:	b6 01       	movw	r22, r12
    2bc2:	0c c0       	rjmp	.+24     	; 0x2bdc <vfprintf+0x36e>
    2bc4:	8a 2d       	mov	r24, r10
    2bc6:	86 78       	andi	r24, 0x86	; 134
    2bc8:	59 f0       	breq	.+22     	; 0x2be0 <vfprintf+0x372>
    2bca:	a1 fe       	sbrs	r10, 1
    2bcc:	02 c0       	rjmp	.+4      	; 0x2bd2 <vfprintf+0x364>
    2bce:	8b e2       	ldi	r24, 0x2B	; 43
    2bd0:	01 c0       	rjmp	.+2      	; 0x2bd4 <vfprintf+0x366>
    2bd2:	80 e2       	ldi	r24, 0x20	; 32
    2bd4:	a7 fc       	sbrc	r10, 7
    2bd6:	8d e2       	ldi	r24, 0x2D	; 45
    2bd8:	b6 01       	movw	r22, r12
    2bda:	90 e0       	ldi	r25, 0x00	; 0
    2bdc:	0e 94 2e 16 	call	0x2c5c	; 0x2c5c <fputc>
    2be0:	89 14       	cp	r8, r9
    2be2:	38 f4       	brcc	.+14     	; 0x2bf2 <vfprintf+0x384>
    2be4:	b6 01       	movw	r22, r12
    2be6:	80 e3       	ldi	r24, 0x30	; 48
    2be8:	90 e0       	ldi	r25, 0x00	; 0
    2bea:	0e 94 2e 16 	call	0x2c5c	; 0x2c5c <fputc>
    2bee:	9a 94       	dec	r9
    2bf0:	f7 cf       	rjmp	.-18     	; 0x2be0 <vfprintf+0x372>
    2bf2:	8a 94       	dec	r8
    2bf4:	f3 01       	movw	r30, r6
    2bf6:	e8 0d       	add	r30, r8
    2bf8:	f1 1d       	adc	r31, r1
    2bfa:	80 81       	ld	r24, Z
    2bfc:	b6 01       	movw	r22, r12
    2bfe:	90 e0       	ldi	r25, 0x00	; 0
    2c00:	0e 94 2e 16 	call	0x2c5c	; 0x2c5c <fputc>
    2c04:	81 10       	cpse	r8, r1
    2c06:	f5 cf       	rjmp	.-22     	; 0x2bf2 <vfprintf+0x384>
    2c08:	22 20       	and	r2, r2
    2c0a:	09 f4       	brne	.+2      	; 0x2c0e <vfprintf+0x3a0>
    2c0c:	42 ce       	rjmp	.-892    	; 0x2892 <vfprintf+0x24>
    2c0e:	b6 01       	movw	r22, r12
    2c10:	80 e2       	ldi	r24, 0x20	; 32
    2c12:	90 e0       	ldi	r25, 0x00	; 0
    2c14:	0e 94 2e 16 	call	0x2c5c	; 0x2c5c <fputc>
    2c18:	2a 94       	dec	r2
    2c1a:	f6 cf       	rjmp	.-20     	; 0x2c08 <vfprintf+0x39a>
    2c1c:	f6 01       	movw	r30, r12
    2c1e:	86 81       	ldd	r24, Z+6	; 0x06
    2c20:	97 81       	ldd	r25, Z+7	; 0x07
    2c22:	02 c0       	rjmp	.+4      	; 0x2c28 <vfprintf+0x3ba>
    2c24:	8f ef       	ldi	r24, 0xFF	; 255
    2c26:	9f ef       	ldi	r25, 0xFF	; 255
    2c28:	2b 96       	adiw	r28, 0x0b	; 11
    2c2a:	e2 e1       	ldi	r30, 0x12	; 18
    2c2c:	0c 94 e4 16 	jmp	0x2dc8	; 0x2dc8 <__epilogue_restores__>

00002c30 <strnlen_P>:
    2c30:	fc 01       	movw	r30, r24
    2c32:	05 90       	lpm	r0, Z+
    2c34:	61 50       	subi	r22, 0x01	; 1
    2c36:	70 40       	sbci	r23, 0x00	; 0
    2c38:	01 10       	cpse	r0, r1
    2c3a:	d8 f7       	brcc	.-10     	; 0x2c32 <strnlen_P+0x2>
    2c3c:	80 95       	com	r24
    2c3e:	90 95       	com	r25
    2c40:	8e 0f       	add	r24, r30
    2c42:	9f 1f       	adc	r25, r31
    2c44:	08 95       	ret

00002c46 <strnlen>:
    2c46:	fc 01       	movw	r30, r24
    2c48:	61 50       	subi	r22, 0x01	; 1
    2c4a:	70 40       	sbci	r23, 0x00	; 0
    2c4c:	01 90       	ld	r0, Z+
    2c4e:	01 10       	cpse	r0, r1
    2c50:	d8 f7       	brcc	.-10     	; 0x2c48 <strnlen+0x2>
    2c52:	80 95       	com	r24
    2c54:	90 95       	com	r25
    2c56:	8e 0f       	add	r24, r30
    2c58:	9f 1f       	adc	r25, r31
    2c5a:	08 95       	ret

00002c5c <fputc>:
    2c5c:	0f 93       	push	r16
    2c5e:	1f 93       	push	r17
    2c60:	cf 93       	push	r28
    2c62:	df 93       	push	r29
    2c64:	fb 01       	movw	r30, r22
    2c66:	23 81       	ldd	r18, Z+3	; 0x03
    2c68:	21 fd       	sbrc	r18, 1
    2c6a:	03 c0       	rjmp	.+6      	; 0x2c72 <fputc+0x16>
    2c6c:	8f ef       	ldi	r24, 0xFF	; 255
    2c6e:	9f ef       	ldi	r25, 0xFF	; 255
    2c70:	2c c0       	rjmp	.+88     	; 0x2cca <fputc+0x6e>
    2c72:	22 ff       	sbrs	r18, 2
    2c74:	16 c0       	rjmp	.+44     	; 0x2ca2 <fputc+0x46>
    2c76:	46 81       	ldd	r20, Z+6	; 0x06
    2c78:	57 81       	ldd	r21, Z+7	; 0x07
    2c7a:	24 81       	ldd	r18, Z+4	; 0x04
    2c7c:	35 81       	ldd	r19, Z+5	; 0x05
    2c7e:	42 17       	cp	r20, r18
    2c80:	53 07       	cpc	r21, r19
    2c82:	44 f4       	brge	.+16     	; 0x2c94 <fputc+0x38>
    2c84:	a0 81       	ld	r26, Z
    2c86:	b1 81       	ldd	r27, Z+1	; 0x01
    2c88:	9d 01       	movw	r18, r26
    2c8a:	2f 5f       	subi	r18, 0xFF	; 255
    2c8c:	3f 4f       	sbci	r19, 0xFF	; 255
    2c8e:	31 83       	std	Z+1, r19	; 0x01
    2c90:	20 83       	st	Z, r18
    2c92:	8c 93       	st	X, r24
    2c94:	26 81       	ldd	r18, Z+6	; 0x06
    2c96:	37 81       	ldd	r19, Z+7	; 0x07
    2c98:	2f 5f       	subi	r18, 0xFF	; 255
    2c9a:	3f 4f       	sbci	r19, 0xFF	; 255
    2c9c:	37 83       	std	Z+7, r19	; 0x07
    2c9e:	26 83       	std	Z+6, r18	; 0x06
    2ca0:	14 c0       	rjmp	.+40     	; 0x2cca <fputc+0x6e>
    2ca2:	8b 01       	movw	r16, r22
    2ca4:	ec 01       	movw	r28, r24
    2ca6:	fb 01       	movw	r30, r22
    2ca8:	00 84       	ldd	r0, Z+8	; 0x08
    2caa:	f1 85       	ldd	r31, Z+9	; 0x09
    2cac:	e0 2d       	mov	r30, r0
    2cae:	09 95       	icall
    2cb0:	89 2b       	or	r24, r25
    2cb2:	e1 f6       	brne	.-72     	; 0x2c6c <fputc+0x10>
    2cb4:	d8 01       	movw	r26, r16
    2cb6:	16 96       	adiw	r26, 0x06	; 6
    2cb8:	8d 91       	ld	r24, X+
    2cba:	9c 91       	ld	r25, X
    2cbc:	17 97       	sbiw	r26, 0x07	; 7
    2cbe:	01 96       	adiw	r24, 0x01	; 1
    2cc0:	17 96       	adiw	r26, 0x07	; 7
    2cc2:	9c 93       	st	X, r25
    2cc4:	8e 93       	st	-X, r24
    2cc6:	16 97       	sbiw	r26, 0x06	; 6
    2cc8:	ce 01       	movw	r24, r28
    2cca:	df 91       	pop	r29
    2ccc:	cf 91       	pop	r28
    2cce:	1f 91       	pop	r17
    2cd0:	0f 91       	pop	r16
    2cd2:	08 95       	ret

00002cd4 <__ultoa_invert>:
    2cd4:	fa 01       	movw	r30, r20
    2cd6:	aa 27       	eor	r26, r26
    2cd8:	28 30       	cpi	r18, 0x08	; 8
    2cda:	51 f1       	breq	.+84     	; 0x2d30 <__ultoa_invert+0x5c>
    2cdc:	20 31       	cpi	r18, 0x10	; 16
    2cde:	81 f1       	breq	.+96     	; 0x2d40 <__ultoa_invert+0x6c>
    2ce0:	e8 94       	clt
    2ce2:	6f 93       	push	r22
    2ce4:	6e 7f       	andi	r22, 0xFE	; 254
    2ce6:	6e 5f       	subi	r22, 0xFE	; 254
    2ce8:	7f 4f       	sbci	r23, 0xFF	; 255
    2cea:	8f 4f       	sbci	r24, 0xFF	; 255
    2cec:	9f 4f       	sbci	r25, 0xFF	; 255
    2cee:	af 4f       	sbci	r26, 0xFF	; 255
    2cf0:	b1 e0       	ldi	r27, 0x01	; 1
    2cf2:	3e d0       	rcall	.+124    	; 0x2d70 <__ultoa_invert+0x9c>
    2cf4:	b4 e0       	ldi	r27, 0x04	; 4
    2cf6:	3c d0       	rcall	.+120    	; 0x2d70 <__ultoa_invert+0x9c>
    2cf8:	67 0f       	add	r22, r23
    2cfa:	78 1f       	adc	r23, r24
    2cfc:	89 1f       	adc	r24, r25
    2cfe:	9a 1f       	adc	r25, r26
    2d00:	a1 1d       	adc	r26, r1
    2d02:	68 0f       	add	r22, r24
    2d04:	79 1f       	adc	r23, r25
    2d06:	8a 1f       	adc	r24, r26
    2d08:	91 1d       	adc	r25, r1
    2d0a:	a1 1d       	adc	r26, r1
    2d0c:	6a 0f       	add	r22, r26
    2d0e:	71 1d       	adc	r23, r1
    2d10:	81 1d       	adc	r24, r1
    2d12:	91 1d       	adc	r25, r1
    2d14:	a1 1d       	adc	r26, r1
    2d16:	20 d0       	rcall	.+64     	; 0x2d58 <__ultoa_invert+0x84>
    2d18:	09 f4       	brne	.+2      	; 0x2d1c <__ultoa_invert+0x48>
    2d1a:	68 94       	set
    2d1c:	3f 91       	pop	r19
    2d1e:	2a e0       	ldi	r18, 0x0A	; 10
    2d20:	26 9f       	mul	r18, r22
    2d22:	11 24       	eor	r1, r1
    2d24:	30 19       	sub	r19, r0
    2d26:	30 5d       	subi	r19, 0xD0	; 208
    2d28:	31 93       	st	Z+, r19
    2d2a:	de f6       	brtc	.-74     	; 0x2ce2 <__ultoa_invert+0xe>
    2d2c:	cf 01       	movw	r24, r30
    2d2e:	08 95       	ret
    2d30:	46 2f       	mov	r20, r22
    2d32:	47 70       	andi	r20, 0x07	; 7
    2d34:	40 5d       	subi	r20, 0xD0	; 208
    2d36:	41 93       	st	Z+, r20
    2d38:	b3 e0       	ldi	r27, 0x03	; 3
    2d3a:	0f d0       	rcall	.+30     	; 0x2d5a <__ultoa_invert+0x86>
    2d3c:	c9 f7       	brne	.-14     	; 0x2d30 <__ultoa_invert+0x5c>
    2d3e:	f6 cf       	rjmp	.-20     	; 0x2d2c <__ultoa_invert+0x58>
    2d40:	46 2f       	mov	r20, r22
    2d42:	4f 70       	andi	r20, 0x0F	; 15
    2d44:	40 5d       	subi	r20, 0xD0	; 208
    2d46:	4a 33       	cpi	r20, 0x3A	; 58
    2d48:	18 f0       	brcs	.+6      	; 0x2d50 <__ultoa_invert+0x7c>
    2d4a:	49 5d       	subi	r20, 0xD9	; 217
    2d4c:	31 fd       	sbrc	r19, 1
    2d4e:	40 52       	subi	r20, 0x20	; 32
    2d50:	41 93       	st	Z+, r20
    2d52:	02 d0       	rcall	.+4      	; 0x2d58 <__ultoa_invert+0x84>
    2d54:	a9 f7       	brne	.-22     	; 0x2d40 <__ultoa_invert+0x6c>
    2d56:	ea cf       	rjmp	.-44     	; 0x2d2c <__ultoa_invert+0x58>
    2d58:	b4 e0       	ldi	r27, 0x04	; 4
    2d5a:	a6 95       	lsr	r26
    2d5c:	97 95       	ror	r25
    2d5e:	87 95       	ror	r24
    2d60:	77 95       	ror	r23
    2d62:	67 95       	ror	r22
    2d64:	ba 95       	dec	r27
    2d66:	c9 f7       	brne	.-14     	; 0x2d5a <__ultoa_invert+0x86>
    2d68:	00 97       	sbiw	r24, 0x00	; 0
    2d6a:	61 05       	cpc	r22, r1
    2d6c:	71 05       	cpc	r23, r1
    2d6e:	08 95       	ret
    2d70:	9b 01       	movw	r18, r22
    2d72:	ac 01       	movw	r20, r24
    2d74:	0a 2e       	mov	r0, r26
    2d76:	06 94       	lsr	r0
    2d78:	57 95       	ror	r21
    2d7a:	47 95       	ror	r20
    2d7c:	37 95       	ror	r19
    2d7e:	27 95       	ror	r18
    2d80:	ba 95       	dec	r27
    2d82:	c9 f7       	brne	.-14     	; 0x2d76 <__ultoa_invert+0xa2>
    2d84:	62 0f       	add	r22, r18
    2d86:	73 1f       	adc	r23, r19
    2d88:	84 1f       	adc	r24, r20
    2d8a:	95 1f       	adc	r25, r21
    2d8c:	a0 1d       	adc	r26, r0
    2d8e:	08 95       	ret

00002d90 <__prologue_saves__>:
    2d90:	2f 92       	push	r2
    2d92:	3f 92       	push	r3
    2d94:	4f 92       	push	r4
    2d96:	5f 92       	push	r5
    2d98:	6f 92       	push	r6
    2d9a:	7f 92       	push	r7
    2d9c:	8f 92       	push	r8
    2d9e:	9f 92       	push	r9
    2da0:	af 92       	push	r10
    2da2:	bf 92       	push	r11
    2da4:	cf 92       	push	r12
    2da6:	df 92       	push	r13
    2da8:	ef 92       	push	r14
    2daa:	ff 92       	push	r15
    2dac:	0f 93       	push	r16
    2dae:	1f 93       	push	r17
    2db0:	cf 93       	push	r28
    2db2:	df 93       	push	r29
    2db4:	cd b7       	in	r28, 0x3d	; 61
    2db6:	de b7       	in	r29, 0x3e	; 62
    2db8:	ca 1b       	sub	r28, r26
    2dba:	db 0b       	sbc	r29, r27
    2dbc:	0f b6       	in	r0, 0x3f	; 63
    2dbe:	f8 94       	cli
    2dc0:	de bf       	out	0x3e, r29	; 62
    2dc2:	0f be       	out	0x3f, r0	; 63
    2dc4:	cd bf       	out	0x3d, r28	; 61
    2dc6:	09 94       	ijmp

00002dc8 <__epilogue_restores__>:
    2dc8:	2a 88       	ldd	r2, Y+18	; 0x12
    2dca:	39 88       	ldd	r3, Y+17	; 0x11
    2dcc:	48 88       	ldd	r4, Y+16	; 0x10
    2dce:	5f 84       	ldd	r5, Y+15	; 0x0f
    2dd0:	6e 84       	ldd	r6, Y+14	; 0x0e
    2dd2:	7d 84       	ldd	r7, Y+13	; 0x0d
    2dd4:	8c 84       	ldd	r8, Y+12	; 0x0c
    2dd6:	9b 84       	ldd	r9, Y+11	; 0x0b
    2dd8:	aa 84       	ldd	r10, Y+10	; 0x0a
    2dda:	b9 84       	ldd	r11, Y+9	; 0x09
    2ddc:	c8 84       	ldd	r12, Y+8	; 0x08
    2dde:	df 80       	ldd	r13, Y+7	; 0x07
    2de0:	ee 80       	ldd	r14, Y+6	; 0x06
    2de2:	fd 80       	ldd	r15, Y+5	; 0x05
    2de4:	0c 81       	ldd	r16, Y+4	; 0x04
    2de6:	1b 81       	ldd	r17, Y+3	; 0x03
    2de8:	aa 81       	ldd	r26, Y+2	; 0x02
    2dea:	b9 81       	ldd	r27, Y+1	; 0x01
    2dec:	ce 0f       	add	r28, r30
    2dee:	d1 1d       	adc	r29, r1
    2df0:	0f b6       	in	r0, 0x3f	; 63
    2df2:	f8 94       	cli
    2df4:	de bf       	out	0x3e, r29	; 62
    2df6:	0f be       	out	0x3f, r0	; 63
    2df8:	cd bf       	out	0x3d, r28	; 61
    2dfa:	ed 01       	movw	r28, r26
    2dfc:	08 95       	ret

00002dfe <_exit>:
    2dfe:	f8 94       	cli

00002e00 <__stop_program>:
    2e00:	ff cf       	rjmp	.-2      	; 0x2e00 <__stop_program>
